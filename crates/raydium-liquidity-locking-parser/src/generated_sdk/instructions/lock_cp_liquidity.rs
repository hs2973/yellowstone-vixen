//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct LockCpLiquidity {
    pub authority: solana_program::pubkey::Pubkey,
    /// Pay to create account lamports
    pub payer: solana_program::pubkey::Pubkey,
    /// who want to lock liquidity
    pub liquidity_owner: solana_program::pubkey::Pubkey,

    pub fee_nft_owner: solana_program::pubkey::Pubkey,
    /// Create a unique fee nft mint
    pub fee_nft_mint: solana_program::pubkey::Pubkey,
    /// Token account where fee nft will be minted to
    pub fee_nft_account: solana_program::pubkey::Pubkey,
    /// Indicates which pool the locked liquidity belong to
    pub pool_state: solana_program::pubkey::Pubkey,
    /// Store the locked information of liquidity
    pub locked_liquidity: solana_program::pubkey::Pubkey,
    /// The mint of liquidity token
    pub lp_mint: solana_program::pubkey::Pubkey,
    /// liquidity owner lp token account
    pub liquidity_owner_lp: solana_program::pubkey::Pubkey,
    /// Locked lp token deposit to
    pub locked_lp_vault: solana_program::pubkey::Pubkey,
    /// The address that holds pool tokens for token_0
    pub token0_vault: solana_program::pubkey::Pubkey,
    /// The address that holds pool tokens for token_1
    pub token1_vault: solana_program::pubkey::Pubkey,
    /// To store metaplex metadata
    pub metadata_account: solana_program::pubkey::Pubkey,
    /// Sysvar for token mint and ATA creation
    pub rent: solana_program::pubkey::Pubkey,
    /// Program to create the new account
    pub system_program: solana_program::pubkey::Pubkey,
    /// Program to create/transfer mint/token account
    pub token_program: solana_program::pubkey::Pubkey,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: solana_program::pubkey::Pubkey,
    /// Program to create NFT metadata accunt
    pub metadata_program: solana_program::pubkey::Pubkey,
}

impl LockCpLiquidity {
    pub fn instruction(
        &self,
        args: LockCpLiquidityInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: LockCpLiquidityInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(19 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.liquidity_owner,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_nft_owner,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_nft_mint,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_nft_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.locked_liquidity,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liquidity_owner_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.locked_lp_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token0_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token1_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&LockCpLiquidityInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LIQUIDITY_LOCKING_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LockCpLiquidityInstructionData {
    discriminator: [u8; 8],
}

impl LockCpLiquidityInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [216, 157, 29, 78, 38, 51, 31, 26],
        }
    }
}

impl Default for LockCpLiquidityInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LockCpLiquidityInstructionArgs {
    pub lp_amount: u64,
    pub with_metadata: bool,
}

/// Instruction builder for `LockCpLiquidity`.
///
/// ### Accounts:
///
///   0. `[]` authority
///   1. `[writable, signer]` payer
///   2. `[signer]` liquidity_owner
///   3. `[]` fee_nft_owner
///   4. `[writable, signer]` fee_nft_mint
///   5. `[writable]` fee_nft_account
///   6. `[]` pool_state
///   7. `[writable]` locked_liquidity
///   8. `[]` lp_mint
///   9. `[writable]` liquidity_owner_lp
///   10. `[writable]` locked_lp_vault
///   11. `[writable]` token0_vault
///   12. `[writable]` token1_vault
///   13. `[writable]` metadata_account
///   14. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   15. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   16. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   17. `[]` associated_token_program
///   18. `[]` metadata_program
#[derive(Clone, Debug, Default)]
pub struct LockCpLiquidityBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    liquidity_owner: Option<solana_program::pubkey::Pubkey>,
    fee_nft_owner: Option<solana_program::pubkey::Pubkey>,
    fee_nft_mint: Option<solana_program::pubkey::Pubkey>,
    fee_nft_account: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    locked_liquidity: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    liquidity_owner_lp: Option<solana_program::pubkey::Pubkey>,
    locked_lp_vault: Option<solana_program::pubkey::Pubkey>,
    token0_vault: Option<solana_program::pubkey::Pubkey>,
    token1_vault: Option<solana_program::pubkey::Pubkey>,
    metadata_account: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    metadata_program: Option<solana_program::pubkey::Pubkey>,
    lp_amount: Option<u64>,
    with_metadata: Option<bool>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl LockCpLiquidityBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Pay to create account lamports
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    /// who want to lock liquidity
    #[inline(always)]
    pub fn liquidity_owner(
        &mut self,
        liquidity_owner: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liquidity_owner = Some(liquidity_owner);
        self
    }

    #[inline(always)]
    pub fn fee_nft_owner(&mut self, fee_nft_owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_nft_owner = Some(fee_nft_owner);
        self
    }

    /// Create a unique fee nft mint
    #[inline(always)]
    pub fn fee_nft_mint(&mut self, fee_nft_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_nft_mint = Some(fee_nft_mint);
        self
    }

    /// Token account where fee nft will be minted to
    #[inline(always)]
    pub fn fee_nft_account(
        &mut self,
        fee_nft_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_nft_account = Some(fee_nft_account);
        self
    }

    /// Indicates which pool the locked liquidity belong to
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// Store the locked information of liquidity
    #[inline(always)]
    pub fn locked_liquidity(
        &mut self,
        locked_liquidity: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.locked_liquidity = Some(locked_liquidity);
        self
    }

    /// The mint of liquidity token
    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    /// liquidity owner lp token account
    #[inline(always)]
    pub fn liquidity_owner_lp(
        &mut self,
        liquidity_owner_lp: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liquidity_owner_lp = Some(liquidity_owner_lp);
        self
    }

    /// Locked lp token deposit to
    #[inline(always)]
    pub fn locked_lp_vault(
        &mut self,
        locked_lp_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.locked_lp_vault = Some(locked_lp_vault);
        self
    }

    /// The address that holds pool tokens for token_0
    #[inline(always)]
    pub fn token0_vault(&mut self, token0_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token0_vault = Some(token0_vault);
        self
    }

    /// The address that holds pool tokens for token_1
    #[inline(always)]
    pub fn token1_vault(&mut self, token1_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token1_vault = Some(token1_vault);
        self
    }

    /// To store metaplex metadata
    #[inline(always)]
    pub fn metadata_account(
        &mut self,
        metadata_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_account = Some(metadata_account);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    /// Sysvar for token mint and ATA creation
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// Program to create the new account
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// Program to create/transfer mint/token account
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// Program to create an ATA for receiving fee NFT
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// Program to create NFT metadata accunt
    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_program = Some(metadata_program);
        self
    }

    #[inline(always)]
    pub fn lp_amount(&mut self, lp_amount: u64) -> &mut Self {
        self.lp_amount = Some(lp_amount);
        self
    }

    #[inline(always)]
    pub fn with_metadata(&mut self, with_metadata: bool) -> &mut Self {
        self.with_metadata = Some(with_metadata);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = LockCpLiquidity {
            authority: self.authority.expect("authority is not set"),
            payer: self.payer.expect("payer is not set"),
            liquidity_owner: self.liquidity_owner.expect("liquidity_owner is not set"),
            fee_nft_owner: self.fee_nft_owner.expect("fee_nft_owner is not set"),
            fee_nft_mint: self.fee_nft_mint.expect("fee_nft_mint is not set"),
            fee_nft_account: self.fee_nft_account.expect("fee_nft_account is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            locked_liquidity: self.locked_liquidity.expect("locked_liquidity is not set"),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            liquidity_owner_lp: self
                .liquidity_owner_lp
                .expect("liquidity_owner_lp is not set"),
            locked_lp_vault: self.locked_lp_vault.expect("locked_lp_vault is not set"),
            token0_vault: self.token0_vault.expect("token0_vault is not set"),
            token1_vault: self.token1_vault.expect("token1_vault is not set"),
            metadata_account: self.metadata_account.expect("metadata_account is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            metadata_program: self.metadata_program.expect("metadata_program is not set"),
        };
        let args = LockCpLiquidityInstructionArgs {
            lp_amount: self.lp_amount.clone().expect("lp_amount is not set"),
            with_metadata: self
                .with_metadata
                .clone()
                .expect("with_metadata is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `lock_cp_liquidity` CPI accounts.
pub struct LockCpLiquidityCpiAccounts<'a, 'b> {
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Pay to create account lamports
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// who want to lock liquidity
    pub liquidity_owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Create a unique fee nft mint
    pub fee_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account where fee nft will be minted to
    pub fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Indicates which pool the locked liquidity belong to
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// Store the locked information of liquidity
    pub locked_liquidity: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of liquidity token
    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// liquidity owner lp token account
    pub liquidity_owner_lp: &'b solana_program::account_info::AccountInfo<'a>,
    /// Locked lp token deposit to
    pub locked_lp_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_0
    pub token0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_1
    pub token1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// To store metaplex metadata
    pub metadata_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Sysvar for token mint and ATA creation
    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create the new account
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create/transfer mint/token account
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create NFT metadata accunt
    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `lock_cp_liquidity` CPI instruction.
pub struct LockCpLiquidityCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Pay to create account lamports
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// who want to lock liquidity
    pub liquidity_owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Create a unique fee nft mint
    pub fee_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account where fee nft will be minted to
    pub fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Indicates which pool the locked liquidity belong to
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// Store the locked information of liquidity
    pub locked_liquidity: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of liquidity token
    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// liquidity owner lp token account
    pub liquidity_owner_lp: &'b solana_program::account_info::AccountInfo<'a>,
    /// Locked lp token deposit to
    pub locked_lp_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_0
    pub token0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_1
    pub token1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// To store metaplex metadata
    pub metadata_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Sysvar for token mint and ATA creation
    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create the new account
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create/transfer mint/token account
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create NFT metadata accunt
    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: LockCpLiquidityInstructionArgs,
}

impl<'a, 'b> LockCpLiquidityCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: LockCpLiquidityCpiAccounts<'a, 'b>,
        args: LockCpLiquidityInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            payer: accounts.payer,
            liquidity_owner: accounts.liquidity_owner,
            fee_nft_owner: accounts.fee_nft_owner,
            fee_nft_mint: accounts.fee_nft_mint,
            fee_nft_account: accounts.fee_nft_account,
            pool_state: accounts.pool_state,
            locked_liquidity: accounts.locked_liquidity,
            lp_mint: accounts.lp_mint,
            liquidity_owner_lp: accounts.liquidity_owner_lp,
            locked_lp_vault: accounts.locked_lp_vault,
            token0_vault: accounts.token0_vault,
            token1_vault: accounts.token1_vault,
            metadata_account: accounts.metadata_account,
            rent: accounts.rent,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            metadata_program: accounts.metadata_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(19 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.liquidity_owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_nft_owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_nft_mint.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_nft_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.locked_liquidity.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liquidity_owner_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.locked_lp_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token0_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token1_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&LockCpLiquidityInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LIQUIDITY_LOCKING_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(20 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.liquidity_owner.clone());
        account_infos.push(self.fee_nft_owner.clone());
        account_infos.push(self.fee_nft_mint.clone());
        account_infos.push(self.fee_nft_account.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.locked_liquidity.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.liquidity_owner_lp.clone());
        account_infos.push(self.locked_lp_vault.clone());
        account_infos.push(self.token0_vault.clone());
        account_infos.push(self.token1_vault.clone());
        account_infos.push(self.metadata_account.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.metadata_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `LockCpLiquidity` via CPI.
///
/// ### Accounts:
///
///   0. `[]` authority
///   1. `[writable, signer]` payer
///   2. `[signer]` liquidity_owner
///   3. `[]` fee_nft_owner
///   4. `[writable, signer]` fee_nft_mint
///   5. `[writable]` fee_nft_account
///   6. `[]` pool_state
///   7. `[writable]` locked_liquidity
///   8. `[]` lp_mint
///   9. `[writable]` liquidity_owner_lp
///   10. `[writable]` locked_lp_vault
///   11. `[writable]` token0_vault
///   12. `[writable]` token1_vault
///   13. `[writable]` metadata_account
///   14. `[]` rent
///   15. `[]` system_program
///   16. `[]` token_program
///   17. `[]` associated_token_program
///   18. `[]` metadata_program
#[derive(Clone, Debug)]
pub struct LockCpLiquidityCpiBuilder<'a, 'b> {
    instruction: Box<LockCpLiquidityCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LockCpLiquidityCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(LockCpLiquidityCpiBuilderInstruction {
            __program: program,
            authority: None,
            payer: None,
            liquidity_owner: None,
            fee_nft_owner: None,
            fee_nft_mint: None,
            fee_nft_account: None,
            pool_state: None,
            locked_liquidity: None,
            lp_mint: None,
            liquidity_owner_lp: None,
            locked_lp_vault: None,
            token0_vault: None,
            token1_vault: None,
            metadata_account: None,
            rent: None,
            system_program: None,
            token_program: None,
            associated_token_program: None,
            metadata_program: None,
            lp_amount: None,
            with_metadata: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Pay to create account lamports
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    /// who want to lock liquidity
    #[inline(always)]
    pub fn liquidity_owner(
        &mut self,
        liquidity_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liquidity_owner = Some(liquidity_owner);
        self
    }

    #[inline(always)]
    pub fn fee_nft_owner(
        &mut self,
        fee_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_nft_owner = Some(fee_nft_owner);
        self
    }

    /// Create a unique fee nft mint
    #[inline(always)]
    pub fn fee_nft_mint(
        &mut self,
        fee_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_nft_mint = Some(fee_nft_mint);
        self
    }

    /// Token account where fee nft will be minted to
    #[inline(always)]
    pub fn fee_nft_account(
        &mut self,
        fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_nft_account = Some(fee_nft_account);
        self
    }

    /// Indicates which pool the locked liquidity belong to
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// Store the locked information of liquidity
    #[inline(always)]
    pub fn locked_liquidity(
        &mut self,
        locked_liquidity: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.locked_liquidity = Some(locked_liquidity);
        self
    }

    /// The mint of liquidity token
    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    /// liquidity owner lp token account
    #[inline(always)]
    pub fn liquidity_owner_lp(
        &mut self,
        liquidity_owner_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liquidity_owner_lp = Some(liquidity_owner_lp);
        self
    }

    /// Locked lp token deposit to
    #[inline(always)]
    pub fn locked_lp_vault(
        &mut self,
        locked_lp_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.locked_lp_vault = Some(locked_lp_vault);
        self
    }

    /// The address that holds pool tokens for token_0
    #[inline(always)]
    pub fn token0_vault(
        &mut self,
        token0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token0_vault = Some(token0_vault);
        self
    }

    /// The address that holds pool tokens for token_1
    #[inline(always)]
    pub fn token1_vault(
        &mut self,
        token1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token1_vault = Some(token1_vault);
        self
    }

    /// To store metaplex metadata
    #[inline(always)]
    pub fn metadata_account(
        &mut self,
        metadata_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_account = Some(metadata_account);
        self
    }

    /// Sysvar for token mint and ATA creation
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    /// Program to create the new account
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Program to create/transfer mint/token account
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Program to create an ATA for receiving fee NFT
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// Program to create NFT metadata accunt
    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_program = Some(metadata_program);
        self
    }

    #[inline(always)]
    pub fn lp_amount(&mut self, lp_amount: u64) -> &mut Self {
        self.instruction.lp_amount = Some(lp_amount);
        self
    }

    #[inline(always)]
    pub fn with_metadata(&mut self, with_metadata: bool) -> &mut Self {
        self.instruction.with_metadata = Some(with_metadata);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = LockCpLiquidityInstructionArgs {
            lp_amount: self
                .instruction
                .lp_amount
                .clone()
                .expect("lp_amount is not set"),
            with_metadata: self
                .instruction
                .with_metadata
                .clone()
                .expect("with_metadata is not set"),
        };
        let instruction = LockCpLiquidityCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            liquidity_owner: self
                .instruction
                .liquidity_owner
                .expect("liquidity_owner is not set"),

            fee_nft_owner: self
                .instruction
                .fee_nft_owner
                .expect("fee_nft_owner is not set"),

            fee_nft_mint: self
                .instruction
                .fee_nft_mint
                .expect("fee_nft_mint is not set"),

            fee_nft_account: self
                .instruction
                .fee_nft_account
                .expect("fee_nft_account is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            locked_liquidity: self
                .instruction
                .locked_liquidity
                .expect("locked_liquidity is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            liquidity_owner_lp: self
                .instruction
                .liquidity_owner_lp
                .expect("liquidity_owner_lp is not set"),

            locked_lp_vault: self
                .instruction
                .locked_lp_vault
                .expect("locked_lp_vault is not set"),

            token0_vault: self
                .instruction
                .token0_vault
                .expect("token0_vault is not set"),

            token1_vault: self
                .instruction
                .token1_vault
                .expect("token1_vault is not set"),

            metadata_account: self
                .instruction
                .metadata_account
                .expect("metadata_account is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            metadata_program: self
                .instruction
                .metadata_program
                .expect("metadata_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct LockCpLiquidityCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liquidity_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_nft_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_nft_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    locked_liquidity: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liquidity_owner_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    locked_lp_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token0_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token1_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_amount: Option<u64>,
    with_metadata: Option<bool>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
