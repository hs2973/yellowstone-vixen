//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CollectClmmFeesAndRewards {
    pub authority: solana_program::pubkey::Pubkey,
    /// The owner who has fee nft account
    pub fee_nft_owner: solana_program::pubkey::Pubkey,
    /// Fee token account
    pub fee_nft_account: solana_program::pubkey::Pubkey,
    /// Store the locked the information of position
    pub locked_position: solana_program::pubkey::Pubkey,
    /// clmm program
    pub clmm_program: solana_program::pubkey::Pubkey,
    /// Program ATA locked NFT account or user ATA position NFT account
    pub locked_nft_account: solana_program::pubkey::Pubkey,
    /// Decrease liquidity for this position
    pub personal_position: solana_program::pubkey::Pubkey,

    pub pool_state: solana_program::pubkey::Pubkey,

    pub protocol_position: solana_program::pubkey::Pubkey,
    /// The address that holds pool tokens for token_0
    pub token0_vault: solana_program::pubkey::Pubkey,
    /// The address that holds pool tokens for token_1
    pub token1_vault: solana_program::pubkey::Pubkey,
    /// Stores init state for the lower tick
    pub tick_array_lower: solana_program::pubkey::Pubkey,
    /// Stores init state for the upper tick
    pub tick_array_upper: solana_program::pubkey::Pubkey,
    /// The destination token account for receive amount_0
    pub recipient_token0_account: solana_program::pubkey::Pubkey,
    /// The destination token account for receive amount_1
    pub recipient_token1_account: solana_program::pubkey::Pubkey,
    /// SPL program to transfer out tokens
    pub token_program: solana_program::pubkey::Pubkey,
    /// Token program 2022
    pub token_program2022: solana_program::pubkey::Pubkey,
    /// memo program
    pub memo_program: solana_program::pubkey::Pubkey,
    /// The mint of token vault 0
    pub vault0_mint: solana_program::pubkey::Pubkey,
    /// The mint of token vault 1
    pub vault1_mint: solana_program::pubkey::Pubkey,
}

impl CollectClmmFeesAndRewards {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(20 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_nft_owner,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_nft_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.locked_position,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clmm_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.locked_nft_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.personal_position,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.protocol_position,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token0_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token1_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.tick_array_lower,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.tick_array_upper,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.recipient_token0_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.recipient_token1_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program2022,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.memo_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault0_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault1_mint,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&CollectClmmFeesAndRewardsInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LIQUIDITY_LOCKING_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectClmmFeesAndRewardsInstructionData {
    discriminator: [u8; 8],
}

impl CollectClmmFeesAndRewardsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [16, 72, 250, 198, 14, 162, 212, 19],
        }
    }
}

impl Default for CollectClmmFeesAndRewardsInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `CollectClmmFeesAndRewards`.
///
/// ### Accounts:
///
///   0. `[]` authority
///   1. `[signer]` fee_nft_owner
///   2. `[]` fee_nft_account
///   3. `[]` locked_position
///   4. `[]` clmm_program
///   5. `[writable]` locked_nft_account
///   6. `[writable]` personal_position
///   7. `[writable]` pool_state
///   8. `[writable]` protocol_position
///   9. `[writable]` token0_vault
///   10. `[writable]` token1_vault
///   11. `[writable]` tick_array_lower
///   12. `[writable]` tick_array_upper
///   13. `[writable]` recipient_token0_account
///   14. `[writable]` recipient_token1_account
///   15. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   16. `[]` token_program2022
///   17. `[]` memo_program
///   18. `[]` vault0_mint
///   19. `[]` vault1_mint
#[derive(Clone, Debug, Default)]
pub struct CollectClmmFeesAndRewardsBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    fee_nft_owner: Option<solana_program::pubkey::Pubkey>,
    fee_nft_account: Option<solana_program::pubkey::Pubkey>,
    locked_position: Option<solana_program::pubkey::Pubkey>,
    clmm_program: Option<solana_program::pubkey::Pubkey>,
    locked_nft_account: Option<solana_program::pubkey::Pubkey>,
    personal_position: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    protocol_position: Option<solana_program::pubkey::Pubkey>,
    token0_vault: Option<solana_program::pubkey::Pubkey>,
    token1_vault: Option<solana_program::pubkey::Pubkey>,
    tick_array_lower: Option<solana_program::pubkey::Pubkey>,
    tick_array_upper: Option<solana_program::pubkey::Pubkey>,
    recipient_token0_account: Option<solana_program::pubkey::Pubkey>,
    recipient_token1_account: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token_program2022: Option<solana_program::pubkey::Pubkey>,
    memo_program: Option<solana_program::pubkey::Pubkey>,
    vault0_mint: Option<solana_program::pubkey::Pubkey>,
    vault1_mint: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CollectClmmFeesAndRewardsBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// The owner who has fee nft account
    #[inline(always)]
    pub fn fee_nft_owner(&mut self, fee_nft_owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_nft_owner = Some(fee_nft_owner);
        self
    }

    /// Fee token account
    #[inline(always)]
    pub fn fee_nft_account(
        &mut self,
        fee_nft_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_nft_account = Some(fee_nft_account);
        self
    }

    /// Store the locked the information of position
    #[inline(always)]
    pub fn locked_position(
        &mut self,
        locked_position: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.locked_position = Some(locked_position);
        self
    }

    /// clmm program
    #[inline(always)]
    pub fn clmm_program(&mut self, clmm_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clmm_program = Some(clmm_program);
        self
    }

    /// Program ATA locked NFT account or user ATA position NFT account
    #[inline(always)]
    pub fn locked_nft_account(
        &mut self,
        locked_nft_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.locked_nft_account = Some(locked_nft_account);
        self
    }

    /// Decrease liquidity for this position
    #[inline(always)]
    pub fn personal_position(
        &mut self,
        personal_position: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.personal_position = Some(personal_position);
        self
    }

    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    #[inline(always)]
    pub fn protocol_position(
        &mut self,
        protocol_position: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_position = Some(protocol_position);
        self
    }

    /// The address that holds pool tokens for token_0
    #[inline(always)]
    pub fn token0_vault(&mut self, token0_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token0_vault = Some(token0_vault);
        self
    }

    /// The address that holds pool tokens for token_1
    #[inline(always)]
    pub fn token1_vault(&mut self, token1_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token1_vault = Some(token1_vault);
        self
    }

    /// Stores init state for the lower tick
    #[inline(always)]
    pub fn tick_array_lower(
        &mut self,
        tick_array_lower: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.tick_array_lower = Some(tick_array_lower);
        self
    }

    /// Stores init state for the upper tick
    #[inline(always)]
    pub fn tick_array_upper(
        &mut self,
        tick_array_upper: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.tick_array_upper = Some(tick_array_upper);
        self
    }

    /// The destination token account for receive amount_0
    #[inline(always)]
    pub fn recipient_token0_account(
        &mut self,
        recipient_token0_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token0_account = Some(recipient_token0_account);
        self
    }

    /// The destination token account for receive amount_1
    #[inline(always)]
    pub fn recipient_token1_account(
        &mut self,
        recipient_token1_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token1_account = Some(recipient_token1_account);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL program to transfer out tokens
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// Token program 2022
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_program2022 = Some(token_program2022);
        self
    }

    /// memo program
    #[inline(always)]
    pub fn memo_program(&mut self, memo_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.memo_program = Some(memo_program);
        self
    }

    /// The mint of token vault 0
    #[inline(always)]
    pub fn vault0_mint(&mut self, vault0_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault0_mint = Some(vault0_mint);
        self
    }

    /// The mint of token vault 1
    #[inline(always)]
    pub fn vault1_mint(&mut self, vault1_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault1_mint = Some(vault1_mint);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CollectClmmFeesAndRewards {
            authority: self.authority.expect("authority is not set"),
            fee_nft_owner: self.fee_nft_owner.expect("fee_nft_owner is not set"),
            fee_nft_account: self.fee_nft_account.expect("fee_nft_account is not set"),
            locked_position: self.locked_position.expect("locked_position is not set"),
            clmm_program: self.clmm_program.expect("clmm_program is not set"),
            locked_nft_account: self
                .locked_nft_account
                .expect("locked_nft_account is not set"),
            personal_position: self
                .personal_position
                .expect("personal_position is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            protocol_position: self
                .protocol_position
                .expect("protocol_position is not set"),
            token0_vault: self.token0_vault.expect("token0_vault is not set"),
            token1_vault: self.token1_vault.expect("token1_vault is not set"),
            tick_array_lower: self.tick_array_lower.expect("tick_array_lower is not set"),
            tick_array_upper: self.tick_array_upper.expect("tick_array_upper is not set"),
            recipient_token0_account: self
                .recipient_token0_account
                .expect("recipient_token0_account is not set"),
            recipient_token1_account: self
                .recipient_token1_account
                .expect("recipient_token1_account is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            token_program2022: self
                .token_program2022
                .expect("token_program2022 is not set"),
            memo_program: self.memo_program.expect("memo_program is not set"),
            vault0_mint: self.vault0_mint.expect("vault0_mint is not set"),
            vault1_mint: self.vault1_mint.expect("vault1_mint is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `collect_clmm_fees_and_rewards` CPI accounts.
pub struct CollectClmmFeesAndRewardsCpiAccounts<'a, 'b> {
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The owner who has fee nft account
    pub fee_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Fee token account
    pub fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Store the locked the information of position
    pub locked_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// clmm program
    pub clmm_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program ATA locked NFT account or user ATA position NFT account
    pub locked_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Decrease liquidity for this position
    pub personal_position: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_0
    pub token0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_1
    pub token1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stores init state for the lower tick
    pub tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stores init state for the upper tick
    pub tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,
    /// The destination token account for receive amount_0
    pub recipient_token0_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The destination token account for receive amount_1
    pub recipient_token1_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL program to transfer out tokens
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program 2022
    pub token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    /// memo program
    pub memo_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of token vault 0
    pub vault0_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of token vault 1
    pub vault1_mint: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `collect_clmm_fees_and_rewards` CPI instruction.
pub struct CollectClmmFeesAndRewardsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The owner who has fee nft account
    pub fee_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Fee token account
    pub fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Store the locked the information of position
    pub locked_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// clmm program
    pub clmm_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program ATA locked NFT account or user ATA position NFT account
    pub locked_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Decrease liquidity for this position
    pub personal_position: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_0
    pub token0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_1
    pub token1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stores init state for the lower tick
    pub tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stores init state for the upper tick
    pub tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,
    /// The destination token account for receive amount_0
    pub recipient_token0_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The destination token account for receive amount_1
    pub recipient_token1_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL program to transfer out tokens
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program 2022
    pub token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    /// memo program
    pub memo_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of token vault 0
    pub vault0_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of token vault 1
    pub vault1_mint: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> CollectClmmFeesAndRewardsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CollectClmmFeesAndRewardsCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            fee_nft_owner: accounts.fee_nft_owner,
            fee_nft_account: accounts.fee_nft_account,
            locked_position: accounts.locked_position,
            clmm_program: accounts.clmm_program,
            locked_nft_account: accounts.locked_nft_account,
            personal_position: accounts.personal_position,
            pool_state: accounts.pool_state,
            protocol_position: accounts.protocol_position,
            token0_vault: accounts.token0_vault,
            token1_vault: accounts.token1_vault,
            tick_array_lower: accounts.tick_array_lower,
            tick_array_upper: accounts.tick_array_upper,
            recipient_token0_account: accounts.recipient_token0_account,
            recipient_token1_account: accounts.recipient_token1_account,
            token_program: accounts.token_program,
            token_program2022: accounts.token_program2022,
            memo_program: accounts.memo_program,
            vault0_mint: accounts.vault0_mint,
            vault1_mint: accounts.vault1_mint,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(20 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_nft_owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_nft_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.locked_position.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clmm_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.locked_nft_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.personal_position.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.protocol_position.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token0_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token1_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tick_array_lower.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tick_array_upper.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.recipient_token0_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.recipient_token1_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program2022.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.memo_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault0_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault1_mint.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&CollectClmmFeesAndRewardsInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LIQUIDITY_LOCKING_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(21 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.fee_nft_owner.clone());
        account_infos.push(self.fee_nft_account.clone());
        account_infos.push(self.locked_position.clone());
        account_infos.push(self.clmm_program.clone());
        account_infos.push(self.locked_nft_account.clone());
        account_infos.push(self.personal_position.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.protocol_position.clone());
        account_infos.push(self.token0_vault.clone());
        account_infos.push(self.token1_vault.clone());
        account_infos.push(self.tick_array_lower.clone());
        account_infos.push(self.tick_array_upper.clone());
        account_infos.push(self.recipient_token0_account.clone());
        account_infos.push(self.recipient_token1_account.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_program2022.clone());
        account_infos.push(self.memo_program.clone());
        account_infos.push(self.vault0_mint.clone());
        account_infos.push(self.vault1_mint.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CollectClmmFeesAndRewards` via CPI.
///
/// ### Accounts:
///
///   0. `[]` authority
///   1. `[signer]` fee_nft_owner
///   2. `[]` fee_nft_account
///   3. `[]` locked_position
///   4. `[]` clmm_program
///   5. `[writable]` locked_nft_account
///   6. `[writable]` personal_position
///   7. `[writable]` pool_state
///   8. `[writable]` protocol_position
///   9. `[writable]` token0_vault
///   10. `[writable]` token1_vault
///   11. `[writable]` tick_array_lower
///   12. `[writable]` tick_array_upper
///   13. `[writable]` recipient_token0_account
///   14. `[writable]` recipient_token1_account
///   15. `[]` token_program
///   16. `[]` token_program2022
///   17. `[]` memo_program
///   18. `[]` vault0_mint
///   19. `[]` vault1_mint
#[derive(Clone, Debug)]
pub struct CollectClmmFeesAndRewardsCpiBuilder<'a, 'b> {
    instruction: Box<CollectClmmFeesAndRewardsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CollectClmmFeesAndRewardsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CollectClmmFeesAndRewardsCpiBuilderInstruction {
            __program: program,
            authority: None,
            fee_nft_owner: None,
            fee_nft_account: None,
            locked_position: None,
            clmm_program: None,
            locked_nft_account: None,
            personal_position: None,
            pool_state: None,
            protocol_position: None,
            token0_vault: None,
            token1_vault: None,
            tick_array_lower: None,
            tick_array_upper: None,
            recipient_token0_account: None,
            recipient_token1_account: None,
            token_program: None,
            token_program2022: None,
            memo_program: None,
            vault0_mint: None,
            vault1_mint: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// The owner who has fee nft account
    #[inline(always)]
    pub fn fee_nft_owner(
        &mut self,
        fee_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_nft_owner = Some(fee_nft_owner);
        self
    }

    /// Fee token account
    #[inline(always)]
    pub fn fee_nft_account(
        &mut self,
        fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_nft_account = Some(fee_nft_account);
        self
    }

    /// Store the locked the information of position
    #[inline(always)]
    pub fn locked_position(
        &mut self,
        locked_position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.locked_position = Some(locked_position);
        self
    }

    /// clmm program
    #[inline(always)]
    pub fn clmm_program(
        &mut self,
        clmm_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.clmm_program = Some(clmm_program);
        self
    }

    /// Program ATA locked NFT account or user ATA position NFT account
    #[inline(always)]
    pub fn locked_nft_account(
        &mut self,
        locked_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.locked_nft_account = Some(locked_nft_account);
        self
    }

    /// Decrease liquidity for this position
    #[inline(always)]
    pub fn personal_position(
        &mut self,
        personal_position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.personal_position = Some(personal_position);
        self
    }

    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    #[inline(always)]
    pub fn protocol_position(
        &mut self,
        protocol_position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_position = Some(protocol_position);
        self
    }

    /// The address that holds pool tokens for token_0
    #[inline(always)]
    pub fn token0_vault(
        &mut self,
        token0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token0_vault = Some(token0_vault);
        self
    }

    /// The address that holds pool tokens for token_1
    #[inline(always)]
    pub fn token1_vault(
        &mut self,
        token1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token1_vault = Some(token1_vault);
        self
    }

    /// Stores init state for the lower tick
    #[inline(always)]
    pub fn tick_array_lower(
        &mut self,
        tick_array_lower: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tick_array_lower = Some(tick_array_lower);
        self
    }

    /// Stores init state for the upper tick
    #[inline(always)]
    pub fn tick_array_upper(
        &mut self,
        tick_array_upper: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tick_array_upper = Some(tick_array_upper);
        self
    }

    /// The destination token account for receive amount_0
    #[inline(always)]
    pub fn recipient_token0_account(
        &mut self,
        recipient_token0_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token0_account = Some(recipient_token0_account);
        self
    }

    /// The destination token account for receive amount_1
    #[inline(always)]
    pub fn recipient_token1_account(
        &mut self,
        recipient_token1_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token1_account = Some(recipient_token1_account);
        self
    }

    /// SPL program to transfer out tokens
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Token program 2022
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program2022 = Some(token_program2022);
        self
    }

    /// memo program
    #[inline(always)]
    pub fn memo_program(
        &mut self,
        memo_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.memo_program = Some(memo_program);
        self
    }

    /// The mint of token vault 0
    #[inline(always)]
    pub fn vault0_mint(
        &mut self,
        vault0_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault0_mint = Some(vault0_mint);
        self
    }

    /// The mint of token vault 1
    #[inline(always)]
    pub fn vault1_mint(
        &mut self,
        vault1_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault1_mint = Some(vault1_mint);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = CollectClmmFeesAndRewardsCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            fee_nft_owner: self
                .instruction
                .fee_nft_owner
                .expect("fee_nft_owner is not set"),

            fee_nft_account: self
                .instruction
                .fee_nft_account
                .expect("fee_nft_account is not set"),

            locked_position: self
                .instruction
                .locked_position
                .expect("locked_position is not set"),

            clmm_program: self
                .instruction
                .clmm_program
                .expect("clmm_program is not set"),

            locked_nft_account: self
                .instruction
                .locked_nft_account
                .expect("locked_nft_account is not set"),

            personal_position: self
                .instruction
                .personal_position
                .expect("personal_position is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            protocol_position: self
                .instruction
                .protocol_position
                .expect("protocol_position is not set"),

            token0_vault: self
                .instruction
                .token0_vault
                .expect("token0_vault is not set"),

            token1_vault: self
                .instruction
                .token1_vault
                .expect("token1_vault is not set"),

            tick_array_lower: self
                .instruction
                .tick_array_lower
                .expect("tick_array_lower is not set"),

            tick_array_upper: self
                .instruction
                .tick_array_upper
                .expect("tick_array_upper is not set"),

            recipient_token0_account: self
                .instruction
                .recipient_token0_account
                .expect("recipient_token0_account is not set"),

            recipient_token1_account: self
                .instruction
                .recipient_token1_account
                .expect("recipient_token1_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_program2022: self
                .instruction
                .token_program2022
                .expect("token_program2022 is not set"),

            memo_program: self
                .instruction
                .memo_program
                .expect("memo_program is not set"),

            vault0_mint: self
                .instruction
                .vault0_mint
                .expect("vault0_mint is not set"),

            vault1_mint: self
                .instruction
                .vault1_mint
                .expect("vault1_mint is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CollectClmmFeesAndRewardsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_nft_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    locked_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clmm_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    locked_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    personal_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token0_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token1_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tick_array_lower: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tick_array_upper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    recipient_token0_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    recipient_token1_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program2022: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    memo_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault0_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault1_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
