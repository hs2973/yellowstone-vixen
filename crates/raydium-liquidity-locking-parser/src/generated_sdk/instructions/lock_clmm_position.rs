//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct LockClmmPosition {
    pub authority: solana_program::pubkey::Pubkey,
    /// Pay to create account lamports
    pub payer: solana_program::pubkey::Pubkey,
    /// The position NFT owner
    pub position_nft_owner: solana_program::pubkey::Pubkey,

    pub fee_nft_owner: solana_program::pubkey::Pubkey,
    /// The token account for the tokenized position
    pub position_nft_account: solana_program::pubkey::Pubkey,
    /// Lock personal position associated with position_nft_account's mint
    pub personal_position: solana_program::pubkey::Pubkey,
    /// Position NFT mint to create a ATA `locked_nft_account` belongs to program
    pub position_nft_mint: solana_program::pubkey::Pubkey,
    /// Program's token account where `position_nft_account` will transfer to
    pub locked_nft_account: solana_program::pubkey::Pubkey,
    /// Store the locked information of the personal position
    pub locked_position: solana_program::pubkey::Pubkey,
    /// Create a unique fee nft mint
    pub fee_nft_mint: solana_program::pubkey::Pubkey,
    /// Token account where fee nft will be minted to
    pub fee_nft_account: solana_program::pubkey::Pubkey,
    /// To store metaplex metadata
    pub metadata_account: solana_program::pubkey::Pubkey,
    /// Program to create NFT metadata account
    pub metadata_program: solana_program::pubkey::Pubkey,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: solana_program::pubkey::Pubkey,
    /// Sysvar for token mint and ATA creation
    pub rent: solana_program::pubkey::Pubkey,
    /// Token program fee NFT mint/account belongs to
    pub fee_nft_token_program: solana_program::pubkey::Pubkey,
    /// Token program position NFT mint/account belongs to
    pub locked_nft_token_program: solana_program::pubkey::Pubkey,
    /// Program to create new account
    pub system_program: solana_program::pubkey::Pubkey,
}

impl LockClmmPosition {
    pub fn instruction(
        &self,
        args: LockClmmPositionInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: LockClmmPositionInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.position_nft_owner,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_nft_owner,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.position_nft_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.personal_position,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.position_nft_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.locked_nft_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.locked_position,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_nft_mint,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_nft_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_nft_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.locked_nft_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&LockClmmPositionInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LIQUIDITY_LOCKING_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LockClmmPositionInstructionData {
    discriminator: [u8; 8],
}

impl LockClmmPositionInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [188, 37, 179, 131, 82, 150, 84, 73],
        }
    }
}

impl Default for LockClmmPositionInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LockClmmPositionInstructionArgs {
    pub with_metadata: bool,
}

/// Instruction builder for `LockClmmPosition`.
///
/// ### Accounts:
///
///   0. `[]` authority
///   1. `[writable, signer]` payer
///   2. `[signer]` position_nft_owner
///   3. `[]` fee_nft_owner
///   4. `[writable]` position_nft_account
///   5. `[]` personal_position
///   6. `[]` position_nft_mint
///   7. `[writable]` locked_nft_account
///   8. `[writable]` locked_position
///   9. `[writable, signer]` fee_nft_mint
///   10. `[writable]` fee_nft_account
///   11. `[writable]` metadata_account
///   12. `[]` metadata_program
///   13. `[]` associated_token_program
///   14. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   15. `[]` fee_nft_token_program
///   16. `[]` locked_nft_token_program
///   17. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct LockClmmPositionBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    position_nft_owner: Option<solana_program::pubkey::Pubkey>,
    fee_nft_owner: Option<solana_program::pubkey::Pubkey>,
    position_nft_account: Option<solana_program::pubkey::Pubkey>,
    personal_position: Option<solana_program::pubkey::Pubkey>,
    position_nft_mint: Option<solana_program::pubkey::Pubkey>,
    locked_nft_account: Option<solana_program::pubkey::Pubkey>,
    locked_position: Option<solana_program::pubkey::Pubkey>,
    fee_nft_mint: Option<solana_program::pubkey::Pubkey>,
    fee_nft_account: Option<solana_program::pubkey::Pubkey>,
    metadata_account: Option<solana_program::pubkey::Pubkey>,
    metadata_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    fee_nft_token_program: Option<solana_program::pubkey::Pubkey>,
    locked_nft_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    with_metadata: Option<bool>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl LockClmmPositionBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Pay to create account lamports
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    /// The position NFT owner
    #[inline(always)]
    pub fn position_nft_owner(
        &mut self,
        position_nft_owner: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.position_nft_owner = Some(position_nft_owner);
        self
    }

    #[inline(always)]
    pub fn fee_nft_owner(&mut self, fee_nft_owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_nft_owner = Some(fee_nft_owner);
        self
    }

    /// The token account for the tokenized position
    #[inline(always)]
    pub fn position_nft_account(
        &mut self,
        position_nft_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.position_nft_account = Some(position_nft_account);
        self
    }

    /// Lock personal position associated with position_nft_account's mint
    #[inline(always)]
    pub fn personal_position(
        &mut self,
        personal_position: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.personal_position = Some(personal_position);
        self
    }

    /// Position NFT mint to create a ATA `locked_nft_account` belongs to program
    #[inline(always)]
    pub fn position_nft_mint(
        &mut self,
        position_nft_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.position_nft_mint = Some(position_nft_mint);
        self
    }

    /// Program's token account where `position_nft_account` will transfer to
    #[inline(always)]
    pub fn locked_nft_account(
        &mut self,
        locked_nft_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.locked_nft_account = Some(locked_nft_account);
        self
    }

    /// Store the locked information of the personal position
    #[inline(always)]
    pub fn locked_position(
        &mut self,
        locked_position: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.locked_position = Some(locked_position);
        self
    }

    /// Create a unique fee nft mint
    #[inline(always)]
    pub fn fee_nft_mint(&mut self, fee_nft_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_nft_mint = Some(fee_nft_mint);
        self
    }

    /// Token account where fee nft will be minted to
    #[inline(always)]
    pub fn fee_nft_account(
        &mut self,
        fee_nft_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_nft_account = Some(fee_nft_account);
        self
    }

    /// To store metaplex metadata
    #[inline(always)]
    pub fn metadata_account(
        &mut self,
        metadata_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_account = Some(metadata_account);
        self
    }

    /// Program to create NFT metadata account
    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_program = Some(metadata_program);
        self
    }

    /// Program to create an ATA for receiving fee NFT
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    /// Sysvar for token mint and ATA creation
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    /// Token program fee NFT mint/account belongs to
    #[inline(always)]
    pub fn fee_nft_token_program(
        &mut self,
        fee_nft_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_nft_token_program = Some(fee_nft_token_program);
        self
    }

    /// Token program position NFT mint/account belongs to
    #[inline(always)]
    pub fn locked_nft_token_program(
        &mut self,
        locked_nft_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.locked_nft_token_program = Some(locked_nft_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// Program to create new account
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn with_metadata(&mut self, with_metadata: bool) -> &mut Self {
        self.with_metadata = Some(with_metadata);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = LockClmmPosition {
            authority: self.authority.expect("authority is not set"),
            payer: self.payer.expect("payer is not set"),
            position_nft_owner: self
                .position_nft_owner
                .expect("position_nft_owner is not set"),
            fee_nft_owner: self.fee_nft_owner.expect("fee_nft_owner is not set"),
            position_nft_account: self
                .position_nft_account
                .expect("position_nft_account is not set"),
            personal_position: self
                .personal_position
                .expect("personal_position is not set"),
            position_nft_mint: self
                .position_nft_mint
                .expect("position_nft_mint is not set"),
            locked_nft_account: self
                .locked_nft_account
                .expect("locked_nft_account is not set"),
            locked_position: self.locked_position.expect("locked_position is not set"),
            fee_nft_mint: self.fee_nft_mint.expect("fee_nft_mint is not set"),
            fee_nft_account: self.fee_nft_account.expect("fee_nft_account is not set"),
            metadata_account: self.metadata_account.expect("metadata_account is not set"),
            metadata_program: self.metadata_program.expect("metadata_program is not set"),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            fee_nft_token_program: self
                .fee_nft_token_program
                .expect("fee_nft_token_program is not set"),
            locked_nft_token_program: self
                .locked_nft_token_program
                .expect("locked_nft_token_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = LockClmmPositionInstructionArgs {
            with_metadata: self
                .with_metadata
                .clone()
                .expect("with_metadata is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `lock_clmm_position` CPI accounts.
pub struct LockClmmPositionCpiAccounts<'a, 'b> {
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Pay to create account lamports
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The position NFT owner
    pub position_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token account for the tokenized position
    pub position_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Lock personal position associated with position_nft_account's mint
    pub personal_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// Position NFT mint to create a ATA `locked_nft_account` belongs to program
    pub position_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program's token account where `position_nft_account` will transfer to
    pub locked_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Store the locked information of the personal position
    pub locked_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// Create a unique fee nft mint
    pub fee_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account where fee nft will be minted to
    pub fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// To store metaplex metadata
    pub metadata_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create NFT metadata account
    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Sysvar for token mint and ATA creation
    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program fee NFT mint/account belongs to
    pub fee_nft_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program position NFT mint/account belongs to
    pub locked_nft_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create new account
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `lock_clmm_position` CPI instruction.
pub struct LockClmmPositionCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Pay to create account lamports
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The position NFT owner
    pub position_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token account for the tokenized position
    pub position_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Lock personal position associated with position_nft_account's mint
    pub personal_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// Position NFT mint to create a ATA `locked_nft_account` belongs to program
    pub position_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program's token account where `position_nft_account` will transfer to
    pub locked_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Store the locked information of the personal position
    pub locked_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// Create a unique fee nft mint
    pub fee_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account where fee nft will be minted to
    pub fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// To store metaplex metadata
    pub metadata_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create NFT metadata account
    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Sysvar for token mint and ATA creation
    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program fee NFT mint/account belongs to
    pub fee_nft_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program position NFT mint/account belongs to
    pub locked_nft_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create new account
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: LockClmmPositionInstructionArgs,
}

impl<'a, 'b> LockClmmPositionCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: LockClmmPositionCpiAccounts<'a, 'b>,
        args: LockClmmPositionInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            payer: accounts.payer,
            position_nft_owner: accounts.position_nft_owner,
            fee_nft_owner: accounts.fee_nft_owner,
            position_nft_account: accounts.position_nft_account,
            personal_position: accounts.personal_position,
            position_nft_mint: accounts.position_nft_mint,
            locked_nft_account: accounts.locked_nft_account,
            locked_position: accounts.locked_position,
            fee_nft_mint: accounts.fee_nft_mint,
            fee_nft_account: accounts.fee_nft_account,
            metadata_account: accounts.metadata_account,
            metadata_program: accounts.metadata_program,
            associated_token_program: accounts.associated_token_program,
            rent: accounts.rent,
            fee_nft_token_program: accounts.fee_nft_token_program,
            locked_nft_token_program: accounts.locked_nft_token_program,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.position_nft_owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_nft_owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position_nft_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.personal_position.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.position_nft_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.locked_nft_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.locked_position.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_nft_mint.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_nft_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_nft_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.locked_nft_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&LockClmmPositionInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LIQUIDITY_LOCKING_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(19 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.position_nft_owner.clone());
        account_infos.push(self.fee_nft_owner.clone());
        account_infos.push(self.position_nft_account.clone());
        account_infos.push(self.personal_position.clone());
        account_infos.push(self.position_nft_mint.clone());
        account_infos.push(self.locked_nft_account.clone());
        account_infos.push(self.locked_position.clone());
        account_infos.push(self.fee_nft_mint.clone());
        account_infos.push(self.fee_nft_account.clone());
        account_infos.push(self.metadata_account.clone());
        account_infos.push(self.metadata_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.fee_nft_token_program.clone());
        account_infos.push(self.locked_nft_token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `LockClmmPosition` via CPI.
///
/// ### Accounts:
///
///   0. `[]` authority
///   1. `[writable, signer]` payer
///   2. `[signer]` position_nft_owner
///   3. `[]` fee_nft_owner
///   4. `[writable]` position_nft_account
///   5. `[]` personal_position
///   6. `[]` position_nft_mint
///   7. `[writable]` locked_nft_account
///   8. `[writable]` locked_position
///   9. `[writable, signer]` fee_nft_mint
///   10. `[writable]` fee_nft_account
///   11. `[writable]` metadata_account
///   12. `[]` metadata_program
///   13. `[]` associated_token_program
///   14. `[]` rent
///   15. `[]` fee_nft_token_program
///   16. `[]` locked_nft_token_program
///   17. `[]` system_program
#[derive(Clone, Debug)]
pub struct LockClmmPositionCpiBuilder<'a, 'b> {
    instruction: Box<LockClmmPositionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LockClmmPositionCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(LockClmmPositionCpiBuilderInstruction {
            __program: program,
            authority: None,
            payer: None,
            position_nft_owner: None,
            fee_nft_owner: None,
            position_nft_account: None,
            personal_position: None,
            position_nft_mint: None,
            locked_nft_account: None,
            locked_position: None,
            fee_nft_mint: None,
            fee_nft_account: None,
            metadata_account: None,
            metadata_program: None,
            associated_token_program: None,
            rent: None,
            fee_nft_token_program: None,
            locked_nft_token_program: None,
            system_program: None,
            with_metadata: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Pay to create account lamports
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    /// The position NFT owner
    #[inline(always)]
    pub fn position_nft_owner(
        &mut self,
        position_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_nft_owner = Some(position_nft_owner);
        self
    }

    #[inline(always)]
    pub fn fee_nft_owner(
        &mut self,
        fee_nft_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_nft_owner = Some(fee_nft_owner);
        self
    }

    /// The token account for the tokenized position
    #[inline(always)]
    pub fn position_nft_account(
        &mut self,
        position_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_nft_account = Some(position_nft_account);
        self
    }

    /// Lock personal position associated with position_nft_account's mint
    #[inline(always)]
    pub fn personal_position(
        &mut self,
        personal_position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.personal_position = Some(personal_position);
        self
    }

    /// Position NFT mint to create a ATA `locked_nft_account` belongs to program
    #[inline(always)]
    pub fn position_nft_mint(
        &mut self,
        position_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_nft_mint = Some(position_nft_mint);
        self
    }

    /// Program's token account where `position_nft_account` will transfer to
    #[inline(always)]
    pub fn locked_nft_account(
        &mut self,
        locked_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.locked_nft_account = Some(locked_nft_account);
        self
    }

    /// Store the locked information of the personal position
    #[inline(always)]
    pub fn locked_position(
        &mut self,
        locked_position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.locked_position = Some(locked_position);
        self
    }

    /// Create a unique fee nft mint
    #[inline(always)]
    pub fn fee_nft_mint(
        &mut self,
        fee_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_nft_mint = Some(fee_nft_mint);
        self
    }

    /// Token account where fee nft will be minted to
    #[inline(always)]
    pub fn fee_nft_account(
        &mut self,
        fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_nft_account = Some(fee_nft_account);
        self
    }

    /// To store metaplex metadata
    #[inline(always)]
    pub fn metadata_account(
        &mut self,
        metadata_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_account = Some(metadata_account);
        self
    }

    /// Program to create NFT metadata account
    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_program = Some(metadata_program);
        self
    }

    /// Program to create an ATA for receiving fee NFT
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// Sysvar for token mint and ATA creation
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    /// Token program fee NFT mint/account belongs to
    #[inline(always)]
    pub fn fee_nft_token_program(
        &mut self,
        fee_nft_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_nft_token_program = Some(fee_nft_token_program);
        self
    }

    /// Token program position NFT mint/account belongs to
    #[inline(always)]
    pub fn locked_nft_token_program(
        &mut self,
        locked_nft_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.locked_nft_token_program = Some(locked_nft_token_program);
        self
    }

    /// Program to create new account
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn with_metadata(&mut self, with_metadata: bool) -> &mut Self {
        self.instruction.with_metadata = Some(with_metadata);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = LockClmmPositionInstructionArgs {
            with_metadata: self
                .instruction
                .with_metadata
                .clone()
                .expect("with_metadata is not set"),
        };
        let instruction = LockClmmPositionCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            position_nft_owner: self
                .instruction
                .position_nft_owner
                .expect("position_nft_owner is not set"),

            fee_nft_owner: self
                .instruction
                .fee_nft_owner
                .expect("fee_nft_owner is not set"),

            position_nft_account: self
                .instruction
                .position_nft_account
                .expect("position_nft_account is not set"),

            personal_position: self
                .instruction
                .personal_position
                .expect("personal_position is not set"),

            position_nft_mint: self
                .instruction
                .position_nft_mint
                .expect("position_nft_mint is not set"),

            locked_nft_account: self
                .instruction
                .locked_nft_account
                .expect("locked_nft_account is not set"),

            locked_position: self
                .instruction
                .locked_position
                .expect("locked_position is not set"),

            fee_nft_mint: self
                .instruction
                .fee_nft_mint
                .expect("fee_nft_mint is not set"),

            fee_nft_account: self
                .instruction
                .fee_nft_account
                .expect("fee_nft_account is not set"),

            metadata_account: self
                .instruction
                .metadata_account
                .expect("metadata_account is not set"),

            metadata_program: self
                .instruction
                .metadata_program
                .expect("metadata_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            fee_nft_token_program: self
                .instruction
                .fee_nft_token_program
                .expect("fee_nft_token_program is not set"),

            locked_nft_token_program: self
                .instruction
                .locked_nft_token_program
                .expect("locked_nft_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct LockClmmPositionCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position_nft_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_nft_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    personal_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position_nft_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    locked_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    locked_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_nft_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_nft_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    locked_nft_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    with_metadata: Option<bool>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
