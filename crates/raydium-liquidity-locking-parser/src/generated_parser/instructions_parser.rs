//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        CollectClmmFeesAndRewards as CollectClmmFeesAndRewardsIxAccounts,
        CollectCpFees as CollectCpFeesIxAccounts,
        CollectCpFeesInstructionArgs as CollectCpFeesIxData,
        LockClmmPosition as LockClmmPositionIxAccounts,
        LockClmmPositionInstructionArgs as LockClmmPositionIxData,
        LockCpLiquidity as LockCpLiquidityIxAccounts,
        LockCpLiquidityInstructionArgs as LockCpLiquidityIxData,
    },
    ID,
};

/// RaydiumLiquidityLocking Instructions
#[derive(Debug)]
pub enum RaydiumLiquidityLockingProgramIx {
    LockClmmPosition(LockClmmPositionIxAccounts, LockClmmPositionIxData),
    CollectClmmFeesAndRewards(CollectClmmFeesAndRewardsIxAccounts),
    LockCpLiquidity(LockCpLiquidityIxAccounts, LockCpLiquidityIxData),
    CollectCpFees(CollectCpFeesIxAccounts, CollectCpFeesIxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = RaydiumLiquidityLockingProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "RaydiumLiquidityLocking::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<RaydiumLiquidityLockingProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        match ix_discriminator {
            [188, 37, 179, 131, 82, 150, 84, 73] => {
                check_min_accounts_req(accounts_len, 18)?;
                let ix_accounts = LockClmmPositionIxAccounts {
                    authority: ix.accounts[0].0.into(),
                    payer: ix.accounts[1].0.into(),
                    position_nft_owner: ix.accounts[2].0.into(),
                    fee_nft_owner: ix.accounts[3].0.into(),
                    position_nft_account: ix.accounts[4].0.into(),
                    personal_position: ix.accounts[5].0.into(),
                    position_nft_mint: ix.accounts[6].0.into(),
                    locked_nft_account: ix.accounts[7].0.into(),
                    locked_position: ix.accounts[8].0.into(),
                    fee_nft_mint: ix.accounts[9].0.into(),
                    fee_nft_account: ix.accounts[10].0.into(),
                    metadata_account: ix.accounts[11].0.into(),
                    metadata_program: ix.accounts[12].0.into(),
                    associated_token_program: ix.accounts[13].0.into(),
                    rent: ix.accounts[14].0.into(),
                    fee_nft_token_program: ix.accounts[15].0.into(),
                    locked_nft_token_program: ix.accounts[16].0.into(),
                    system_program: ix.accounts[17].0.into(),
                };
                let de_ix_data: LockClmmPositionIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLiquidityLockingProgramIx::LockClmmPosition(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [16, 72, 250, 198, 14, 162, 212, 19] => {
                check_min_accounts_req(accounts_len, 20)?;
                let ix_accounts = CollectClmmFeesAndRewardsIxAccounts {
                    authority: ix.accounts[0].0.into(),
                    fee_nft_owner: ix.accounts[1].0.into(),
                    fee_nft_account: ix.accounts[2].0.into(),
                    locked_position: ix.accounts[3].0.into(),
                    clmm_program: ix.accounts[4].0.into(),
                    locked_nft_account: ix.accounts[5].0.into(),
                    personal_position: ix.accounts[6].0.into(),
                    pool_state: ix.accounts[7].0.into(),
                    protocol_position: ix.accounts[8].0.into(),
                    token0_vault: ix.accounts[9].0.into(),
                    token1_vault: ix.accounts[10].0.into(),
                    tick_array_lower: ix.accounts[11].0.into(),
                    tick_array_upper: ix.accounts[12].0.into(),
                    recipient_token0_account: ix.accounts[13].0.into(),
                    recipient_token1_account: ix.accounts[14].0.into(),
                    token_program: ix.accounts[15].0.into(),
                    token_program2022: ix.accounts[16].0.into(),
                    memo_program: ix.accounts[17].0.into(),
                    vault0_mint: ix.accounts[18].0.into(),
                    vault1_mint: ix.accounts[19].0.into(),
                };
                Ok(RaydiumLiquidityLockingProgramIx::CollectClmmFeesAndRewards(
                    ix_accounts,
                ))
            },
            [216, 157, 29, 78, 38, 51, 31, 26] => {
                check_min_accounts_req(accounts_len, 19)?;
                let ix_accounts = LockCpLiquidityIxAccounts {
                    authority: ix.accounts[0].0.into(),
                    payer: ix.accounts[1].0.into(),
                    liquidity_owner: ix.accounts[2].0.into(),
                    fee_nft_owner: ix.accounts[3].0.into(),
                    fee_nft_mint: ix.accounts[4].0.into(),
                    fee_nft_account: ix.accounts[5].0.into(),
                    pool_state: ix.accounts[6].0.into(),
                    locked_liquidity: ix.accounts[7].0.into(),
                    lp_mint: ix.accounts[8].0.into(),
                    liquidity_owner_lp: ix.accounts[9].0.into(),
                    locked_lp_vault: ix.accounts[10].0.into(),
                    token0_vault: ix.accounts[11].0.into(),
                    token1_vault: ix.accounts[12].0.into(),
                    metadata_account: ix.accounts[13].0.into(),
                    rent: ix.accounts[14].0.into(),
                    system_program: ix.accounts[15].0.into(),
                    token_program: ix.accounts[16].0.into(),
                    associated_token_program: ix.accounts[17].0.into(),
                    metadata_program: ix.accounts[18].0.into(),
                };
                let de_ix_data: LockCpLiquidityIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLiquidityLockingProgramIx::LockCpLiquidity(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [8, 30, 51, 199, 209, 184, 247, 133] => {
                check_min_accounts_req(accounts_len, 18)?;
                let ix_accounts = CollectCpFeesIxAccounts {
                    authority: ix.accounts[0].0.into(),
                    fee_nft_owner: ix.accounts[1].0.into(),
                    fee_nft_account: ix.accounts[2].0.into(),
                    locked_liquidity: ix.accounts[3].0.into(),
                    cp_swap_program: ix.accounts[4].0.into(),
                    cp_authority: ix.accounts[5].0.into(),
                    pool_state: ix.accounts[6].0.into(),
                    lp_mint: ix.accounts[7].0.into(),
                    recipient_token0_account: ix.accounts[8].0.into(),
                    recipient_token1_account: ix.accounts[9].0.into(),
                    token0_vault: ix.accounts[10].0.into(),
                    token1_vault: ix.accounts[11].0.into(),
                    vault0_mint: ix.accounts[12].0.into(),
                    vault1_mint: ix.accounts[13].0.into(),
                    locked_lp_vault: ix.accounts[14].0.into(),
                    token_program: ix.accounts[15].0.into(),
                    token_program2022: ix.accounts[16].0.into(),
                    memo_program: ix.accounts[17].0.into(),
                };
                let de_ix_data: CollectCpFeesIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLiquidityLockingProgramIx::CollectCpFees(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
