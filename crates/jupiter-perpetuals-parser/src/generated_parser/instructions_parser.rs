//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        AddCustody as AddCustodyIxAccounts, AddCustodyInstructionArgs as AddCustodyIxData,
        AddLiquidity2 as AddLiquidity2IxAccounts,
        AddLiquidity2InstructionArgs as AddLiquidity2IxData, AddPool as AddPoolIxAccounts,
        AddPoolInstructionArgs as AddPoolIxData,
        ClosePositionRequest as ClosePositionRequestIxAccounts,
        CreateDecreasePositionMarketRequest as CreateDecreasePositionMarketRequestIxAccounts,
        CreateDecreasePositionMarketRequestInstructionArgs as CreateDecreasePositionMarketRequestIxData,
        CreateDecreasePositionRequest2 as CreateDecreasePositionRequest2IxAccounts,
        CreateDecreasePositionRequest2InstructionArgs as CreateDecreasePositionRequest2IxData,
        CreateIncreasePositionMarketRequest as CreateIncreasePositionMarketRequestIxAccounts,
        CreateIncreasePositionMarketRequestInstructionArgs as CreateIncreasePositionMarketRequestIxData,
        CreateTokenLedger as CreateTokenLedgerIxAccounts,
        CreateTokenMetadata as CreateTokenMetadataIxAccounts,
        CreateTokenMetadataInstructionArgs as CreateTokenMetadataIxData,
        DecreasePosition4 as DecreasePosition4IxAccounts,
        DecreasePositionWithInternalSwap as DecreasePositionWithInternalSwapIxAccounts,
        GetAddLiquidityAmountAndFee2 as GetAddLiquidityAmountAndFee2IxAccounts,
        GetAddLiquidityAmountAndFee2InstructionArgs as GetAddLiquidityAmountAndFee2IxData,
        GetAssetsUnderManagement2 as GetAssetsUnderManagement2IxAccounts,
        GetAssetsUnderManagement2InstructionArgs as GetAssetsUnderManagement2IxData,
        GetRemoveLiquidityAmountAndFee2 as GetRemoveLiquidityAmountAndFee2IxAccounts,
        GetRemoveLiquidityAmountAndFee2InstructionArgs as GetRemoveLiquidityAmountAndFee2IxData,
        IncreasePosition4 as IncreasePosition4IxAccounts,
        IncreasePositionPreSwap as IncreasePositionPreSwapIxAccounts,
        IncreasePositionWithInternalSwap as IncreasePositionWithInternalSwapIxAccounts,
        Init as InitIxAccounts, InitInstructionArgs as InitIxData,
        InstantCreateLimitOrder as InstantCreateLimitOrderIxAccounts,
        InstantCreateLimitOrderInstructionArgs as InstantCreateLimitOrderIxData,
        InstantCreateTpsl as InstantCreateTpslIxAccounts,
        InstantCreateTpslInstructionArgs as InstantCreateTpslIxData,
        InstantDecreasePosition as InstantDecreasePositionIxAccounts,
        InstantDecreasePositionInstructionArgs as InstantDecreasePositionIxData,
        InstantIncreasePosition as InstantIncreasePositionIxAccounts,
        InstantIncreasePositionInstructionArgs as InstantIncreasePositionIxData,
        InstantUpdateLimitOrder as InstantUpdateLimitOrderIxAccounts,
        InstantUpdateLimitOrderInstructionArgs as InstantUpdateLimitOrderIxData,
        InstantUpdateTpsl as InstantUpdateTpslIxAccounts,
        InstantUpdateTpslInstructionArgs as InstantUpdateTpslIxData,
        LiquidateFullPosition4 as LiquidateFullPosition4IxAccounts,
        OperatorSetCustodyConfig as OperatorSetCustodyConfigIxAccounts,
        OperatorSetCustodyConfigInstructionArgs as OperatorSetCustodyConfigIxData,
        OperatorSetPoolConfig as OperatorSetPoolConfigIxAccounts,
        OperatorSetPoolConfigInstructionArgs as OperatorSetPoolConfigIxData,
        ReallocCustody as ReallocCustodyIxAccounts, ReallocPool as ReallocPoolIxAccounts,
        RefreshAssetsUnderManagement as RefreshAssetsUnderManagementIxAccounts,
        RemoveLiquidity2 as RemoveLiquidity2IxAccounts,
        RemoveLiquidity2InstructionArgs as RemoveLiquidity2IxData,
        SetCustodyConfig as SetCustodyConfigIxAccounts,
        SetCustodyConfigInstructionArgs as SetCustodyConfigIxData,
        SetPerpetualsConfig as SetPerpetualsConfigIxAccounts,
        SetPerpetualsConfigInstructionArgs as SetPerpetualsConfigIxData,
        SetPoolConfig as SetPoolConfigIxAccounts,
        SetPoolConfigInstructionArgs as SetPoolConfigIxData, SetTestTime as SetTestTimeIxAccounts,
        SetTestTimeInstructionArgs as SetTestTimeIxData,
        SetTokenLedger as SetTokenLedgerIxAccounts, Swap2 as Swap2IxAccounts,
        Swap2InstructionArgs as Swap2IxData, TestInit as TestInitIxAccounts,
        TestInitInstructionArgs as TestInitIxData, TransferAdmin as TransferAdminIxAccounts,
        UpdateDecreasePositionRequest2 as UpdateDecreasePositionRequest2IxAccounts,
        UpdateDecreasePositionRequest2InstructionArgs as UpdateDecreasePositionRequest2IxData,
        WithdrawFees2 as WithdrawFees2IxAccounts,
    },
    ID,
};

/// Perpetuals Instructions
#[derive(Debug)]
pub enum PerpetualsProgramIx {
    Init(InitIxAccounts, InitIxData),
    AddPool(AddPoolIxAccounts, AddPoolIxData),
    AddCustody(AddCustodyIxAccounts, AddCustodyIxData),
    SetCustodyConfig(SetCustodyConfigIxAccounts, SetCustodyConfigIxData),
    SetPoolConfig(SetPoolConfigIxAccounts, SetPoolConfigIxData),
    SetPerpetualsConfig(SetPerpetualsConfigIxAccounts, SetPerpetualsConfigIxData),
    TransferAdmin(TransferAdminIxAccounts),
    WithdrawFees2(WithdrawFees2IxAccounts),
    CreateTokenMetadata(CreateTokenMetadataIxAccounts, CreateTokenMetadataIxData),
    CreateTokenLedger(CreateTokenLedgerIxAccounts),
    ReallocCustody(ReallocCustodyIxAccounts),
    ReallocPool(ReallocPoolIxAccounts),
    OperatorSetCustodyConfig(
        OperatorSetCustodyConfigIxAccounts,
        OperatorSetCustodyConfigIxData,
    ),
    OperatorSetPoolConfig(OperatorSetPoolConfigIxAccounts, OperatorSetPoolConfigIxData),
    TestInit(TestInitIxAccounts, TestInitIxData),
    SetTestTime(SetTestTimeIxAccounts, SetTestTimeIxData),
    SetTokenLedger(SetTokenLedgerIxAccounts),
    Swap2(Swap2IxAccounts, Swap2IxData),
    AddLiquidity2(AddLiquidity2IxAccounts, AddLiquidity2IxData),
    RemoveLiquidity2(RemoveLiquidity2IxAccounts, RemoveLiquidity2IxData),
    CreateIncreasePositionMarketRequest(
        CreateIncreasePositionMarketRequestIxAccounts,
        CreateIncreasePositionMarketRequestIxData,
    ),
    CreateDecreasePositionRequest2(
        CreateDecreasePositionRequest2IxAccounts,
        CreateDecreasePositionRequest2IxData,
    ),
    CreateDecreasePositionMarketRequest(
        CreateDecreasePositionMarketRequestIxAccounts,
        CreateDecreasePositionMarketRequestIxData,
    ),
    UpdateDecreasePositionRequest2(
        UpdateDecreasePositionRequest2IxAccounts,
        UpdateDecreasePositionRequest2IxData,
    ),
    ClosePositionRequest(ClosePositionRequestIxAccounts),
    IncreasePosition4(IncreasePosition4IxAccounts),
    IncreasePositionPreSwap(IncreasePositionPreSwapIxAccounts),
    IncreasePositionWithInternalSwap(IncreasePositionWithInternalSwapIxAccounts),
    DecreasePosition4(DecreasePosition4IxAccounts),
    DecreasePositionWithInternalSwap(DecreasePositionWithInternalSwapIxAccounts),
    LiquidateFullPosition4(LiquidateFullPosition4IxAccounts),
    RefreshAssetsUnderManagement(RefreshAssetsUnderManagementIxAccounts),
    InstantCreateTpsl(InstantCreateTpslIxAccounts, InstantCreateTpslIxData),
    InstantCreateLimitOrder(
        InstantCreateLimitOrderIxAccounts,
        InstantCreateLimitOrderIxData,
    ),
    InstantIncreasePosition(
        InstantIncreasePositionIxAccounts,
        InstantIncreasePositionIxData,
    ),
    InstantDecreasePosition(
        InstantDecreasePositionIxAccounts,
        InstantDecreasePositionIxData,
    ),
    InstantUpdateLimitOrder(
        InstantUpdateLimitOrderIxAccounts,
        InstantUpdateLimitOrderIxData,
    ),
    InstantUpdateTpsl(InstantUpdateTpslIxAccounts, InstantUpdateTpslIxData),
    GetAddLiquidityAmountAndFee2(
        GetAddLiquidityAmountAndFee2IxAccounts,
        GetAddLiquidityAmountAndFee2IxData,
    ),
    GetRemoveLiquidityAmountAndFee2(
        GetRemoveLiquidityAmountAndFee2IxAccounts,
        GetRemoveLiquidityAmountAndFee2IxData,
    ),
    GetAssetsUnderManagement2(
        GetAssetsUnderManagement2IxAccounts,
        GetAssetsUnderManagement2IxData,
    ),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = PerpetualsProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "Perpetuals::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<PerpetualsProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        match ix_discriminator {
            [220, 59, 207, 236, 108, 250, 47, 100] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = InitIxAccounts {
                    upgrade_authority: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    transfer_authority: ix.accounts[2].0.into(),
                    perpetuals: ix.accounts[3].0.into(),
                    perpetuals_program: ix.accounts[4].0.into(),
                    perpetuals_program_data: ix.accounts[5].0.into(),
                    system_program: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                };
                let de_ix_data: InitIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::Init(ix_accounts, de_ix_data))
            },
            [115, 230, 212, 211, 175, 49, 39, 169] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = AddPoolIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    transfer_authority: ix.accounts[1].0.into(),
                    perpetuals: ix.accounts[2].0.into(),
                    pool: ix.accounts[3].0.into(),
                    lp_token_mint: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    rent: ix.accounts[7].0.into(),
                };
                let de_ix_data: AddPoolIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::AddPool(ix_accounts, de_ix_data))
            },
            [247, 254, 126, 17, 26, 6, 215, 117] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = AddCustodyIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    transfer_authority: ix.accounts[1].0.into(),
                    perpetuals: ix.accounts[2].0.into(),
                    pool: ix.accounts[3].0.into(),
                    custody: ix.accounts[4].0.into(),
                    custody_token_account: ix.accounts[5].0.into(),
                    custody_token_mint: ix.accounts[6].0.into(),
                    system_program: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    rent: ix.accounts[9].0.into(),
                };
                let de_ix_data: AddCustodyIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::AddCustody(ix_accounts, de_ix_data))
            },
            [133, 97, 130, 143, 215, 229, 36, 176] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = SetCustodyConfigIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    perpetuals: ix.accounts[1].0.into(),
                    custody: ix.accounts[2].0.into(),
                };
                let de_ix_data: SetCustodyConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::SetCustodyConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [216, 87, 65, 125, 113, 110, 185, 120] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = SetPoolConfigIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    perpetuals: ix.accounts[1].0.into(),
                    pool: ix.accounts[2].0.into(),
                };
                let de_ix_data: SetPoolConfigIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::SetPoolConfig(ix_accounts, de_ix_data))
            },
            [80, 72, 21, 191, 29, 121, 45, 111] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetPerpetualsConfigIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    perpetuals: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetPerpetualsConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::SetPerpetualsConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [42, 242, 66, 106, 228, 10, 111, 156] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = TransferAdminIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    new_admin: ix.accounts[1].0.into(),
                    perpetuals: ix.accounts[2].0.into(),
                };
                Ok(PerpetualsProgramIx::TransferAdmin(ix_accounts))
            },
            [252, 128, 143, 145, 225, 221, 159, 207] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = WithdrawFees2IxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    transfer_authority: ix.accounts[1].0.into(),
                    perpetuals: ix.accounts[2].0.into(),
                    pool: ix.accounts[3].0.into(),
                    custody: ix.accounts[4].0.into(),
                    custody_token_account: ix.accounts[5].0.into(),
                    custody_doves_price_account: ix.accounts[6].0.into(),
                    custody_pythnet_price_account: ix.accounts[7].0.into(),
                    receiving_token_account: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                };
                Ok(PerpetualsProgramIx::WithdrawFees2(ix_accounts))
            },
            [221, 80, 176, 37, 153, 188, 160, 68] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = CreateTokenMetadataIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    perpetuals: ix.accounts[1].0.into(),
                    pool: ix.accounts[2].0.into(),
                    transfer_authority: ix.accounts[3].0.into(),
                    metadata: ix.accounts[4].0.into(),
                    lp_token_mint: ix.accounts[5].0.into(),
                    token_metadata_program: ix.accounts[6].0.into(),
                    system_program: ix.accounts[7].0.into(),
                    rent: ix.accounts[8].0.into(),
                };
                let de_ix_data: CreateTokenMetadataIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::CreateTokenMetadata(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [232, 242, 197, 253, 240, 143, 129, 52] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = CreateTokenLedgerIxAccounts {
                    token_ledger: ix.accounts[0].0.into(),
                    payer: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                };
                Ok(PerpetualsProgramIx::CreateTokenLedger(ix_accounts))
            },
            [123, 58, 109, 139, 133, 7, 225, 200] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = ReallocCustodyIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    custody: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                };
                Ok(PerpetualsProgramIx::ReallocCustody(ix_accounts))
            },
            [114, 128, 37, 167, 71, 227, 40, 178] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = ReallocPoolIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    pool: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                };
                Ok(PerpetualsProgramIx::ReallocPool(ix_accounts))
            },
            [166, 137, 92, 204, 145, 224, 24, 218] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = OperatorSetCustodyConfigIxAccounts {
                    operator: ix.accounts[0].0.into(),
                    custody: ix.accounts[1].0.into(),
                };
                let de_ix_data: OperatorSetCustodyConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::OperatorSetCustodyConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [76, 201, 80, 18, 199, 92, 246, 105] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = OperatorSetPoolConfigIxAccounts {
                    operator: ix.accounts[0].0.into(),
                    pool: ix.accounts[1].0.into(),
                };
                let de_ix_data: OperatorSetPoolConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::OperatorSetPoolConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [48, 51, 92, 122, 81, 19, 112, 41] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = TestInitIxAccounts {
                    upgrade_authority: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    transfer_authority: ix.accounts[2].0.into(),
                    perpetuals: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                    token_program: ix.accounts[5].0.into(),
                };
                let de_ix_data: TestInitIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::TestInit(ix_accounts, de_ix_data))
            },
            [242, 231, 177, 251, 126, 145, 159, 104] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetTestTimeIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    perpetuals: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetTestTimeIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::SetTestTime(ix_accounts, de_ix_data))
            },
            [228, 85, 185, 112, 78, 79, 77, 2] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = SetTokenLedgerIxAccounts {
                    token_ledger: ix.accounts[0].0.into(),
                    token_account: ix.accounts[1].0.into(),
                    token_program: ix.accounts[2].0.into(),
                };
                Ok(PerpetualsProgramIx::SetTokenLedger(ix_accounts))
            },
            [65, 75, 63, 76, 235, 91, 91, 136] => {
                check_min_accounts_req(accounts_len, 17)?;
                let ix_accounts = Swap2IxAccounts {
                    owner: ix.accounts[0].0.into(),
                    funding_account: ix.accounts[1].0.into(),
                    receiving_account: ix.accounts[2].0.into(),
                    transfer_authority: ix.accounts[3].0.into(),
                    perpetuals: ix.accounts[4].0.into(),
                    pool: ix.accounts[5].0.into(),
                    receiving_custody: ix.accounts[6].0.into(),
                    receiving_custody_doves_price_account: ix.accounts[7].0.into(),
                    receiving_custody_pythnet_price_account: ix.accounts[8].0.into(),
                    receiving_custody_token_account: ix.accounts[9].0.into(),
                    dispensing_custody: ix.accounts[10].0.into(),
                    dispensing_custody_doves_price_account: ix.accounts[11].0.into(),
                    dispensing_custody_pythnet_price_account: ix.accounts[12].0.into(),
                    dispensing_custody_token_account: ix.accounts[13].0.into(),
                    token_program: ix.accounts[14].0.into(),
                    event_authority: ix.accounts[15].0.into(),
                    program: ix.accounts[16].0.into(),
                };
                let de_ix_data: Swap2IxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::Swap2(ix_accounts, de_ix_data))
            },
            [228, 162, 78, 28, 70, 219, 116, 115] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = AddLiquidity2IxAccounts {
                    owner: ix.accounts[0].0.into(),
                    funding_account: ix.accounts[1].0.into(),
                    lp_token_account: ix.accounts[2].0.into(),
                    transfer_authority: ix.accounts[3].0.into(),
                    perpetuals: ix.accounts[4].0.into(),
                    pool: ix.accounts[5].0.into(),
                    custody: ix.accounts[6].0.into(),
                    custody_doves_price_account: ix.accounts[7].0.into(),
                    custody_pythnet_price_account: ix.accounts[8].0.into(),
                    custody_token_account: ix.accounts[9].0.into(),
                    lp_token_mint: ix.accounts[10].0.into(),
                    token_program: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: AddLiquidity2IxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::AddLiquidity2(ix_accounts, de_ix_data))
            },
            [230, 215, 82, 127, 241, 101, 227, 146] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = RemoveLiquidity2IxAccounts {
                    owner: ix.accounts[0].0.into(),
                    receiving_account: ix.accounts[1].0.into(),
                    lp_token_account: ix.accounts[2].0.into(),
                    transfer_authority: ix.accounts[3].0.into(),
                    perpetuals: ix.accounts[4].0.into(),
                    pool: ix.accounts[5].0.into(),
                    custody: ix.accounts[6].0.into(),
                    custody_doves_price_account: ix.accounts[7].0.into(),
                    custody_pythnet_price_account: ix.accounts[8].0.into(),
                    custody_token_account: ix.accounts[9].0.into(),
                    lp_token_mint: ix.accounts[10].0.into(),
                    token_program: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: RemoveLiquidity2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::RemoveLiquidity2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [144, 200, 249, 255, 108, 217, 249, 116] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = UpdateDecreasePositionRequest2IxAccounts {
                    owner: ix.accounts[0].0.into(),
                    perpetuals: ix.accounts[1].0.into(),
                    pool: ix.accounts[2].0.into(),
                    position: ix.accounts[3].0.into(),
                    position_request: ix.accounts[4].0.into(),
                    custody: ix.accounts[5].0.into(),
                    custody_doves_price_account: ix.accounts[6].0.into(),
                    custody_pythnet_price_account: ix.accounts[7].0.into(),
                };
                let de_ix_data: UpdateDecreasePositionRequest2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::UpdateDecreasePositionRequest2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [67, 147, 53, 23, 43, 57, 16, 67] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = IncreasePosition4IxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    perpetuals: ix.accounts[1].0.into(),
                    pool: ix.accounts[2].0.into(),
                    position_request: ix.accounts[3].0.into(),
                    position_request_ata: ix.accounts[4].0.into(),
                    position: ix.accounts[5].0.into(),
                    custody: ix.accounts[6].0.into(),
                    custody_doves_price_account: ix.accounts[7].0.into(),
                    custody_pythnet_price_account: ix.accounts[8].0.into(),
                    collateral_custody: ix.accounts[9].0.into(),
                    collateral_custody_doves_price_account: ix.accounts[10].0.into(),
                    collateral_custody_pythnet_price_account: ix.accounts[11].0.into(),
                    collateral_custody_token_account: ix.accounts[12].0.into(),
                    token_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                Ok(PerpetualsProgramIx::IncreasePosition4(ix_accounts))
            },
            [26, 136, 225, 217, 22, 21, 83, 20] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = IncreasePositionPreSwapIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    keeper_ata: ix.accounts[1].0.into(),
                    position_request: ix.accounts[2].0.into(),
                    position_request_ata: ix.accounts[3].0.into(),
                    position: ix.accounts[4].0.into(),
                    collateral_custody: ix.accounts[5].0.into(),
                    collateral_custody_token_account: ix.accounts[6].0.into(),
                    instruction: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    event_authority: ix.accounts[9].0.into(),
                    program: ix.accounts[10].0.into(),
                };
                Ok(PerpetualsProgramIx::IncreasePositionPreSwap(ix_accounts))
            },
            [114, 55, 106, 140, 199, 221, 32, 112] => {
                check_min_accounts_req(accounts_len, 20)?;
                let ix_accounts = IncreasePositionWithInternalSwapIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    perpetuals: ix.accounts[1].0.into(),
                    pool: ix.accounts[2].0.into(),
                    position_request: ix.accounts[3].0.into(),
                    position_request_ata: ix.accounts[4].0.into(),
                    position: ix.accounts[5].0.into(),
                    custody: ix.accounts[6].0.into(),
                    custody_doves_price_account: ix.accounts[7].0.into(),
                    custody_pythnet_price_account: ix.accounts[8].0.into(),
                    collateral_custody: ix.accounts[9].0.into(),
                    collateral_custody_doves_price_account: ix.accounts[10].0.into(),
                    collateral_custody_pythnet_price_account: ix.accounts[11].0.into(),
                    collateral_custody_token_account: ix.accounts[12].0.into(),
                    receiving_custody: ix.accounts[13].0.into(),
                    receiving_custody_doves_price_account: ix.accounts[14].0.into(),
                    receiving_custody_pythnet_price_account: ix.accounts[15].0.into(),
                    receiving_custody_token_account: ix.accounts[16].0.into(),
                    token_program: ix.accounts[17].0.into(),
                    event_authority: ix.accounts[18].0.into(),
                    program: ix.accounts[19].0.into(),
                };
                Ok(PerpetualsProgramIx::IncreasePositionWithInternalSwap(
                    ix_accounts,
                ))
            },
            [185, 161, 114, 175, 96, 148, 3, 170] => {
                check_min_accounts_req(accounts_len, 18)?;
                let ix_accounts = DecreasePosition4IxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    owner: ix.accounts[1].0.into(),
                    transfer_authority: ix.accounts[2].0.into(),
                    perpetuals: ix.accounts[3].0.into(),
                    pool: ix.accounts[4].0.into(),
                    position_request: ix.accounts[5].0.into(),
                    position_request_ata: ix.accounts[6].0.into(),
                    position: ix.accounts[7].0.into(),
                    custody: ix.accounts[8].0.into(),
                    custody_doves_price_account: ix.accounts[9].0.into(),
                    custody_pythnet_price_account: ix.accounts[10].0.into(),
                    collateral_custody: ix.accounts[11].0.into(),
                    collateral_custody_doves_price_account: ix.accounts[12].0.into(),
                    collateral_custody_pythnet_price_account: ix.accounts[13].0.into(),
                    collateral_custody_token_account: ix.accounts[14].0.into(),
                    token_program: ix.accounts[15].0.into(),
                    event_authority: ix.accounts[16].0.into(),
                    program: ix.accounts[17].0.into(),
                };
                Ok(PerpetualsProgramIx::DecreasePosition4(ix_accounts))
            },
            [131, 17, 153, 110, 119, 100, 97, 38] => {
                check_min_accounts_req(accounts_len, 22)?;
                let ix_accounts = DecreasePositionWithInternalSwapIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    owner: ix.accounts[1].0.into(),
                    transfer_authority: ix.accounts[2].0.into(),
                    perpetuals: ix.accounts[3].0.into(),
                    pool: ix.accounts[4].0.into(),
                    position_request: ix.accounts[5].0.into(),
                    position_request_ata: ix.accounts[6].0.into(),
                    position: ix.accounts[7].0.into(),
                    custody: ix.accounts[8].0.into(),
                    custody_doves_price_account: ix.accounts[9].0.into(),
                    custody_pythnet_price_account: ix.accounts[10].0.into(),
                    collateral_custody: ix.accounts[11].0.into(),
                    collateral_custody_doves_price_account: ix.accounts[12].0.into(),
                    collateral_custody_pythnet_price_account: ix.accounts[13].0.into(),
                    collateral_custody_token_account: ix.accounts[14].0.into(),
                    dispensing_custody: ix.accounts[15].0.into(),
                    dispensing_custody_doves_price_account: ix.accounts[16].0.into(),
                    dispensing_custody_pythnet_price_account: ix.accounts[17].0.into(),
                    dispensing_custody_token_account: ix.accounts[18].0.into(),
                    token_program: ix.accounts[19].0.into(),
                    event_authority: ix.accounts[20].0.into(),
                    program: ix.accounts[21].0.into(),
                };
                Ok(PerpetualsProgramIx::DecreasePositionWithInternalSwap(
                    ix_accounts,
                ))
            },
            [64, 176, 88, 51, 168, 188, 156, 175] => {
                check_min_accounts_req(accounts_len, 13)?;
                let ix_accounts = LiquidateFullPosition4IxAccounts {
                    signer: ix.accounts[0].0.into(),
                    perpetuals: ix.accounts[1].0.into(),
                    pool: ix.accounts[2].0.into(),
                    position: ix.accounts[3].0.into(),
                    custody: ix.accounts[4].0.into(),
                    custody_doves_price_account: ix.accounts[5].0.into(),
                    custody_pythnet_price_account: ix.accounts[6].0.into(),
                    collateral_custody: ix.accounts[7].0.into(),
                    collateral_custody_doves_price_account: ix.accounts[8].0.into(),
                    collateral_custody_pythnet_price_account: ix.accounts[9].0.into(),
                    collateral_custody_token_account: ix.accounts[10].0.into(),
                    event_authority: ix.accounts[11].0.into(),
                    program: ix.accounts[12].0.into(),
                };
                Ok(PerpetualsProgramIx::LiquidateFullPosition4(ix_accounts))
            },
            [162, 0, 215, 55, 225, 15, 185, 0] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = RefreshAssetsUnderManagementIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    perpetuals: ix.accounts[1].0.into(),
                    pool: ix.accounts[2].0.into(),
                };
                Ok(PerpetualsProgramIx::RefreshAssetsUnderManagement(
                    ix_accounts,
                ))
            },
            [136, 245, 229, 58, 121, 141, 12, 207] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = InstantUpdateLimitOrderIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    api_keeper: ix.accounts[1].0.into(),
                    owner: ix.accounts[2].0.into(),
                    perpetuals: ix.accounts[3].0.into(),
                    pool: ix.accounts[4].0.into(),
                    position: ix.accounts[5].0.into(),
                    position_request: ix.accounts[6].0.into(),
                    custody: ix.accounts[7].0.into(),
                    custody_doves_price_account: ix.accounts[8].0.into(),
                    custody_pythnet_price_account: ix.accounts[9].0.into(),
                };
                let de_ix_data: InstantUpdateLimitOrderIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::InstantUpdateLimitOrder(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [144, 228, 114, 37, 165, 242, 111, 101] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = InstantUpdateTpslIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    api_keeper: ix.accounts[1].0.into(),
                    owner: ix.accounts[2].0.into(),
                    perpetuals: ix.accounts[3].0.into(),
                    pool: ix.accounts[4].0.into(),
                    position: ix.accounts[5].0.into(),
                    position_request: ix.accounts[6].0.into(),
                    custody: ix.accounts[7].0.into(),
                    custody_doves_price_account: ix.accounts[8].0.into(),
                    custody_pythnet_price_account: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                let de_ix_data: InstantUpdateTpslIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::InstantUpdateTpsl(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [109, 157, 55, 169, 8, 81, 4, 118] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = GetAddLiquidityAmountAndFee2IxAccounts {
                    perpetuals: ix.accounts[0].0.into(),
                    pool: ix.accounts[1].0.into(),
                    custody: ix.accounts[2].0.into(),
                    custody_doves_price_account: ix.accounts[3].0.into(),
                    custody_pythnet_price_account: ix.accounts[4].0.into(),
                    lp_token_mint: ix.accounts[5].0.into(),
                };
                let de_ix_data: GetAddLiquidityAmountAndFee2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::GetAddLiquidityAmountAndFee2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [183, 59, 72, 110, 223, 243, 150, 142] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = GetRemoveLiquidityAmountAndFee2IxAccounts {
                    perpetuals: ix.accounts[0].0.into(),
                    pool: ix.accounts[1].0.into(),
                    custody: ix.accounts[2].0.into(),
                    custody_doves_price_account: ix.accounts[3].0.into(),
                    custody_pythnet_price_account: ix.accounts[4].0.into(),
                    lp_token_mint: ix.accounts[5].0.into(),
                };
                let de_ix_data: GetRemoveLiquidityAmountAndFee2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::GetRemoveLiquidityAmountAndFee2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [193, 210, 13, 249, 113, 149, 29, 84] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = GetAssetsUnderManagement2IxAccounts {
                    perpetuals: ix.accounts[0].0.into(),
                    pool: ix.accounts[1].0.into(),
                };
                let de_ix_data: GetAssetsUnderManagement2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PerpetualsProgramIx::GetAssetsUnderManagement2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
