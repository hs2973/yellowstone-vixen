//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct SetNewAccountAuthority {
    pub marginfi_account: solana_program::pubkey::Pubkey,

    pub marginfi_group: solana_program::pubkey::Pubkey,

    pub signer: solana_program::pubkey::Pubkey,

    pub new_authority: solana_program::pubkey::Pubkey,

    pub fee_payer: solana_program::pubkey::Pubkey,
}

impl SetNewAccountAuthority {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.marginfi_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.marginfi_group,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.signer,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.new_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_payer,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&SetNewAccountAuthorityInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::MARGINFI_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetNewAccountAuthorityInstructionData {
    discriminator: [u8; 8],
}

impl SetNewAccountAuthorityInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [153, 162, 50, 84, 182, 201, 74, 179],
        }
    }
}

impl Default for SetNewAccountAuthorityInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `SetNewAccountAuthority`.
///
/// ### Accounts:
///
///   0. `[writable]` marginfi_account
///   1. `[]` marginfi_group
///   2. `[signer]` signer
///   3. `[]` new_authority
///   4. `[writable, signer]` fee_payer
#[derive(Clone, Debug, Default)]
pub struct SetNewAccountAuthorityBuilder {
    marginfi_account: Option<solana_program::pubkey::Pubkey>,
    marginfi_group: Option<solana_program::pubkey::Pubkey>,
    signer: Option<solana_program::pubkey::Pubkey>,
    new_authority: Option<solana_program::pubkey::Pubkey>,
    fee_payer: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SetNewAccountAuthorityBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn marginfi_account(
        &mut self,
        marginfi_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.marginfi_account = Some(marginfi_account);
        self
    }

    #[inline(always)]
    pub fn marginfi_group(&mut self, marginfi_group: solana_program::pubkey::Pubkey) -> &mut Self {
        self.marginfi_group = Some(marginfi_group);
        self
    }

    #[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.signer = Some(signer);
        self
    }

    #[inline(always)]
    pub fn new_authority(&mut self, new_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.new_authority = Some(new_authority);
        self
    }

    #[inline(always)]
    pub fn fee_payer(&mut self, fee_payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_payer = Some(fee_payer);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SetNewAccountAuthority {
            marginfi_account: self.marginfi_account.expect("marginfi_account is not set"),
            marginfi_group: self.marginfi_group.expect("marginfi_group is not set"),
            signer: self.signer.expect("signer is not set"),
            new_authority: self.new_authority.expect("new_authority is not set"),
            fee_payer: self.fee_payer.expect("fee_payer is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `set_new_account_authority` CPI accounts.
pub struct SetNewAccountAuthorityCpiAccounts<'a, 'b> {
    pub marginfi_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_group: &'b solana_program::account_info::AccountInfo<'a>,

    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_payer: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `set_new_account_authority` CPI instruction.
pub struct SetNewAccountAuthorityCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_group: &'b solana_program::account_info::AccountInfo<'a>,

    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_payer: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> SetNewAccountAuthorityCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SetNewAccountAuthorityCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            marginfi_account: accounts.marginfi_account,
            marginfi_group: accounts.marginfi_group,
            signer: accounts.signer,
            new_authority: accounts.new_authority,
            fee_payer: accounts.fee_payer,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.marginfi_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.marginfi_group.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.signer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.new_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_payer.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&SetNewAccountAuthorityInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MARGINFI_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.marginfi_account.clone());
        account_infos.push(self.marginfi_group.clone());
        account_infos.push(self.signer.clone());
        account_infos.push(self.new_authority.clone());
        account_infos.push(self.fee_payer.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SetNewAccountAuthority` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` marginfi_account
///   1. `[]` marginfi_group
///   2. `[signer]` signer
///   3. `[]` new_authority
///   4. `[writable, signer]` fee_payer
#[derive(Clone, Debug)]
pub struct SetNewAccountAuthorityCpiBuilder<'a, 'b> {
    instruction: Box<SetNewAccountAuthorityCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SetNewAccountAuthorityCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SetNewAccountAuthorityCpiBuilderInstruction {
            __program: program,
            marginfi_account: None,
            marginfi_group: None,
            signer: None,
            new_authority: None,
            fee_payer: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn marginfi_account(
        &mut self,
        marginfi_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marginfi_account = Some(marginfi_account);
        self
    }

    #[inline(always)]
    pub fn marginfi_group(
        &mut self,
        marginfi_group: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marginfi_group = Some(marginfi_group);
        self
    }

    #[inline(always)]
    pub fn signer(
        &mut self,
        signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.signer = Some(signer);
        self
    }

    #[inline(always)]
    pub fn new_authority(
        &mut self,
        new_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_authority = Some(new_authority);
        self
    }

    #[inline(always)]
    pub fn fee_payer(
        &mut self,
        fee_payer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_payer = Some(fee_payer);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = SetNewAccountAuthorityCpi {
            __program: self.instruction.__program,

            marginfi_account: self
                .instruction
                .marginfi_account
                .expect("marginfi_account is not set"),

            marginfi_group: self
                .instruction
                .marginfi_group
                .expect("marginfi_group is not set"),

            signer: self.instruction.signer.expect("signer is not set"),

            new_authority: self
                .instruction
                .new_authority
                .expect("new_authority is not set"),

            fee_payer: self.instruction.fee_payer.expect("fee_payer is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SetNewAccountAuthorityCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    marginfi_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    marginfi_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
