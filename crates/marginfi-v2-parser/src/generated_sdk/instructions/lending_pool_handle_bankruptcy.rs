//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct LendingPoolHandleBankruptcy {
    pub marginfi_group: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,

    pub bank: solana_program::pubkey::Pubkey,

    pub marginfi_account: solana_program::pubkey::Pubkey,

    pub liquidity_vault: solana_program::pubkey::Pubkey,

    pub insurance_vault: solana_program::pubkey::Pubkey,

    pub insurance_vault_authority: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl LendingPoolHandleBankruptcy {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.marginfi_group,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bank, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.marginfi_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liquidity_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.insurance_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.insurance_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&LendingPoolHandleBankruptcyInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::MARGINFI_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LendingPoolHandleBankruptcyInstructionData {
    discriminator: [u8; 8],
}

impl LendingPoolHandleBankruptcyInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [162, 11, 56, 139, 90, 128, 70, 173],
        }
    }
}

impl Default for LendingPoolHandleBankruptcyInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `LendingPoolHandleBankruptcy`.
///
/// ### Accounts:
///
///   0. `[]` marginfi_group
///   1. `[signer]` admin
///   2. `[writable]` bank
///   3. `[writable]` marginfi_account
///   4. `[writable]` liquidity_vault
///   5. `[writable]` insurance_vault
///   6. `[]` insurance_vault_authority
///   7. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct LendingPoolHandleBankruptcyBuilder {
    marginfi_group: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    bank: Option<solana_program::pubkey::Pubkey>,
    marginfi_account: Option<solana_program::pubkey::Pubkey>,
    liquidity_vault: Option<solana_program::pubkey::Pubkey>,
    insurance_vault: Option<solana_program::pubkey::Pubkey>,
    insurance_vault_authority: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl LendingPoolHandleBankruptcyBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn marginfi_group(&mut self, marginfi_group: solana_program::pubkey::Pubkey) -> &mut Self {
        self.marginfi_group = Some(marginfi_group);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn bank(&mut self, bank: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bank = Some(bank);
        self
    }

    #[inline(always)]
    pub fn marginfi_account(
        &mut self,
        marginfi_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.marginfi_account = Some(marginfi_account);
        self
    }

    #[inline(always)]
    pub fn liquidity_vault(
        &mut self,
        liquidity_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liquidity_vault = Some(liquidity_vault);
        self
    }

    #[inline(always)]
    pub fn insurance_vault(
        &mut self,
        insurance_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.insurance_vault = Some(insurance_vault);
        self
    }

    #[inline(always)]
    pub fn insurance_vault_authority(
        &mut self,
        insurance_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.insurance_vault_authority = Some(insurance_vault_authority);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = LendingPoolHandleBankruptcy {
            marginfi_group: self.marginfi_group.expect("marginfi_group is not set"),
            admin: self.admin.expect("admin is not set"),
            bank: self.bank.expect("bank is not set"),
            marginfi_account: self.marginfi_account.expect("marginfi_account is not set"),
            liquidity_vault: self.liquidity_vault.expect("liquidity_vault is not set"),
            insurance_vault: self.insurance_vault.expect("insurance_vault is not set"),
            insurance_vault_authority: self
                .insurance_vault_authority
                .expect("insurance_vault_authority is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `lending_pool_handle_bankruptcy` CPI accounts.
pub struct LendingPoolHandleBankruptcyCpiAccounts<'a, 'b> {
    pub marginfi_group: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub bank: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidity_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `lending_pool_handle_bankruptcy` CPI instruction.
pub struct LendingPoolHandleBankruptcyCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_group: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub bank: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidity_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> LendingPoolHandleBankruptcyCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: LendingPoolHandleBankruptcyCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            marginfi_group: accounts.marginfi_group,
            admin: accounts.admin,
            bank: accounts.bank,
            marginfi_account: accounts.marginfi_account,
            liquidity_vault: accounts.liquidity_vault,
            insurance_vault: accounts.insurance_vault,
            insurance_vault_authority: accounts.insurance_vault_authority,
            token_program: accounts.token_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.marginfi_group.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bank.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.marginfi_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liquidity_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.insurance_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.insurance_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&LendingPoolHandleBankruptcyInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MARGINFI_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.marginfi_group.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.bank.clone());
        account_infos.push(self.marginfi_account.clone());
        account_infos.push(self.liquidity_vault.clone());
        account_infos.push(self.insurance_vault.clone());
        account_infos.push(self.insurance_vault_authority.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `LendingPoolHandleBankruptcy` via CPI.
///
/// ### Accounts:
///
///   0. `[]` marginfi_group
///   1. `[signer]` admin
///   2. `[writable]` bank
///   3. `[writable]` marginfi_account
///   4. `[writable]` liquidity_vault
///   5. `[writable]` insurance_vault
///   6. `[]` insurance_vault_authority
///   7. `[]` token_program
#[derive(Clone, Debug)]
pub struct LendingPoolHandleBankruptcyCpiBuilder<'a, 'b> {
    instruction: Box<LendingPoolHandleBankruptcyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LendingPoolHandleBankruptcyCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(LendingPoolHandleBankruptcyCpiBuilderInstruction {
            __program: program,
            marginfi_group: None,
            admin: None,
            bank: None,
            marginfi_account: None,
            liquidity_vault: None,
            insurance_vault: None,
            insurance_vault_authority: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn marginfi_group(
        &mut self,
        marginfi_group: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marginfi_group = Some(marginfi_group);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn bank(&mut self, bank: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.bank = Some(bank);
        self
    }

    #[inline(always)]
    pub fn marginfi_account(
        &mut self,
        marginfi_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marginfi_account = Some(marginfi_account);
        self
    }

    #[inline(always)]
    pub fn liquidity_vault(
        &mut self,
        liquidity_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liquidity_vault = Some(liquidity_vault);
        self
    }

    #[inline(always)]
    pub fn insurance_vault(
        &mut self,
        insurance_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.insurance_vault = Some(insurance_vault);
        self
    }

    #[inline(always)]
    pub fn insurance_vault_authority(
        &mut self,
        insurance_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.insurance_vault_authority = Some(insurance_vault_authority);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = LendingPoolHandleBankruptcyCpi {
            __program: self.instruction.__program,

            marginfi_group: self
                .instruction
                .marginfi_group
                .expect("marginfi_group is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            bank: self.instruction.bank.expect("bank is not set"),

            marginfi_account: self
                .instruction
                .marginfi_account
                .expect("marginfi_account is not set"),

            liquidity_vault: self
                .instruction
                .liquidity_vault
                .expect("liquidity_vault is not set"),

            insurance_vault: self
                .instruction
                .insurance_vault
                .expect("insurance_vault is not set"),

            insurance_vault_authority: self
                .instruction
                .insurance_vault_authority
                .expect("insurance_vault_authority is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct LendingPoolHandleBankruptcyCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    marginfi_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bank: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    marginfi_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liquidity_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    insurance_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    insurance_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
