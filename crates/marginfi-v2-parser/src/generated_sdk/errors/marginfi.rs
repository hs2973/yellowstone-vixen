//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum MarginfiError {
    /// 6000 - Math error
    #[error("Math error")]
    MathError = 0x1770,
    /// 6001 - Invalid bank index
    #[error("Invalid bank index")]
    BankNotFound = 0x1771,
    /// 6002 - Lending account balance not found
    #[error("Lending account balance not found")]
    LendingAccountBalanceNotFound = 0x1772,
    /// 6003 - Bank deposit capacity exceeded
    #[error("Bank deposit capacity exceeded")]
    BankAssetCapacityExceeded = 0x1773,
    /// 6004 - Invalid transfer
    #[error("Invalid transfer")]
    InvalidTransfer = 0x1774,
    /// 6005 - Missing Pyth or Bank account
    #[error("Missing Pyth or Bank account")]
    MissingPythOrBankAccount = 0x1775,
    /// 6006 - Missing Pyth account
    #[error("Missing Pyth account")]
    MissingPythAccount = 0x1776,
    /// 6007 - Invalid Pyth account
    #[error("Invalid Pyth account")]
    InvalidOracleAccount = 0x1777,
    /// 6008 - Missing Bank account
    #[error("Missing Bank account")]
    MissingBankAccount = 0x1778,
    /// 6009 - Invalid Bank account
    #[error("Invalid Bank account")]
    InvalidBankAccount = 0x1779,
    /// 6010 - Bad account health
    #[error("Bad account health")]
    BadAccountHealth = 0x177a,
    /// 6011 - Lending account balance slots are full
    #[error("Lending account balance slots are full")]
    LendingAccountBalanceSlotsFull = 0x177b,
    /// 6012 - Bank already exists
    #[error("Bank already exists")]
    BankAlreadyExists = 0x177c,
    /// 6013 - Illegal liquidation
    #[error("Illegal liquidation")]
    IllegalLiquidation = 0x177d,
    /// 6014 - Account is not bankrupt
    #[error("Account is not bankrupt")]
    AccountNotBankrupt = 0x177e,
    /// 6015 - Account balance is not bad debt
    #[error("Account balance is not bad debt")]
    BalanceNotBadDebt = 0x177f,
    /// 6016 - Invalid group config
    #[error("Invalid group config")]
    InvalidConfig = 0x1780,
    /// 6017 - Stale oracle data
    #[error("Stale oracle data")]
    StaleOracle = 0x1781,
    /// 6018 - Bank paused
    #[error("Bank paused")]
    BankPaused = 0x1782,
    /// 6019 - Bank is ReduceOnly mode
    #[error("Bank is ReduceOnly mode")]
    BankReduceOnly = 0x1783,
    /// 6020 - Bank is missing
    #[error("Bank is missing")]
    BankAccoutNotFound = 0x1784,
    /// 6021 - Operation is deposit-only
    #[error("Operation is deposit-only")]
    OperationDepositOnly = 0x1785,
    /// 6022 - Operation is withdraw-only
    #[error("Operation is withdraw-only")]
    OperationWithdrawOnly = 0x1786,
    /// 6023 - Operation is borrow-only
    #[error("Operation is borrow-only")]
    OperationBorrowOnly = 0x1787,
    /// 6024 - Operation is repay-only
    #[error("Operation is repay-only")]
    OperationRepayOnly = 0x1788,
    /// 6025 - No asset found
    #[error("No asset found")]
    NoAssetFound = 0x1789,
    /// 6026 - No liability found
    #[error("No liability found")]
    NoLiabilityFound = 0x178a,
    /// 6027 - Invalid oracle setup
    #[error("Invalid oracle setup")]
    InvalidOracleSetup = 0x178b,
    /// 6028 - Invalid bank utilization ratio
    #[error("Invalid bank utilization ratio")]
    IllegalUtilizationRatio = 0x178c,
    /// 6029 - Bank borrow cap exceeded
    #[error("Bank borrow cap exceeded")]
    BankLiabilityCapacityExceeded = 0x178d,
    /// 6030 - Invalid Price
    #[error("Invalid Price")]
    InvalidPrice = 0x178e,
    /// 6031 - Account can have only one liablity when account is under isolated risk
    #[error("Account can have only one liablity when account is under isolated risk")]
    IsolatedAccountIllegalState = 0x178f,
    /// 6032 - Emissions already setup
    #[error("Emissions already setup")]
    EmissionsAlreadySetup = 0x1790,
    /// 6033 - Oracle is not set
    #[error("Oracle is not set")]
    OracleNotSetup = 0x1791,
    /// 6034 - Invalid swithcboard decimal conversion
    #[error("Invalid swithcboard decimal conversion")]
    InvalidSwitchboardDecimalConversion = 0x1792,
    /// 6035 - Cannot close balance because of outstanding emissions
    #[error("Cannot close balance because of outstanding emissions")]
    CannotCloseOutstandingEmissions = 0x1793,
    /// 6036 - Update emissions error
    #[error("Update emissions error")]
    EmissionsUpdateError = 0x1794,
    /// 6037 - Account disabled
    #[error("Account disabled")]
    AccountDisabled = 0x1795,
    /// 6038 - Account can't temporarily open 3 balances, please close a balance first
    #[error("Account can't temporarily open 3 balances, please close a balance first")]
    AccountTempActiveBalanceLimitExceeded = 0x1796,
    /// 6039 - Illegal action during flashloan
    #[error("Illegal action during flashloan")]
    AccountInFlashloan = 0x1797,
    /// 6040 - Illegal flashloan
    #[error("Illegal flashloan")]
    IllegalFlashloan = 0x1798,
    /// 6041 - Illegal flag
    #[error("Illegal flag")]
    IllegalFlag = 0x1799,
    /// 6042 - Illegal balance state
    #[error("Illegal balance state")]
    IllegalBalanceState = 0x179a,
    /// 6043 - Illegal account authority transfer
    #[error("Illegal account authority transfer")]
    IllegalAccountAuthorityTransfer = 0x179b,
}

impl solana_program::program_error::PrintProgramError for MarginfiError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for MarginfiError {
    fn type_of() -> &'static str { "MarginfiError" }
}
