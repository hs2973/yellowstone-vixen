//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        LendingAccountBorrow as LendingAccountBorrowIxAccounts,
        LendingAccountBorrowInstructionArgs as LendingAccountBorrowIxData,
        LendingAccountCloseBalance as LendingAccountCloseBalanceIxAccounts,
        LendingAccountDeposit as LendingAccountDepositIxAccounts,
        LendingAccountDepositInstructionArgs as LendingAccountDepositIxData,
        LendingAccountEndFlashloan as LendingAccountEndFlashloanIxAccounts,
        LendingAccountLiquidate as LendingAccountLiquidateIxAccounts,
        LendingAccountLiquidateInstructionArgs as LendingAccountLiquidateIxData,
        LendingAccountRepay as LendingAccountRepayIxAccounts,
        LendingAccountRepayInstructionArgs as LendingAccountRepayIxData,
        LendingAccountSettleEmissions as LendingAccountSettleEmissionsIxAccounts,
        LendingAccountStartFlashloan as LendingAccountStartFlashloanIxAccounts,
        LendingAccountStartFlashloanInstructionArgs as LendingAccountStartFlashloanIxData,
        LendingAccountWithdraw as LendingAccountWithdrawIxAccounts,
        LendingAccountWithdrawEmissions as LendingAccountWithdrawEmissionsIxAccounts,
        LendingAccountWithdrawInstructionArgs as LendingAccountWithdrawIxData,
        LendingPoolAccrueBankInterest as LendingPoolAccrueBankInterestIxAccounts,
        LendingPoolAddBank as LendingPoolAddBankIxAccounts,
        LendingPoolAddBankInstructionArgs as LendingPoolAddBankIxData,
        LendingPoolAddBankWithSeed as LendingPoolAddBankWithSeedIxAccounts,
        LendingPoolAddBankWithSeedInstructionArgs as LendingPoolAddBankWithSeedIxData,
        LendingPoolCollectBankFees as LendingPoolCollectBankFeesIxAccounts,
        LendingPoolConfigureBank as LendingPoolConfigureBankIxAccounts,
        LendingPoolConfigureBankInstructionArgs as LendingPoolConfigureBankIxData,
        LendingPoolHandleBankruptcy as LendingPoolHandleBankruptcyIxAccounts,
        LendingPoolSetupEmissions as LendingPoolSetupEmissionsIxAccounts,
        LendingPoolSetupEmissionsInstructionArgs as LendingPoolSetupEmissionsIxData,
        LendingPoolUpdateEmissionsParameters as LendingPoolUpdateEmissionsParametersIxAccounts,
        LendingPoolUpdateEmissionsParametersInstructionArgs as LendingPoolUpdateEmissionsParametersIxData,
        MarginfiAccountInitialize as MarginfiAccountInitializeIxAccounts,
        MarginfiGroupConfigure as MarginfiGroupConfigureIxAccounts,
        MarginfiGroupConfigureInstructionArgs as MarginfiGroupConfigureIxData,
        MarginfiGroupInitialize as MarginfiGroupInitializeIxAccounts,
        SetAccountFlag as SetAccountFlagIxAccounts,
        SetAccountFlagInstructionArgs as SetAccountFlagIxData,
        SetNewAccountAuthority as SetNewAccountAuthorityIxAccounts,
        UnsetAccountFlag as UnsetAccountFlagIxAccounts,
        UnsetAccountFlagInstructionArgs as UnsetAccountFlagIxData,
    },
    ID,
};

/// Marginfi Instructions
#[derive(Debug)]
pub enum MarginfiProgramIx {
    MarginfiGroupInitialize(MarginfiGroupInitializeIxAccounts),
    MarginfiGroupConfigure(
        MarginfiGroupConfigureIxAccounts,
        MarginfiGroupConfigureIxData,
    ),
    LendingPoolAddBank(LendingPoolAddBankIxAccounts, LendingPoolAddBankIxData),
    LendingPoolAddBankWithSeed(
        LendingPoolAddBankWithSeedIxAccounts,
        LendingPoolAddBankWithSeedIxData,
    ),
    LendingPoolConfigureBank(
        LendingPoolConfigureBankIxAccounts,
        LendingPoolConfigureBankIxData,
    ),
    LendingPoolSetupEmissions(
        LendingPoolSetupEmissionsIxAccounts,
        LendingPoolSetupEmissionsIxData,
    ),
    LendingPoolUpdateEmissionsParameters(
        LendingPoolUpdateEmissionsParametersIxAccounts,
        LendingPoolUpdateEmissionsParametersIxData,
    ),
    LendingPoolHandleBankruptcy(LendingPoolHandleBankruptcyIxAccounts),
    MarginfiAccountInitialize(MarginfiAccountInitializeIxAccounts),
    LendingAccountDeposit(LendingAccountDepositIxAccounts, LendingAccountDepositIxData),
    LendingAccountRepay(LendingAccountRepayIxAccounts, LendingAccountRepayIxData),
    LendingAccountWithdraw(
        LendingAccountWithdrawIxAccounts,
        LendingAccountWithdrawIxData,
    ),
    LendingAccountBorrow(LendingAccountBorrowIxAccounts, LendingAccountBorrowIxData),
    LendingAccountCloseBalance(LendingAccountCloseBalanceIxAccounts),
    LendingAccountWithdrawEmissions(LendingAccountWithdrawEmissionsIxAccounts),
    LendingAccountSettleEmissions(LendingAccountSettleEmissionsIxAccounts),
    LendingAccountLiquidate(
        LendingAccountLiquidateIxAccounts,
        LendingAccountLiquidateIxData,
    ),
    LendingAccountStartFlashloan(
        LendingAccountStartFlashloanIxAccounts,
        LendingAccountStartFlashloanIxData,
    ),
    LendingAccountEndFlashloan(LendingAccountEndFlashloanIxAccounts),
    LendingPoolAccrueBankInterest(LendingPoolAccrueBankInterestIxAccounts),
    LendingPoolCollectBankFees(LendingPoolCollectBankFeesIxAccounts),
    SetAccountFlag(SetAccountFlagIxAccounts, SetAccountFlagIxData),
    UnsetAccountFlag(UnsetAccountFlagIxAccounts, UnsetAccountFlagIxData),
    SetNewAccountAuthority(SetNewAccountAuthorityIxAccounts),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = MarginfiProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "Marginfi::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<MarginfiProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        match ix_discriminator {
            [255, 67, 67, 26, 94, 31, 34, 20] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = MarginfiGroupInitializeIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                };
                Ok(MarginfiProgramIx::MarginfiGroupInitialize(ix_accounts))
            },
            [62, 199, 81, 78, 33, 13, 236, 61] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = MarginfiGroupConfigureIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                };
                let de_ix_data: MarginfiGroupConfigureIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::MarginfiGroupConfigure(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [215, 68, 72, 78, 208, 218, 103, 182] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = LendingPoolAddBankIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    fee_payer: ix.accounts[2].0.into(),
                    bank_mint: ix.accounts[3].0.into(),
                    bank: ix.accounts[4].0.into(),
                    liquidity_vault_authority: ix.accounts[5].0.into(),
                    liquidity_vault: ix.accounts[6].0.into(),
                    insurance_vault_authority: ix.accounts[7].0.into(),
                    insurance_vault: ix.accounts[8].0.into(),
                    fee_vault_authority: ix.accounts[9].0.into(),
                    fee_vault: ix.accounts[10].0.into(),
                    rent: ix.accounts[11].0.into(),
                    token_program: ix.accounts[12].0.into(),
                    system_program: ix.accounts[13].0.into(),
                };
                let de_ix_data: LendingPoolAddBankIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingPoolAddBank(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [76, 211, 213, 171, 117, 78, 158, 76] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = LendingPoolAddBankWithSeedIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    fee_payer: ix.accounts[2].0.into(),
                    bank_mint: ix.accounts[3].0.into(),
                    bank: ix.accounts[4].0.into(),
                    liquidity_vault_authority: ix.accounts[5].0.into(),
                    liquidity_vault: ix.accounts[6].0.into(),
                    insurance_vault_authority: ix.accounts[7].0.into(),
                    insurance_vault: ix.accounts[8].0.into(),
                    fee_vault_authority: ix.accounts[9].0.into(),
                    fee_vault: ix.accounts[10].0.into(),
                    rent: ix.accounts[11].0.into(),
                    token_program: ix.accounts[12].0.into(),
                    system_program: ix.accounts[13].0.into(),
                };
                let de_ix_data: LendingPoolAddBankWithSeedIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingPoolAddBankWithSeed(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [121, 173, 156, 40, 93, 148, 56, 237] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = LendingPoolConfigureBankIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    bank: ix.accounts[2].0.into(),
                };
                let de_ix_data: LendingPoolConfigureBankIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingPoolConfigureBank(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [206, 97, 120, 172, 113, 204, 169, 70] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = LendingPoolSetupEmissionsIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    bank: ix.accounts[2].0.into(),
                    emissions_mint: ix.accounts[3].0.into(),
                    emissions_auth: ix.accounts[4].0.into(),
                    emissions_token_account: ix.accounts[5].0.into(),
                    emissions_funding_account: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                };
                let de_ix_data: LendingPoolSetupEmissionsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingPoolSetupEmissions(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [55, 213, 224, 168, 153, 53, 197, 40] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = LendingPoolUpdateEmissionsParametersIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    bank: ix.accounts[2].0.into(),
                    emissions_mint: ix.accounts[3].0.into(),
                    emissions_token_account: ix.accounts[4].0.into(),
                    emissions_funding_account: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                };
                let de_ix_data: LendingPoolUpdateEmissionsParametersIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingPoolUpdateEmissionsParameters(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [162, 11, 56, 139, 90, 128, 70, 173] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = LendingPoolHandleBankruptcyIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    bank: ix.accounts[2].0.into(),
                    marginfi_account: ix.accounts[3].0.into(),
                    liquidity_vault: ix.accounts[4].0.into(),
                    insurance_vault: ix.accounts[5].0.into(),
                    insurance_vault_authority: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                };
                Ok(MarginfiProgramIx::LendingPoolHandleBankruptcy(ix_accounts))
            },
            [43, 78, 61, 255, 148, 52, 249, 154] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = MarginfiAccountInitializeIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    marginfi_account: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                    fee_payer: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                };
                Ok(MarginfiProgramIx::MarginfiAccountInitialize(ix_accounts))
            },
            [171, 94, 235, 103, 82, 64, 212, 140] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = LendingAccountDepositIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    marginfi_account: ix.accounts[1].0.into(),
                    signer: ix.accounts[2].0.into(),
                    bank: ix.accounts[3].0.into(),
                    signer_token_account: ix.accounts[4].0.into(),
                    bank_liquidity_vault: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                };
                let de_ix_data: LendingAccountDepositIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingAccountDeposit(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [79, 209, 172, 177, 222, 51, 173, 151] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = LendingAccountRepayIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    marginfi_account: ix.accounts[1].0.into(),
                    signer: ix.accounts[2].0.into(),
                    bank: ix.accounts[3].0.into(),
                    signer_token_account: ix.accounts[4].0.into(),
                    bank_liquidity_vault: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                };
                let de_ix_data: LendingAccountRepayIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingAccountRepay(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [36, 72, 74, 19, 210, 210, 192, 192] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = LendingAccountWithdrawIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    marginfi_account: ix.accounts[1].0.into(),
                    signer: ix.accounts[2].0.into(),
                    bank: ix.accounts[3].0.into(),
                    destination_token_account: ix.accounts[4].0.into(),
                    bank_liquidity_vault_authority: ix.accounts[5].0.into(),
                    bank_liquidity_vault: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                };
                let de_ix_data: LendingAccountWithdrawIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingAccountWithdraw(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [4, 126, 116, 53, 48, 5, 212, 31] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = LendingAccountBorrowIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    marginfi_account: ix.accounts[1].0.into(),
                    signer: ix.accounts[2].0.into(),
                    bank: ix.accounts[3].0.into(),
                    destination_token_account: ix.accounts[4].0.into(),
                    bank_liquidity_vault_authority: ix.accounts[5].0.into(),
                    bank_liquidity_vault: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                };
                let de_ix_data: LendingAccountBorrowIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingAccountBorrow(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [245, 54, 41, 4, 243, 202, 31, 17] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = LendingAccountCloseBalanceIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    marginfi_account: ix.accounts[1].0.into(),
                    signer: ix.accounts[2].0.into(),
                    bank: ix.accounts[3].0.into(),
                };
                Ok(MarginfiProgramIx::LendingAccountCloseBalance(ix_accounts))
            },
            [234, 22, 84, 214, 118, 176, 140, 170] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = LendingAccountWithdrawEmissionsIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    marginfi_account: ix.accounts[1].0.into(),
                    signer: ix.accounts[2].0.into(),
                    bank: ix.accounts[3].0.into(),
                    emissions_mint: ix.accounts[4].0.into(),
                    emissions_auth: ix.accounts[5].0.into(),
                    emissions_vault: ix.accounts[6].0.into(),
                    destination_account: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                };
                Ok(MarginfiProgramIx::LendingAccountWithdrawEmissions(
                    ix_accounts,
                ))
            },
            [161, 58, 136, 174, 242, 223, 156, 176] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = LendingAccountSettleEmissionsIxAccounts {
                    marginfi_account: ix.accounts[0].0.into(),
                    bank: ix.accounts[1].0.into(),
                };
                Ok(MarginfiProgramIx::LendingAccountSettleEmissions(
                    ix_accounts,
                ))
            },
            [214, 169, 151, 213, 251, 167, 86, 219] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = LendingAccountLiquidateIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    asset_bank: ix.accounts[1].0.into(),
                    liab_bank: ix.accounts[2].0.into(),
                    liquidator_marginfi_account: ix.accounts[3].0.into(),
                    signer: ix.accounts[4].0.into(),
                    liquidatee_marginfi_account: ix.accounts[5].0.into(),
                    bank_liquidity_vault_authority: ix.accounts[6].0.into(),
                    bank_liquidity_vault: ix.accounts[7].0.into(),
                    bank_insurance_vault: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: LendingAccountLiquidateIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingAccountLiquidate(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [14, 131, 33, 220, 81, 186, 180, 107] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = LendingAccountStartFlashloanIxAccounts {
                    marginfi_account: ix.accounts[0].0.into(),
                    signer: ix.accounts[1].0.into(),
                    ixs_sysvar: ix.accounts[2].0.into(),
                };
                let de_ix_data: LendingAccountStartFlashloanIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::LendingAccountStartFlashloan(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [105, 124, 201, 106, 153, 2, 8, 156] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = LendingAccountEndFlashloanIxAccounts {
                    marginfi_account: ix.accounts[0].0.into(),
                    signer: ix.accounts[1].0.into(),
                };
                Ok(MarginfiProgramIx::LendingAccountEndFlashloan(ix_accounts))
            },
            [108, 201, 30, 87, 47, 65, 97, 188] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = LendingPoolAccrueBankInterestIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    bank: ix.accounts[1].0.into(),
                };
                Ok(MarginfiProgramIx::LendingPoolAccrueBankInterest(
                    ix_accounts,
                ))
            },
            [201, 5, 215, 116, 230, 92, 75, 150] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = LendingPoolCollectBankFeesIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    bank: ix.accounts[1].0.into(),
                    liquidity_vault_authority: ix.accounts[2].0.into(),
                    liquidity_vault: ix.accounts[3].0.into(),
                    insurance_vault: ix.accounts[4].0.into(),
                    fee_vault: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                };
                Ok(MarginfiProgramIx::LendingPoolCollectBankFees(ix_accounts))
            },
            [56, 238, 18, 207, 193, 82, 138, 174] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = SetAccountFlagIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    marginfi_account: ix.accounts[1].0.into(),
                    admin: ix.accounts[2].0.into(),
                };
                let de_ix_data: SetAccountFlagIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::SetAccountFlag(ix_accounts, de_ix_data))
            },
            [56, 81, 56, 85, 92, 49, 255, 70] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UnsetAccountFlagIxAccounts {
                    marginfi_group: ix.accounts[0].0.into(),
                    marginfi_account: ix.accounts[1].0.into(),
                    admin: ix.accounts[2].0.into(),
                };
                let de_ix_data: UnsetAccountFlagIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(MarginfiProgramIx::UnsetAccountFlag(ix_accounts, de_ix_data))
            },
            [153, 162, 50, 84, 182, 201, 74, 179] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = SetNewAccountAuthorityIxAccounts {
                    marginfi_account: ix.accounts[0].0.into(),
                    marginfi_group: ix.accounts[1].0.into(),
                    signer: ix.accounts[2].0.into(),
                    new_authority: ix.accounts[3].0.into(),
                    fee_payer: ix.accounts[4].0.into(),
                };
                Ok(MarginfiProgramIx::SetNewAccountAuthority(ix_accounts))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
