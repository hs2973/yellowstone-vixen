//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        Create as CreateIxAccounts, CreateInstructionArgs as CreateIxData,
        Delete as DeleteIxAccounts, Realloc as ReallocIxAccounts,
        ReallocInstructionArgs as ReallocIxData, Transfer as TransferIxAccounts,
        TransferInstructionArgs as TransferIxData, Update as UpdateIxAccounts,
        UpdateInstructionArgs as UpdateIxData,
    },
    ID,
};

/// Name Instructions
#[derive(Debug)]
pub enum NameProgramIx {
    Create(CreateIxAccounts, CreateIxData),
    Update(UpdateIxAccounts, UpdateIxData),
    Transfer(TransferIxAccounts, TransferIxData),
    Delete(DeleteIxAccounts),
    Realloc(ReallocIxAccounts, ReallocIxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = NameProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "Name::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<NameProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 1] = ix.data[0..1].try_into()?;
        let mut ix_data = &ix.data[1..];
        match ix_discriminator {
            [0] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = CreateIxAccounts {
                    system_program: ix.accounts[0].0.into(),
                    funding_account: ix.accounts[1].0.into(),
                    name_record: ix.accounts[2].0.into(),
                    account_class: ix.accounts[3].0.into(),
                    parent_name_record: ix.accounts[4].0.into(),
                    parent_name_record_class: ix.accounts[5].0.into(),
                };
                let de_ix_data: CreateIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(NameProgramIx::Create(ix_accounts, de_ix_data))
            },
            [1] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateIxAccounts {
                    name_record: ix.accounts[0].0.into(),
                    owner: ix.accounts[1].0.into(),
                    parent_name_record: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(NameProgramIx::Update(ix_accounts, de_ix_data))
            },
            [2] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = TransferIxAccounts {
                    name_record: ix.accounts[0].0.into(),
                    owner: ix.accounts[1].0.into(),
                    parent_name_record: ix.accounts[2].0.into(),
                };
                let de_ix_data: TransferIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(NameProgramIx::Transfer(ix_accounts, de_ix_data))
            },
            [3] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = DeleteIxAccounts {
                    name_record: ix.accounts[0].0.into(),
                    owner: ix.accounts[1].0.into(),
                    refund_account: ix.accounts[2].0.into(),
                };
                Ok(NameProgramIx::Delete(ix_accounts))
            },
            [4] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = ReallocIxAccounts {
                    system_program: ix.accounts[0].0.into(),
                    payer: ix.accounts[1].0.into(),
                    name_record: ix.accounts[2].0.into(),
                    owner: ix.accounts[3].0.into(),
                };
                let de_ix_data: ReallocIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(NameProgramIx::Realloc(ix_accounts, de_ix_data))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
