//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize};
use crate::ID;
use crate::instructions::{InitializeInstructionArgs as InitializeIxData, Initialize as InitializeIxAccounts, Initialize2InstructionArgs as Initialize2IxData, Initialize2 as Initialize2IxAccounts, MonitorStepInstructionArgs as MonitorStepIxData, MonitorStep as MonitorStepIxAccounts, DepositInstructionArgs as DepositIxData, Deposit as DepositIxAccounts, WithdrawInstructionArgs as WithdrawIxData, Withdraw as WithdrawIxAccounts, MigrateToOpenBook as MigrateToOpenBookIxAccounts, SetParamsInstructionArgs as SetParamsIxData, SetParams as SetParamsIxAccounts, WithdrawPnl as WithdrawPnlIxAccounts, WithdrawSrmInstructionArgs as WithdrawSrmIxData, WithdrawSrm as WithdrawSrmIxAccounts, SwapBaseInInstructionArgs as SwapBaseInIxData, SwapBaseIn as SwapBaseInIxAccounts, PreInitializeInstructionArgs as PreInitializeIxData, PreInitialize as PreInitializeIxAccounts, SwapBaseOutInstructionArgs as SwapBaseOutIxData, SwapBaseOut as SwapBaseOutIxAccounts, SimulateInfoInstructionArgs as SimulateInfoIxData, SimulateInfo as SimulateInfoIxAccounts, AdminCancelOrdersInstructionArgs as AdminCancelOrdersIxData, AdminCancelOrders as AdminCancelOrdersIxAccounts, CreateConfigAccount as CreateConfigAccountIxAccounts, UpdateConfigAccountInstructionArgs as UpdateConfigAccountIxData, UpdateConfigAccount as UpdateConfigAccountIxAccounts, };

/// RaydiumAmm Instructions
#[derive(Debug)]
pub enum RaydiumAmmProgramIx {
                        Initialize(InitializeIxAccounts, InitializeIxData),
                                Initialize2(Initialize2IxAccounts, Initialize2IxData),
                                MonitorStep(MonitorStepIxAccounts, MonitorStepIxData),
                                Deposit(DepositIxAccounts, DepositIxData),
                                Withdraw(WithdrawIxAccounts, WithdrawIxData),
                                MigrateToOpenBook(MigrateToOpenBookIxAccounts),
                                SetParams(SetParamsIxAccounts, SetParamsIxData),
                                WithdrawPnl(WithdrawPnlIxAccounts),
                                WithdrawSrm(WithdrawSrmIxAccounts, WithdrawSrmIxData),
                                SwapBaseIn(SwapBaseInIxAccounts, SwapBaseInIxData),
                                PreInitialize(PreInitializeIxAccounts, PreInitializeIxData),
                                SwapBaseOut(SwapBaseOutIxAccounts, SwapBaseOutIxData),
                                SimulateInfo(SimulateInfoIxAccounts, SimulateInfoIxData),
                                AdminCancelOrders(AdminCancelOrdersIxAccounts, AdminCancelOrdersIxData),
                                CreateConfigAccount(CreateConfigAccountIxAccounts),
                                UpdateConfigAccount(UpdateConfigAccountIxAccounts, UpdateConfigAccountIxData),
            }

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = RaydiumAmmProgramIx;

    fn id(&self) -> std::borrow::Cow<str> {
        "RaydiumAmm::InstructionParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(&self, ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

impl InstructionParser {
    pub(crate) fn parse_impl(ix:&yellowstone_vixen_core::instruction::InstructionUpdate) -> yellowstone_vixen_core::ParseResult<RaydiumAmmProgramIx> {
        let accounts_len = ix.accounts.len();
                let ix_discriminator:[u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
            match ix_discriminator {
                                                                                        [175, 175, 109, 31, 13, 152, 155, 237] => {
                                check_min_accounts_req(accounts_len, 18)?;
                                let ix_accounts = InitializeIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            system_program: ix.accounts[1].0.into(),
                                                                            rent: ix.accounts[2].0.into(),
                                                                            amm: ix.accounts[3].0.into(),
                                                                            amm_authority: ix.accounts[4].0.into(),
                                                                            amm_open_orders: ix.accounts[5].0.into(),
                                                                            lp_mint_address: ix.accounts[6].0.into(),
                                                                            coin_mint_address: ix.accounts[7].0.into(),
                                                                            pc_mint_address: ix.accounts[8].0.into(),
                                                                            pool_coin_token_account: ix.accounts[9].0.into(),
                                                                            pool_pc_token_account: ix.accounts[10].0.into(),
                                                                            pool_withdraw_queue: ix.accounts[11].0.into(),
                                                                            pool_target_orders_account: ix.accounts[12].0.into(),
                                                                            user_lp_token_account: ix.accounts[13].0.into(),
                                                                            pool_temp_lp_token_account: ix.accounts[14].0.into(),
                                                                            serum_program: ix.accounts[15].0.into(),
                                                                            serum_market: ix.accounts[16].0.into(),
                                                                            user_wallet: ix.accounts[17].0.into(),
                                                                    };
                                                                    let de_ix_data:InitializeIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::Initialize(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [9, 203, 254, 64, 89, 32, 179, 159] => {
                                check_min_accounts_req(accounts_len, 21)?;
                                let ix_accounts = Initialize2IxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            spl_associated_token_account: ix.accounts[1].0.into(),
                                                                            system_program: ix.accounts[2].0.into(),
                                                                            rent: ix.accounts[3].0.into(),
                                                                            amm: ix.accounts[4].0.into(),
                                                                            amm_authority: ix.accounts[5].0.into(),
                                                                            amm_open_orders: ix.accounts[6].0.into(),
                                                                            lp_mint: ix.accounts[7].0.into(),
                                                                            coin_mint: ix.accounts[8].0.into(),
                                                                            pc_mint: ix.accounts[9].0.into(),
                                                                            pool_coin_token_account: ix.accounts[10].0.into(),
                                                                            pool_pc_token_account: ix.accounts[11].0.into(),
                                                                            pool_withdraw_queue: ix.accounts[12].0.into(),
                                                                            amm_target_orders: ix.accounts[13].0.into(),
                                                                            pool_temp_lp: ix.accounts[14].0.into(),
                                                                            serum_program: ix.accounts[15].0.into(),
                                                                            serum_market: ix.accounts[16].0.into(),
                                                                            user_wallet: ix.accounts[17].0.into(),
                                                                            user_token_coin: ix.accounts[18].0.into(),
                                                                            user_token_pc: ix.accounts[19].0.into(),
                                                                            user_lp_token_account: ix.accounts[20].0.into(),
                                                                    };
                                                                    let de_ix_data:Initialize2IxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::Initialize2(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [252, 219, 18, 48, 87, 183, 26, 154] => {
                                check_min_accounts_req(accounts_len, 19)?;
                                let ix_accounts = MonitorStepIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            rent: ix.accounts[1].0.into(),
                                                                            clock: ix.accounts[2].0.into(),
                                                                            amm: ix.accounts[3].0.into(),
                                                                            amm_authority: ix.accounts[4].0.into(),
                                                                            amm_open_orders: ix.accounts[5].0.into(),
                                                                            amm_target_orders: ix.accounts[6].0.into(),
                                                                            pool_coin_token_account: ix.accounts[7].0.into(),
                                                                            pool_pc_token_account: ix.accounts[8].0.into(),
                                                                            pool_withdraw_queue: ix.accounts[9].0.into(),
                                                                            serum_program: ix.accounts[10].0.into(),
                                                                            serum_market: ix.accounts[11].0.into(),
                                                                            serum_coin_vault_account: ix.accounts[12].0.into(),
                                                                            serum_pc_vault_account: ix.accounts[13].0.into(),
                                                                            serum_vault_signer: ix.accounts[14].0.into(),
                                                                            serum_req_q: ix.accounts[15].0.into(),
                                                                            serum_event_q: ix.accounts[16].0.into(),
                                                                            serum_bids: ix.accounts[17].0.into(),
                                                                            serum_asks: ix.accounts[18].0.into(),
                                                                    };
                                                                    let de_ix_data:MonitorStepIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::MonitorStep(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [242, 35, 198, 137, 82, 225, 242, 182] => {
                                check_min_accounts_req(accounts_len, 14)?;
                                let ix_accounts = DepositIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            amm: ix.accounts[1].0.into(),
                                                                            amm_authority: ix.accounts[2].0.into(),
                                                                            amm_open_orders: ix.accounts[3].0.into(),
                                                                            amm_target_orders: ix.accounts[4].0.into(),
                                                                            lp_mint_address: ix.accounts[5].0.into(),
                                                                            pool_coin_token_account: ix.accounts[6].0.into(),
                                                                            pool_pc_token_account: ix.accounts[7].0.into(),
                                                                            serum_market: ix.accounts[8].0.into(),
                                                                            user_coin_token_account: ix.accounts[9].0.into(),
                                                                            user_pc_token_account: ix.accounts[10].0.into(),
                                                                            user_lp_token_account: ix.accounts[11].0.into(),
                                                                            user_owner: ix.accounts[12].0.into(),
                                                                            serum_event_queue: ix.accounts[13].0.into(),
                                                                    };
                                                                    let de_ix_data:DepositIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::Deposit(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [183, 18, 70, 156, 148, 109, 161, 34] => {
                                check_min_accounts_req(accounts_len, 22)?;
                                let ix_accounts = WithdrawIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            amm: ix.accounts[1].0.into(),
                                                                            amm_authority: ix.accounts[2].0.into(),
                                                                            amm_open_orders: ix.accounts[3].0.into(),
                                                                            amm_target_orders: ix.accounts[4].0.into(),
                                                                            lp_mint_address: ix.accounts[5].0.into(),
                                                                            pool_coin_token_account: ix.accounts[6].0.into(),
                                                                            pool_pc_token_account: ix.accounts[7].0.into(),
                                                                            pool_withdraw_queue: ix.accounts[8].0.into(),
                                                                            pool_temp_lp_token_account: ix.accounts[9].0.into(),
                                                                            serum_program: ix.accounts[10].0.into(),
                                                                            serum_market: ix.accounts[11].0.into(),
                                                                            serum_coin_vault_account: ix.accounts[12].0.into(),
                                                                            serum_pc_vault_account: ix.accounts[13].0.into(),
                                                                            serum_vault_signer: ix.accounts[14].0.into(),
                                                                            user_lp_token_account: ix.accounts[15].0.into(),
                                                                            uer_coin_token_account: ix.accounts[16].0.into(),
                                                                            uer_pc_token_account: ix.accounts[17].0.into(),
                                                                            user_owner: ix.accounts[18].0.into(),
                                                                            serum_event_q: ix.accounts[19].0.into(),
                                                                            serum_bids: ix.accounts[20].0.into(),
                                                                            serum_asks: ix.accounts[21].0.into(),
                                                                    };
                                                                    let de_ix_data:WithdrawIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::Withdraw(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [207, 98, 243, 89, 114, 174, 205, 20] => {
                                check_min_accounts_req(accounts_len, 21)?;
                                let ix_accounts = MigrateToOpenBookIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            system_program: ix.accounts[1].0.into(),
                                                                            rent: ix.accounts[2].0.into(),
                                                                            amm: ix.accounts[3].0.into(),
                                                                            amm_authority: ix.accounts[4].0.into(),
                                                                            amm_open_orders: ix.accounts[5].0.into(),
                                                                            amm_token_coin: ix.accounts[6].0.into(),
                                                                            amm_token_pc: ix.accounts[7].0.into(),
                                                                            amm_target_orders: ix.accounts[8].0.into(),
                                                                            serum_program: ix.accounts[9].0.into(),
                                                                            serum_market: ix.accounts[10].0.into(),
                                                                            serum_bids: ix.accounts[11].0.into(),
                                                                            serum_asks: ix.accounts[12].0.into(),
                                                                            serum_event_queue: ix.accounts[13].0.into(),
                                                                            serum_coin_vault: ix.accounts[14].0.into(),
                                                                            serum_pc_vault: ix.accounts[15].0.into(),
                                                                            serum_vault_signer: ix.accounts[16].0.into(),
                                                                            new_amm_open_orders: ix.accounts[17].0.into(),
                                                                            new_serum_program: ix.accounts[18].0.into(),
                                                                            new_serum_market: ix.accounts[19].0.into(),
                                                                            admin: ix.accounts[20].0.into(),
                                                                    };
                                                                    Ok(RaydiumAmmProgramIx::MigrateToOpenBook(ix_accounts))
                                                            },
                                                                                                                                    [27, 234, 178, 52, 147, 2, 187, 141] => {
                                check_min_accounts_req(accounts_len, 16)?;
                                let ix_accounts = SetParamsIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            amm: ix.accounts[1].0.into(),
                                                                            amm_authority: ix.accounts[2].0.into(),
                                                                            amm_open_orders: ix.accounts[3].0.into(),
                                                                            amm_target_orders: ix.accounts[4].0.into(),
                                                                            amm_coin_vault: ix.accounts[5].0.into(),
                                                                            amm_pc_vault: ix.accounts[6].0.into(),
                                                                            serum_program: ix.accounts[7].0.into(),
                                                                            serum_market: ix.accounts[8].0.into(),
                                                                            serum_coin_vault: ix.accounts[9].0.into(),
                                                                            serum_pc_vault: ix.accounts[10].0.into(),
                                                                            serum_vault_signer: ix.accounts[11].0.into(),
                                                                            serum_event_queue: ix.accounts[12].0.into(),
                                                                            serum_bids: ix.accounts[13].0.into(),
                                                                            serum_asks: ix.accounts[14].0.into(),
                                                                            amm_admin_account: ix.accounts[15].0.into(),
                                                                    };
                                                                    let de_ix_data:SetParamsIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::SetParams(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [86, 36, 158, 158, 92, 241, 251, 94] => {
                                check_min_accounts_req(accounts_len, 17)?;
                                let ix_accounts = WithdrawPnlIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            amm: ix.accounts[1].0.into(),
                                                                            amm_config: ix.accounts[2].0.into(),
                                                                            amm_authority: ix.accounts[3].0.into(),
                                                                            amm_open_orders: ix.accounts[4].0.into(),
                                                                            pool_coin_token_account: ix.accounts[5].0.into(),
                                                                            pool_pc_token_account: ix.accounts[6].0.into(),
                                                                            coin_pnl_token_account: ix.accounts[7].0.into(),
                                                                            pc_pnl_token_account: ix.accounts[8].0.into(),
                                                                            pnl_owner_account: ix.accounts[9].0.into(),
                                                                            amm_target_orders: ix.accounts[10].0.into(),
                                                                            serum_program: ix.accounts[11].0.into(),
                                                                            serum_market: ix.accounts[12].0.into(),
                                                                            serum_event_queue: ix.accounts[13].0.into(),
                                                                            serum_coin_vault_account: ix.accounts[14].0.into(),
                                                                            serum_pc_vault_account: ix.accounts[15].0.into(),
                                                                            serum_vault_signer: ix.accounts[16].0.into(),
                                                                    };
                                                                    Ok(RaydiumAmmProgramIx::WithdrawPnl(ix_accounts))
                                                            },
                                                                                                                                    [193, 101, 58, 65, 120, 78, 99, 31] => {
                                check_min_accounts_req(accounts_len, 6)?;
                                let ix_accounts = WithdrawSrmIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            amm: ix.accounts[1].0.into(),
                                                                            amm_owner_account: ix.accounts[2].0.into(),
                                                                            amm_authority: ix.accounts[3].0.into(),
                                                                            srm_token: ix.accounts[4].0.into(),
                                                                            dest_srm_token: ix.accounts[5].0.into(),
                                                                    };
                                                                    let de_ix_data:WithdrawSrmIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::WithdrawSrm(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [42, 236, 72, 162, 242, 24, 39, 84] => {
                                check_min_accounts_req(accounts_len, 18)?;
                                let ix_accounts = SwapBaseInIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            amm: ix.accounts[1].0.into(),
                                                                            amm_authority: ix.accounts[2].0.into(),
                                                                            amm_open_orders: ix.accounts[3].0.into(),
                                                                            amm_target_orders: ix.accounts[4].0.into(),
                                                                            pool_coin_token_account: ix.accounts[5].0.into(),
                                                                            pool_pc_token_account: ix.accounts[6].0.into(),
                                                                            serum_program: ix.accounts[7].0.into(),
                                                                            serum_market: ix.accounts[8].0.into(),
                                                                            serum_bids: ix.accounts[9].0.into(),
                                                                            serum_asks: ix.accounts[10].0.into(),
                                                                            serum_event_queue: ix.accounts[11].0.into(),
                                                                            serum_coin_vault_account: ix.accounts[12].0.into(),
                                                                            serum_pc_vault_account: ix.accounts[13].0.into(),
                                                                            serum_vault_signer: ix.accounts[14].0.into(),
                                                                            uer_source_token_account: ix.accounts[15].0.into(),
                                                                            uer_destination_token_account: ix.accounts[16].0.into(),
                                                                            user_source_owner: ix.accounts[17].0.into(),
                                                                    };
                                                                    let de_ix_data:SwapBaseInIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::SwapBaseIn(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [255, 92, 87, 45, 198, 172, 236, 2] => {
                                check_min_accounts_req(accounts_len, 14)?;
                                let ix_accounts = PreInitializeIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            system_program: ix.accounts[1].0.into(),
                                                                            rent: ix.accounts[2].0.into(),
                                                                            amm_target_orders: ix.accounts[3].0.into(),
                                                                            pool_withdraw_queue: ix.accounts[4].0.into(),
                                                                            amm_authority: ix.accounts[5].0.into(),
                                                                            lp_mint_address: ix.accounts[6].0.into(),
                                                                            coin_mint_address: ix.accounts[7].0.into(),
                                                                            pc_mint_address: ix.accounts[8].0.into(),
                                                                            pool_coin_token_account: ix.accounts[9].0.into(),
                                                                            pool_pc_token_account: ix.accounts[10].0.into(),
                                                                            pool_temp_lp_token_account: ix.accounts[11].0.into(),
                                                                            serum_market: ix.accounts[12].0.into(),
                                                                            user_wallet: ix.accounts[13].0.into(),
                                                                    };
                                                                    let de_ix_data:PreInitializeIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::PreInitialize(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [163, 210, 155, 208, 175, 146, 213, 150] => {
                                check_min_accounts_req(accounts_len, 18)?;
                                let ix_accounts = SwapBaseOutIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            amm: ix.accounts[1].0.into(),
                                                                            amm_authority: ix.accounts[2].0.into(),
                                                                            amm_open_orders: ix.accounts[3].0.into(),
                                                                            amm_target_orders: ix.accounts[4].0.into(),
                                                                            pool_coin_token_account: ix.accounts[5].0.into(),
                                                                            pool_pc_token_account: ix.accounts[6].0.into(),
                                                                            serum_program: ix.accounts[7].0.into(),
                                                                            serum_market: ix.accounts[8].0.into(),
                                                                            serum_bids: ix.accounts[9].0.into(),
                                                                            serum_asks: ix.accounts[10].0.into(),
                                                                            serum_event_queue: ix.accounts[11].0.into(),
                                                                            serum_coin_vault_account: ix.accounts[12].0.into(),
                                                                            serum_pc_vault_account: ix.accounts[13].0.into(),
                                                                            serum_vault_signer: ix.accounts[14].0.into(),
                                                                            uer_source_token_account: ix.accounts[15].0.into(),
                                                                            uer_destination_token_account: ix.accounts[16].0.into(),
                                                                            user_source_owner: ix.accounts[17].0.into(),
                                                                    };
                                                                    let de_ix_data:SwapBaseOutIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::SwapBaseOut(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [195, 75, 104, 72, 253, 176, 183, 160] => {
                                check_min_accounts_req(accounts_len, 8)?;
                                let ix_accounts = SimulateInfoIxAccounts{
                                                                            amm: ix.accounts[0].0.into(),
                                                                            amm_authority: ix.accounts[1].0.into(),
                                                                            amm_open_orders: ix.accounts[2].0.into(),
                                                                            pool_coin_token_account: ix.accounts[3].0.into(),
                                                                            pool_pc_token_account: ix.accounts[4].0.into(),
                                                                            lp_mint_address: ix.accounts[5].0.into(),
                                                                            serum_market: ix.accounts[6].0.into(),
                                                                            serum_event_queue: ix.accounts[7].0.into(),
                                                                    };
                                                                    let de_ix_data:SimulateInfoIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::SimulateInfo(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [151, 90, 110, 217, 196, 223, 251, 95] => {
                                check_min_accounts_req(accounts_len, 17)?;
                                let ix_accounts = AdminCancelOrdersIxAccounts{
                                                                            token_program: ix.accounts[0].0.into(),
                                                                            amm: ix.accounts[1].0.into(),
                                                                            amm_authority: ix.accounts[2].0.into(),
                                                                            amm_open_orders: ix.accounts[3].0.into(),
                                                                            amm_target_orders: ix.accounts[4].0.into(),
                                                                            pool_coin_token_account: ix.accounts[5].0.into(),
                                                                            pool_pc_token_account: ix.accounts[6].0.into(),
                                                                            amm_owner_account: ix.accounts[7].0.into(),
                                                                            amm_config: ix.accounts[8].0.into(),
                                                                            serum_program: ix.accounts[9].0.into(),
                                                                            serum_market: ix.accounts[10].0.into(),
                                                                            serum_coin_vault_account: ix.accounts[11].0.into(),
                                                                            serum_pc_vault_account: ix.accounts[12].0.into(),
                                                                            serum_vault_signer: ix.accounts[13].0.into(),
                                                                            serum_event_q: ix.accounts[14].0.into(),
                                                                            serum_bids: ix.accounts[15].0.into(),
                                                                            serum_asks: ix.accounts[16].0.into(),
                                                                    };
                                                                    let de_ix_data:AdminCancelOrdersIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::AdminCancelOrders(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [190, 227, 122, 84, 73, 166, 40, 100] => {
                                check_min_accounts_req(accounts_len, 5)?;
                                let ix_accounts = CreateConfigAccountIxAccounts{
                                                                            admin: ix.accounts[0].0.into(),
                                                                            amm_config: ix.accounts[1].0.into(),
                                                                            owner: ix.accounts[2].0.into(),
                                                                            system_program: ix.accounts[3].0.into(),
                                                                            rent: ix.accounts[4].0.into(),
                                                                    };
                                                                    Ok(RaydiumAmmProgramIx::CreateConfigAccount(ix_accounts))
                                                            },
                                                                                                                                    [240, 32, 10, 152, 8, 45, 87, 58] => {
                                check_min_accounts_req(accounts_len, 2)?;
                                let ix_accounts = UpdateConfigAccountIxAccounts{
                                                                            admin: ix.accounts[0].0.into(),
                                                                            amm_config: ix.accounts[1].0.into(),
                                                                    };
                                                                    let de_ix_data:UpdateConfigAccountIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(RaydiumAmmProgramIx::UpdateConfigAccount(ix_accounts, de_ix_data))
                                                            },
                                                                            _ => Err(yellowstone_vixen_core::ParseError::from("Invalid Instruction discriminator".to_owned())),
            }
            }

}

pub fn check_min_accounts_req(actual: usize, expected: usize) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

