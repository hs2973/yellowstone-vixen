//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        BatchThawLstAccounts as BatchThawLstAccountsIxAccounts, Initialize as InitializeIxAccounts,
        Restake as RestakeIxAccounts, RestakeInstructionArgs as RestakeIxData,
        Unrestake as UnrestakeIxAccounts, UnrestakeInstructionArgs as UnrestakeIxData,
    },
    ID,
};

/// RestakingProgram Instructions
#[derive(Debug)]
pub enum RestakingProgramProgramIx {
    Initialize(InitializeIxAccounts),
    Restake(RestakeIxAccounts, RestakeIxData),
    Unrestake(UnrestakeIxAccounts, UnrestakeIxData),
    BatchThawLstAccounts(BatchThawLstAccountsIxAccounts),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = RestakingProgramProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "RestakingProgram::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<RestakingProgramProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        match ix_discriminator {
            [175, 175, 109, 31, 13, 152, 155, 237] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = InitializeIxAccounts {
                    signer: ix.accounts[0].0.into(),
                    solayer_admin: ix.accounts[1].0.into(),
                    lst_mint: ix.accounts[2].0.into(),
                    lst_vault: ix.accounts[3].0.into(),
                    rst_mint: ix.accounts[4].0.into(),
                    pool: ix.accounts[5].0.into(),
                    associated_token_program: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                };
                Ok(RestakingProgramProgramIx::Initialize(ix_accounts))
            },
            [97, 161, 241, 167, 6, 32, 213, 53] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = RestakeIxAccounts {
                    signer: ix.accounts[0].0.into(),
                    lst_mint: ix.accounts[1].0.into(),
                    lst_ata: ix.accounts[2].0.into(),
                    rst_ata: ix.accounts[3].0.into(),
                    rst_mint: ix.accounts[4].0.into(),
                    vault: ix.accounts[5].0.into(),
                    pool: ix.accounts[6].0.into(),
                    associated_token_program: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    system_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: RestakeIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RestakingProgramProgramIx::Restake(ix_accounts, de_ix_data))
            },
            [10, 177, 161, 238, 250, 37, 120, 24] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = UnrestakeIxAccounts {
                    signer: ix.accounts[0].0.into(),
                    lst_mint: ix.accounts[1].0.into(),
                    lst_ata: ix.accounts[2].0.into(),
                    rst_ata: ix.accounts[3].0.into(),
                    rst_mint: ix.accounts[4].0.into(),
                    vault: ix.accounts[5].0.into(),
                    pool: ix.accounts[6].0.into(),
                    associated_token_program: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    system_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: UnrestakeIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RestakingProgramProgramIx::Unrestake(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [183, 174, 77, 40, 182, 134, 202, 213] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = BatchThawLstAccountsIxAccounts {
                    signer: ix.accounts[0].0.into(),
                    solayer_admin: ix.accounts[1].0.into(),
                    lst_mint: ix.accounts[2].0.into(),
                    rst_mint: ix.accounts[3].0.into(),
                    pool: ix.accounts[4].0.into(),
                    associated_token_program: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    system_program: ix.accounts[7].0.into(),
                };
                Ok(RestakingProgramProgramIx::BatchThawLstAccounts(ix_accounts))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
