//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct AddLiquidity {
    pub token_swap: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub user_transfer_authority: solana_program::pubkey::Pubkey,

    pub source_a: solana_program::pubkey::Pubkey,

    pub source_b: solana_program::pubkey::Pubkey,

    pub into_a: solana_program::pubkey::Pubkey,

    pub into_b: solana_program::pubkey::Pubkey,

    pub pool_token: solana_program::pubkey::Pubkey,

    pub pool_account: solana_program::pubkey::Pubkey,

    pub mint_a: solana_program::pubkey::Pubkey,

    pub mint_b: solana_program::pubkey::Pubkey,

    pub token_program_id_a: solana_program::pubkey::Pubkey,

    pub token_program_id_b: solana_program::pubkey::Pubkey,

    pub pool_token_program_id: solana_program::pubkey::Pubkey,

    pub swap_program_id: solana_program::pubkey::Pubkey,
}

impl AddLiquidity {
    pub fn instruction(
        &self,
        args: AddLiquidityInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AddLiquidityInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_swap,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_transfer_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.source_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.source_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.into_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.into_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program_id_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program_id_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_token_program_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program_id,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&AddLiquidityInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::FLUXBEAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddLiquidityInstructionData {
    discriminator: u8,
}

impl AddLiquidityInstructionData {
    pub fn new() -> Self { Self { discriminator: 2 } }
}

impl Default for AddLiquidityInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddLiquidityInstructionArgs {
    pub pool_token_amount: u64,
    pub maximum_token_a: u64,
    pub maximum_token_b: u64,
}

/// Instruction builder for `AddLiquidity`.
///
/// ### Accounts:
///
///   0. `[]` token_swap
///   1. `[]` authority
///   2. `[]` user_transfer_authority
///   3. `[]` source_a
///   4. `[]` source_b
///   5. `[]` into_a
///   6. `[]` into_b
///   7. `[]` pool_token
///   8. `[]` pool_account
///   9. `[]` mint_a
///   10. `[]` mint_b
///   11. `[]` token_program_id_a
///   12. `[]` token_program_id_b
///   13. `[]` pool_token_program_id
///   14. `[]` swap_program_id
#[derive(Clone, Debug, Default)]
pub struct AddLiquidityBuilder {
    token_swap: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    user_transfer_authority: Option<solana_program::pubkey::Pubkey>,
    source_a: Option<solana_program::pubkey::Pubkey>,
    source_b: Option<solana_program::pubkey::Pubkey>,
    into_a: Option<solana_program::pubkey::Pubkey>,
    into_b: Option<solana_program::pubkey::Pubkey>,
    pool_token: Option<solana_program::pubkey::Pubkey>,
    pool_account: Option<solana_program::pubkey::Pubkey>,
    mint_a: Option<solana_program::pubkey::Pubkey>,
    mint_b: Option<solana_program::pubkey::Pubkey>,
    token_program_id_a: Option<solana_program::pubkey::Pubkey>,
    token_program_id_b: Option<solana_program::pubkey::Pubkey>,
    pool_token_program_id: Option<solana_program::pubkey::Pubkey>,
    swap_program_id: Option<solana_program::pubkey::Pubkey>,
    pool_token_amount: Option<u64>,
    maximum_token_a: Option<u64>,
    maximum_token_b: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AddLiquidityBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn token_swap(&mut self, token_swap: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_swap = Some(token_swap);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn user_transfer_authority(
        &mut self,
        user_transfer_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_transfer_authority = Some(user_transfer_authority);
        self
    }

    #[inline(always)]
    pub fn source_a(&mut self, source_a: solana_program::pubkey::Pubkey) -> &mut Self {
        self.source_a = Some(source_a);
        self
    }

    #[inline(always)]
    pub fn source_b(&mut self, source_b: solana_program::pubkey::Pubkey) -> &mut Self {
        self.source_b = Some(source_b);
        self
    }

    #[inline(always)]
    pub fn into_a(&mut self, into_a: solana_program::pubkey::Pubkey) -> &mut Self {
        self.into_a = Some(into_a);
        self
    }

    #[inline(always)]
    pub fn into_b(&mut self, into_b: solana_program::pubkey::Pubkey) -> &mut Self {
        self.into_b = Some(into_b);
        self
    }

    #[inline(always)]
    pub fn pool_token(&mut self, pool_token: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_token = Some(pool_token);
        self
    }

    #[inline(always)]
    pub fn pool_account(&mut self, pool_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_account = Some(pool_account);
        self
    }

    #[inline(always)]
    pub fn mint_a(&mut self, mint_a: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_a = Some(mint_a);
        self
    }

    #[inline(always)]
    pub fn mint_b(&mut self, mint_b: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_b = Some(mint_b);
        self
    }

    #[inline(always)]
    pub fn token_program_id_a(
        &mut self,
        token_program_id_a: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_program_id_a = Some(token_program_id_a);
        self
    }

    #[inline(always)]
    pub fn token_program_id_b(
        &mut self,
        token_program_id_b: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_program_id_b = Some(token_program_id_b);
        self
    }

    #[inline(always)]
    pub fn pool_token_program_id(
        &mut self,
        pool_token_program_id: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_token_program_id = Some(pool_token_program_id);
        self
    }

    #[inline(always)]
    pub fn swap_program_id(
        &mut self,
        swap_program_id: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swap_program_id = Some(swap_program_id);
        self
    }

    #[inline(always)]
    pub fn pool_token_amount(&mut self, pool_token_amount: u64) -> &mut Self {
        self.pool_token_amount = Some(pool_token_amount);
        self
    }

    #[inline(always)]
    pub fn maximum_token_a(&mut self, maximum_token_a: u64) -> &mut Self {
        self.maximum_token_a = Some(maximum_token_a);
        self
    }

    #[inline(always)]
    pub fn maximum_token_b(&mut self, maximum_token_b: u64) -> &mut Self {
        self.maximum_token_b = Some(maximum_token_b);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AddLiquidity {
            token_swap: self.token_swap.expect("token_swap is not set"),
            authority: self.authority.expect("authority is not set"),
            user_transfer_authority: self
                .user_transfer_authority
                .expect("user_transfer_authority is not set"),
            source_a: self.source_a.expect("source_a is not set"),
            source_b: self.source_b.expect("source_b is not set"),
            into_a: self.into_a.expect("into_a is not set"),
            into_b: self.into_b.expect("into_b is not set"),
            pool_token: self.pool_token.expect("pool_token is not set"),
            pool_account: self.pool_account.expect("pool_account is not set"),
            mint_a: self.mint_a.expect("mint_a is not set"),
            mint_b: self.mint_b.expect("mint_b is not set"),
            token_program_id_a: self
                .token_program_id_a
                .expect("token_program_id_a is not set"),
            token_program_id_b: self
                .token_program_id_b
                .expect("token_program_id_b is not set"),
            pool_token_program_id: self
                .pool_token_program_id
                .expect("pool_token_program_id is not set"),
            swap_program_id: self.swap_program_id.expect("swap_program_id is not set"),
        };
        let args = AddLiquidityInstructionArgs {
            pool_token_amount: self
                .pool_token_amount
                .clone()
                .expect("pool_token_amount is not set"),
            maximum_token_a: self
                .maximum_token_a
                .clone()
                .expect("maximum_token_a is not set"),
            maximum_token_b: self
                .maximum_token_b
                .clone()
                .expect("maximum_token_b is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `add_liquidity` CPI accounts.
pub struct AddLiquidityCpiAccounts<'a, 'b> {
    pub token_swap: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub into_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub into_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program_id_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program_id_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program_id: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `add_liquidity` CPI instruction.
pub struct AddLiquidityCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_swap: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub into_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub into_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program_id_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program_id_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AddLiquidityInstructionArgs,
}

impl<'a, 'b> AddLiquidityCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AddLiquidityCpiAccounts<'a, 'b>,
        args: AddLiquidityInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            token_swap: accounts.token_swap,
            authority: accounts.authority,
            user_transfer_authority: accounts.user_transfer_authority,
            source_a: accounts.source_a,
            source_b: accounts.source_b,
            into_a: accounts.into_a,
            into_b: accounts.into_b,
            pool_token: accounts.pool_token,
            pool_account: accounts.pool_account,
            mint_a: accounts.mint_a,
            mint_b: accounts.mint_b,
            token_program_id_a: accounts.token_program_id_a,
            token_program_id_b: accounts.token_program_id_b,
            pool_token_program_id: accounts.pool_token_program_id,
            swap_program_id: accounts.swap_program_id,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_swap.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_transfer_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.source_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.source_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.into_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.into_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program_id_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program_id_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_token_program_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program_id.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&AddLiquidityInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::FLUXBEAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.token_swap.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.user_transfer_authority.clone());
        account_infos.push(self.source_a.clone());
        account_infos.push(self.source_b.clone());
        account_infos.push(self.into_a.clone());
        account_infos.push(self.into_b.clone());
        account_infos.push(self.pool_token.clone());
        account_infos.push(self.pool_account.clone());
        account_infos.push(self.mint_a.clone());
        account_infos.push(self.mint_b.clone());
        account_infos.push(self.token_program_id_a.clone());
        account_infos.push(self.token_program_id_b.clone());
        account_infos.push(self.pool_token_program_id.clone());
        account_infos.push(self.swap_program_id.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AddLiquidity` via CPI.
///
/// ### Accounts:
///
///   0. `[]` token_swap
///   1. `[]` authority
///   2. `[]` user_transfer_authority
///   3. `[]` source_a
///   4. `[]` source_b
///   5. `[]` into_a
///   6. `[]` into_b
///   7. `[]` pool_token
///   8. `[]` pool_account
///   9. `[]` mint_a
///   10. `[]` mint_b
///   11. `[]` token_program_id_a
///   12. `[]` token_program_id_b
///   13. `[]` pool_token_program_id
///   14. `[]` swap_program_id
#[derive(Clone, Debug)]
pub struct AddLiquidityCpiBuilder<'a, 'b> {
    instruction: Box<AddLiquidityCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AddLiquidityCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AddLiquidityCpiBuilderInstruction {
            __program: program,
            token_swap: None,
            authority: None,
            user_transfer_authority: None,
            source_a: None,
            source_b: None,
            into_a: None,
            into_b: None,
            pool_token: None,
            pool_account: None,
            mint_a: None,
            mint_b: None,
            token_program_id_a: None,
            token_program_id_b: None,
            pool_token_program_id: None,
            swap_program_id: None,
            pool_token_amount: None,
            maximum_token_a: None,
            maximum_token_b: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn token_swap(
        &mut self,
        token_swap: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_swap = Some(token_swap);
        self
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn user_transfer_authority(
        &mut self,
        user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_transfer_authority = Some(user_transfer_authority);
        self
    }

    #[inline(always)]
    pub fn source_a(
        &mut self,
        source_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_a = Some(source_a);
        self
    }

    #[inline(always)]
    pub fn source_b(
        &mut self,
        source_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_b = Some(source_b);
        self
    }

    #[inline(always)]
    pub fn into_a(
        &mut self,
        into_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.into_a = Some(into_a);
        self
    }

    #[inline(always)]
    pub fn into_b(
        &mut self,
        into_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.into_b = Some(into_b);
        self
    }

    #[inline(always)]
    pub fn pool_token(
        &mut self,
        pool_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_token = Some(pool_token);
        self
    }

    #[inline(always)]
    pub fn pool_account(
        &mut self,
        pool_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_account = Some(pool_account);
        self
    }

    #[inline(always)]
    pub fn mint_a(
        &mut self,
        mint_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_a = Some(mint_a);
        self
    }

    #[inline(always)]
    pub fn mint_b(
        &mut self,
        mint_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_b = Some(mint_b);
        self
    }

    #[inline(always)]
    pub fn token_program_id_a(
        &mut self,
        token_program_id_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program_id_a = Some(token_program_id_a);
        self
    }

    #[inline(always)]
    pub fn token_program_id_b(
        &mut self,
        token_program_id_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program_id_b = Some(token_program_id_b);
        self
    }

    #[inline(always)]
    pub fn pool_token_program_id(
        &mut self,
        pool_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_token_program_id = Some(pool_token_program_id);
        self
    }

    #[inline(always)]
    pub fn swap_program_id(
        &mut self,
        swap_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program_id = Some(swap_program_id);
        self
    }

    #[inline(always)]
    pub fn pool_token_amount(&mut self, pool_token_amount: u64) -> &mut Self {
        self.instruction.pool_token_amount = Some(pool_token_amount);
        self
    }

    #[inline(always)]
    pub fn maximum_token_a(&mut self, maximum_token_a: u64) -> &mut Self {
        self.instruction.maximum_token_a = Some(maximum_token_a);
        self
    }

    #[inline(always)]
    pub fn maximum_token_b(&mut self, maximum_token_b: u64) -> &mut Self {
        self.instruction.maximum_token_b = Some(maximum_token_b);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = AddLiquidityInstructionArgs {
            pool_token_amount: self
                .instruction
                .pool_token_amount
                .clone()
                .expect("pool_token_amount is not set"),
            maximum_token_a: self
                .instruction
                .maximum_token_a
                .clone()
                .expect("maximum_token_a is not set"),
            maximum_token_b: self
                .instruction
                .maximum_token_b
                .clone()
                .expect("maximum_token_b is not set"),
        };
        let instruction = AddLiquidityCpi {
            __program: self.instruction.__program,

            token_swap: self.instruction.token_swap.expect("token_swap is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            user_transfer_authority: self
                .instruction
                .user_transfer_authority
                .expect("user_transfer_authority is not set"),

            source_a: self.instruction.source_a.expect("source_a is not set"),

            source_b: self.instruction.source_b.expect("source_b is not set"),

            into_a: self.instruction.into_a.expect("into_a is not set"),

            into_b: self.instruction.into_b.expect("into_b is not set"),

            pool_token: self.instruction.pool_token.expect("pool_token is not set"),

            pool_account: self
                .instruction
                .pool_account
                .expect("pool_account is not set"),

            mint_a: self.instruction.mint_a.expect("mint_a is not set"),

            mint_b: self.instruction.mint_b.expect("mint_b is not set"),

            token_program_id_a: self
                .instruction
                .token_program_id_a
                .expect("token_program_id_a is not set"),

            token_program_id_b: self
                .instruction
                .token_program_id_b
                .expect("token_program_id_b is not set"),

            pool_token_program_id: self
                .instruction
                .pool_token_program_id
                .expect("pool_token_program_id is not set"),

            swap_program_id: self
                .instruction
                .swap_program_id
                .expect("swap_program_id is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AddLiquidityCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    token_swap: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_transfer_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    into_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    into_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program_id_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program_id_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_token_program_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_program_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_token_amount: Option<u64>,
    maximum_token_a: Option<u64>,
    maximum_token_b: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
