//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CreatePool {
    pub authority: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub pool_authority: solana_program::pubkey::Pubkey,

    pub mint_a: solana_program::pubkey::Pubkey,

    pub mint_b: solana_program::pubkey::Pubkey,

    pub token_account_a: solana_program::pubkey::Pubkey,

    pub token_account_b: solana_program::pubkey::Pubkey,

    pub pool_lp_mint: solana_program::pubkey::Pubkey,

    pub fee_account: solana_program::pubkey::Pubkey,

    pub token_account_pool: solana_program::pubkey::Pubkey,

    pub mint_a_token_program: solana_program::pubkey::Pubkey,

    pub mint_b_token_program: solana_program::pubkey::Pubkey,

    pub pool_token_program_id: solana_program::pubkey::Pubkey,

    pub swap_program_id: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl CreatePool {
    pub fn instruction(
        &self,
        args: CreatePoolInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreatePoolInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(17 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.payer, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_account_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_account_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_account_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_a_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_b_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_token_program_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreatePoolInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::FLUXBEAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePoolInstructionData {
    discriminator: u8,
}

impl CreatePoolInstructionData {
    pub fn new() -> Self { Self { discriminator: 0 } }
}

impl Default for CreatePoolInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePoolInstructionArgs {
    pub trade_fee_numerator: u64,
    pub trade_fee_denominator: u64,
    pub owner_trade_fee_numerator: u64,
    pub owner_trade_fee_denominator: u64,
    pub owner_withdraw_fee_numerator: u64,
    pub owner_withdraw_fee_denominator: u64,
    pub host_fee_numerator: u64,
    pub host_fee_denominator: u64,
    pub curve_type: u8,
    pub curve_parameters: [u8; 32],
}

/// Instruction builder for `CreatePool`.
///
/// ### Accounts:
///
///   0. `[]` authority
///   1. `[]` payer
///   2. `[]` pool
///   3. `[]` pool_authority
///   4. `[]` mint_a
///   5. `[]` mint_b
///   6. `[]` token_account_a
///   7. `[]` token_account_b
///   8. `[]` pool_lp_mint
///   9. `[]` fee_account
///   10. `[]` token_account_pool
///   11. `[]` mint_a_token_program
///   12. `[]` mint_b_token_program
///   13. `[]` pool_token_program_id
///   14. `[]` swap_program_id
///   15. `[]` associated_token_program
///   16. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreatePoolBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    pool_authority: Option<solana_program::pubkey::Pubkey>,
    mint_a: Option<solana_program::pubkey::Pubkey>,
    mint_b: Option<solana_program::pubkey::Pubkey>,
    token_account_a: Option<solana_program::pubkey::Pubkey>,
    token_account_b: Option<solana_program::pubkey::Pubkey>,
    pool_lp_mint: Option<solana_program::pubkey::Pubkey>,
    fee_account: Option<solana_program::pubkey::Pubkey>,
    token_account_pool: Option<solana_program::pubkey::Pubkey>,
    mint_a_token_program: Option<solana_program::pubkey::Pubkey>,
    mint_b_token_program: Option<solana_program::pubkey::Pubkey>,
    pool_token_program_id: Option<solana_program::pubkey::Pubkey>,
    swap_program_id: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    trade_fee_numerator: Option<u64>,
    trade_fee_denominator: Option<u64>,
    owner_trade_fee_numerator: Option<u64>,
    owner_trade_fee_denominator: Option<u64>,
    owner_withdraw_fee_numerator: Option<u64>,
    owner_withdraw_fee_denominator: Option<u64>,
    host_fee_numerator: Option<u64>,
    host_fee_denominator: Option<u64>,
    curve_type: Option<u8>,
    curve_parameters: Option<[u8; 32]>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreatePoolBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn pool_authority(&mut self, pool_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_authority = Some(pool_authority);
        self
    }

    #[inline(always)]
    pub fn mint_a(&mut self, mint_a: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_a = Some(mint_a);
        self
    }

    #[inline(always)]
    pub fn mint_b(&mut self, mint_b: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_b = Some(mint_b);
        self
    }

    #[inline(always)]
    pub fn token_account_a(
        &mut self,
        token_account_a: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_account_a = Some(token_account_a);
        self
    }

    #[inline(always)]
    pub fn token_account_b(
        &mut self,
        token_account_b: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_account_b = Some(token_account_b);
        self
    }

    #[inline(always)]
    pub fn pool_lp_mint(&mut self, pool_lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_lp_mint = Some(pool_lp_mint);
        self
    }

    #[inline(always)]
    pub fn fee_account(&mut self, fee_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_account = Some(fee_account);
        self
    }

    #[inline(always)]
    pub fn token_account_pool(
        &mut self,
        token_account_pool: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_account_pool = Some(token_account_pool);
        self
    }

    #[inline(always)]
    pub fn mint_a_token_program(
        &mut self,
        mint_a_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.mint_a_token_program = Some(mint_a_token_program);
        self
    }

    #[inline(always)]
    pub fn mint_b_token_program(
        &mut self,
        mint_b_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.mint_b_token_program = Some(mint_b_token_program);
        self
    }

    #[inline(always)]
    pub fn pool_token_program_id(
        &mut self,
        pool_token_program_id: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_token_program_id = Some(pool_token_program_id);
        self
    }

    #[inline(always)]
    pub fn swap_program_id(
        &mut self,
        swap_program_id: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swap_program_id = Some(swap_program_id);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn trade_fee_numerator(&mut self, trade_fee_numerator: u64) -> &mut Self {
        self.trade_fee_numerator = Some(trade_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn trade_fee_denominator(&mut self, trade_fee_denominator: u64) -> &mut Self {
        self.trade_fee_denominator = Some(trade_fee_denominator);
        self
    }

    #[inline(always)]
    pub fn owner_trade_fee_numerator(&mut self, owner_trade_fee_numerator: u64) -> &mut Self {
        self.owner_trade_fee_numerator = Some(owner_trade_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn owner_trade_fee_denominator(&mut self, owner_trade_fee_denominator: u64) -> &mut Self {
        self.owner_trade_fee_denominator = Some(owner_trade_fee_denominator);
        self
    }

    #[inline(always)]
    pub fn owner_withdraw_fee_numerator(&mut self, owner_withdraw_fee_numerator: u64) -> &mut Self {
        self.owner_withdraw_fee_numerator = Some(owner_withdraw_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn owner_withdraw_fee_denominator(
        &mut self,
        owner_withdraw_fee_denominator: u64,
    ) -> &mut Self {
        self.owner_withdraw_fee_denominator = Some(owner_withdraw_fee_denominator);
        self
    }

    #[inline(always)]
    pub fn host_fee_numerator(&mut self, host_fee_numerator: u64) -> &mut Self {
        self.host_fee_numerator = Some(host_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn host_fee_denominator(&mut self, host_fee_denominator: u64) -> &mut Self {
        self.host_fee_denominator = Some(host_fee_denominator);
        self
    }

    #[inline(always)]
    pub fn curve_type(&mut self, curve_type: u8) -> &mut Self {
        self.curve_type = Some(curve_type);
        self
    }

    #[inline(always)]
    pub fn curve_parameters(&mut self, curve_parameters: [u8; 32]) -> &mut Self {
        self.curve_parameters = Some(curve_parameters);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreatePool {
            authority: self.authority.expect("authority is not set"),
            payer: self.payer.expect("payer is not set"),
            pool: self.pool.expect("pool is not set"),
            pool_authority: self.pool_authority.expect("pool_authority is not set"),
            mint_a: self.mint_a.expect("mint_a is not set"),
            mint_b: self.mint_b.expect("mint_b is not set"),
            token_account_a: self.token_account_a.expect("token_account_a is not set"),
            token_account_b: self.token_account_b.expect("token_account_b is not set"),
            pool_lp_mint: self.pool_lp_mint.expect("pool_lp_mint is not set"),
            fee_account: self.fee_account.expect("fee_account is not set"),
            token_account_pool: self
                .token_account_pool
                .expect("token_account_pool is not set"),
            mint_a_token_program: self
                .mint_a_token_program
                .expect("mint_a_token_program is not set"),
            mint_b_token_program: self
                .mint_b_token_program
                .expect("mint_b_token_program is not set"),
            pool_token_program_id: self
                .pool_token_program_id
                .expect("pool_token_program_id is not set"),
            swap_program_id: self.swap_program_id.expect("swap_program_id is not set"),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = CreatePoolInstructionArgs {
            trade_fee_numerator: self
                .trade_fee_numerator
                .clone()
                .expect("trade_fee_numerator is not set"),
            trade_fee_denominator: self
                .trade_fee_denominator
                .clone()
                .expect("trade_fee_denominator is not set"),
            owner_trade_fee_numerator: self
                .owner_trade_fee_numerator
                .clone()
                .expect("owner_trade_fee_numerator is not set"),
            owner_trade_fee_denominator: self
                .owner_trade_fee_denominator
                .clone()
                .expect("owner_trade_fee_denominator is not set"),
            owner_withdraw_fee_numerator: self
                .owner_withdraw_fee_numerator
                .clone()
                .expect("owner_withdraw_fee_numerator is not set"),
            owner_withdraw_fee_denominator: self
                .owner_withdraw_fee_denominator
                .clone()
                .expect("owner_withdraw_fee_denominator is not set"),
            host_fee_numerator: self
                .host_fee_numerator
                .clone()
                .expect("host_fee_numerator is not set"),
            host_fee_denominator: self
                .host_fee_denominator
                .clone()
                .expect("host_fee_denominator is not set"),
            curve_type: self.curve_type.clone().expect("curve_type is not set"),
            curve_parameters: self
                .curve_parameters
                .clone()
                .expect("curve_parameters is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_pool` CPI accounts.
pub struct CreatePoolCpiAccounts<'a, 'b> {
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_account_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_account_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_account_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_pool` CPI instruction.
pub struct CreatePoolCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_account_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_account_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_account_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreatePoolInstructionArgs,
}

impl<'a, 'b> CreatePoolCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreatePoolCpiAccounts<'a, 'b>,
        args: CreatePoolInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            payer: accounts.payer,
            pool: accounts.pool,
            pool_authority: accounts.pool_authority,
            mint_a: accounts.mint_a,
            mint_b: accounts.mint_b,
            token_account_a: accounts.token_account_a,
            token_account_b: accounts.token_account_b,
            pool_lp_mint: accounts.pool_lp_mint,
            fee_account: accounts.fee_account,
            token_account_pool: accounts.token_account_pool,
            mint_a_token_program: accounts.mint_a_token_program,
            mint_b_token_program: accounts.mint_b_token_program,
            pool_token_program_id: accounts.pool_token_program_id,
            swap_program_id: accounts.swap_program_id,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(17 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.payer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_account_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_account_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_account_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_a_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_b_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_token_program_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreatePoolInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::FLUXBEAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(18 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.pool_authority.clone());
        account_infos.push(self.mint_a.clone());
        account_infos.push(self.mint_b.clone());
        account_infos.push(self.token_account_a.clone());
        account_infos.push(self.token_account_b.clone());
        account_infos.push(self.pool_lp_mint.clone());
        account_infos.push(self.fee_account.clone());
        account_infos.push(self.token_account_pool.clone());
        account_infos.push(self.mint_a_token_program.clone());
        account_infos.push(self.mint_b_token_program.clone());
        account_infos.push(self.pool_token_program_id.clone());
        account_infos.push(self.swap_program_id.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreatePool` via CPI.
///
/// ### Accounts:
///
///   0. `[]` authority
///   1. `[]` payer
///   2. `[]` pool
///   3. `[]` pool_authority
///   4. `[]` mint_a
///   5. `[]` mint_b
///   6. `[]` token_account_a
///   7. `[]` token_account_b
///   8. `[]` pool_lp_mint
///   9. `[]` fee_account
///   10. `[]` token_account_pool
///   11. `[]` mint_a_token_program
///   12. `[]` mint_b_token_program
///   13. `[]` pool_token_program_id
///   14. `[]` swap_program_id
///   15. `[]` associated_token_program
///   16. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreatePoolCpiBuilder<'a, 'b> {
    instruction: Box<CreatePoolCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreatePoolCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreatePoolCpiBuilderInstruction {
            __program: program,
            authority: None,
            payer: None,
            pool: None,
            pool_authority: None,
            mint_a: None,
            mint_b: None,
            token_account_a: None,
            token_account_b: None,
            pool_lp_mint: None,
            fee_account: None,
            token_account_pool: None,
            mint_a_token_program: None,
            mint_b_token_program: None,
            pool_token_program_id: None,
            swap_program_id: None,
            associated_token_program: None,
            system_program: None,
            trade_fee_numerator: None,
            trade_fee_denominator: None,
            owner_trade_fee_numerator: None,
            owner_trade_fee_denominator: None,
            owner_withdraw_fee_numerator: None,
            owner_withdraw_fee_denominator: None,
            host_fee_numerator: None,
            host_fee_denominator: None,
            curve_type: None,
            curve_parameters: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn pool_authority(
        &mut self,
        pool_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_authority = Some(pool_authority);
        self
    }

    #[inline(always)]
    pub fn mint_a(
        &mut self,
        mint_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_a = Some(mint_a);
        self
    }

    #[inline(always)]
    pub fn mint_b(
        &mut self,
        mint_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_b = Some(mint_b);
        self
    }

    #[inline(always)]
    pub fn token_account_a(
        &mut self,
        token_account_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_account_a = Some(token_account_a);
        self
    }

    #[inline(always)]
    pub fn token_account_b(
        &mut self,
        token_account_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_account_b = Some(token_account_b);
        self
    }

    #[inline(always)]
    pub fn pool_lp_mint(
        &mut self,
        pool_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_lp_mint = Some(pool_lp_mint);
        self
    }

    #[inline(always)]
    pub fn fee_account(
        &mut self,
        fee_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_account = Some(fee_account);
        self
    }

    #[inline(always)]
    pub fn token_account_pool(
        &mut self,
        token_account_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_account_pool = Some(token_account_pool);
        self
    }

    #[inline(always)]
    pub fn mint_a_token_program(
        &mut self,
        mint_a_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_a_token_program = Some(mint_a_token_program);
        self
    }

    #[inline(always)]
    pub fn mint_b_token_program(
        &mut self,
        mint_b_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_b_token_program = Some(mint_b_token_program);
        self
    }

    #[inline(always)]
    pub fn pool_token_program_id(
        &mut self,
        pool_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_token_program_id = Some(pool_token_program_id);
        self
    }

    #[inline(always)]
    pub fn swap_program_id(
        &mut self,
        swap_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program_id = Some(swap_program_id);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn trade_fee_numerator(&mut self, trade_fee_numerator: u64) -> &mut Self {
        self.instruction.trade_fee_numerator = Some(trade_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn trade_fee_denominator(&mut self, trade_fee_denominator: u64) -> &mut Self {
        self.instruction.trade_fee_denominator = Some(trade_fee_denominator);
        self
    }

    #[inline(always)]
    pub fn owner_trade_fee_numerator(&mut self, owner_trade_fee_numerator: u64) -> &mut Self {
        self.instruction.owner_trade_fee_numerator = Some(owner_trade_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn owner_trade_fee_denominator(&mut self, owner_trade_fee_denominator: u64) -> &mut Self {
        self.instruction.owner_trade_fee_denominator = Some(owner_trade_fee_denominator);
        self
    }

    #[inline(always)]
    pub fn owner_withdraw_fee_numerator(&mut self, owner_withdraw_fee_numerator: u64) -> &mut Self {
        self.instruction.owner_withdraw_fee_numerator = Some(owner_withdraw_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn owner_withdraw_fee_denominator(
        &mut self,
        owner_withdraw_fee_denominator: u64,
    ) -> &mut Self {
        self.instruction.owner_withdraw_fee_denominator = Some(owner_withdraw_fee_denominator);
        self
    }

    #[inline(always)]
    pub fn host_fee_numerator(&mut self, host_fee_numerator: u64) -> &mut Self {
        self.instruction.host_fee_numerator = Some(host_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn host_fee_denominator(&mut self, host_fee_denominator: u64) -> &mut Self {
        self.instruction.host_fee_denominator = Some(host_fee_denominator);
        self
    }

    #[inline(always)]
    pub fn curve_type(&mut self, curve_type: u8) -> &mut Self {
        self.instruction.curve_type = Some(curve_type);
        self
    }

    #[inline(always)]
    pub fn curve_parameters(&mut self, curve_parameters: [u8; 32]) -> &mut Self {
        self.instruction.curve_parameters = Some(curve_parameters);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreatePoolInstructionArgs {
            trade_fee_numerator: self
                .instruction
                .trade_fee_numerator
                .clone()
                .expect("trade_fee_numerator is not set"),
            trade_fee_denominator: self
                .instruction
                .trade_fee_denominator
                .clone()
                .expect("trade_fee_denominator is not set"),
            owner_trade_fee_numerator: self
                .instruction
                .owner_trade_fee_numerator
                .clone()
                .expect("owner_trade_fee_numerator is not set"),
            owner_trade_fee_denominator: self
                .instruction
                .owner_trade_fee_denominator
                .clone()
                .expect("owner_trade_fee_denominator is not set"),
            owner_withdraw_fee_numerator: self
                .instruction
                .owner_withdraw_fee_numerator
                .clone()
                .expect("owner_withdraw_fee_numerator is not set"),
            owner_withdraw_fee_denominator: self
                .instruction
                .owner_withdraw_fee_denominator
                .clone()
                .expect("owner_withdraw_fee_denominator is not set"),
            host_fee_numerator: self
                .instruction
                .host_fee_numerator
                .clone()
                .expect("host_fee_numerator is not set"),
            host_fee_denominator: self
                .instruction
                .host_fee_denominator
                .clone()
                .expect("host_fee_denominator is not set"),
            curve_type: self
                .instruction
                .curve_type
                .clone()
                .expect("curve_type is not set"),
            curve_parameters: self
                .instruction
                .curve_parameters
                .clone()
                .expect("curve_parameters is not set"),
        };
        let instruction = CreatePoolCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            pool_authority: self
                .instruction
                .pool_authority
                .expect("pool_authority is not set"),

            mint_a: self.instruction.mint_a.expect("mint_a is not set"),

            mint_b: self.instruction.mint_b.expect("mint_b is not set"),

            token_account_a: self
                .instruction
                .token_account_a
                .expect("token_account_a is not set"),

            token_account_b: self
                .instruction
                .token_account_b
                .expect("token_account_b is not set"),

            pool_lp_mint: self
                .instruction
                .pool_lp_mint
                .expect("pool_lp_mint is not set"),

            fee_account: self
                .instruction
                .fee_account
                .expect("fee_account is not set"),

            token_account_pool: self
                .instruction
                .token_account_pool
                .expect("token_account_pool is not set"),

            mint_a_token_program: self
                .instruction
                .mint_a_token_program
                .expect("mint_a_token_program is not set"),

            mint_b_token_program: self
                .instruction
                .mint_b_token_program
                .expect("mint_b_token_program is not set"),

            pool_token_program_id: self
                .instruction
                .pool_token_program_id
                .expect("pool_token_program_id is not set"),

            swap_program_id: self
                .instruction
                .swap_program_id
                .expect("swap_program_id is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreatePoolCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_account_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_account_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_account_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_a_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_b_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_token_program_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_program_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    trade_fee_numerator: Option<u64>,
    trade_fee_denominator: Option<u64>,
    owner_trade_fee_numerator: Option<u64>,
    owner_trade_fee_denominator: Option<u64>,
    owner_withdraw_fee_numerator: Option<u64>,
    owner_withdraw_fee_denominator: Option<u64>,
    host_fee_numerator: Option<u64>,
    host_fee_denominator: Option<u64>,
    curve_type: Option<u8>,
    curve_parameters: Option<[u8; 32]>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
