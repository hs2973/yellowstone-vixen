//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct Swap {
    pub token_swap: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub user_transfer_authority: solana_program::pubkey::Pubkey,

    pub user_source: solana_program::pubkey::Pubkey,

    pub pool_source: solana_program::pubkey::Pubkey,

    pub pool_destination: solana_program::pubkey::Pubkey,

    pub user_destination: solana_program::pubkey::Pubkey,

    pub pool_mint: solana_program::pubkey::Pubkey,

    pub fee_account: solana_program::pubkey::Pubkey,

    pub host_fee_account: solana_program::pubkey::Pubkey,

    pub source_mint: solana_program::pubkey::Pubkey,

    pub destination_mint: solana_program::pubkey::Pubkey,

    pub source_token_program_id: solana_program::pubkey::Pubkey,

    pub destination_token_program_id: solana_program::pubkey::Pubkey,

    pub pool_token_program_id: solana_program::pubkey::Pubkey,

    pub swap_program_id: solana_program::pubkey::Pubkey,
}

impl Swap {
    pub fn instruction(
        &self,
        args: SwapInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SwapInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_swap,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_transfer_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_source,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_source,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_destination,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_destination,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.host_fee_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.source_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.destination_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.source_token_program_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.destination_token_program_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_token_program_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program_id,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&SwapInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::FLUXBEAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapInstructionData {
    discriminator: u8,
}

impl SwapInstructionData {
    pub fn new() -> Self { Self { discriminator: 1 } }
}

impl Default for SwapInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapInstructionArgs {
    pub amount_in: u64,
    pub minimum_amount_out: u64,
}

/// Instruction builder for `Swap`.
///
/// ### Accounts:
///
///   0. `[]` token_swap
///   1. `[]` authority
///   2. `[]` user_transfer_authority
///   3. `[]` user_source
///   4. `[]` pool_source
///   5. `[]` pool_destination
///   6. `[]` user_destination
///   7. `[]` pool_mint
///   8. `[]` fee_account
///   9. `[]` host_fee_account
///   10. `[]` source_mint
///   11. `[]` destination_mint
///   12. `[]` source_token_program_id
///   13. `[]` destination_token_program_id
///   14. `[]` pool_token_program_id
///   15. `[]` swap_program_id
#[derive(Clone, Debug, Default)]
pub struct SwapBuilder {
    token_swap: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    user_transfer_authority: Option<solana_program::pubkey::Pubkey>,
    user_source: Option<solana_program::pubkey::Pubkey>,
    pool_source: Option<solana_program::pubkey::Pubkey>,
    pool_destination: Option<solana_program::pubkey::Pubkey>,
    user_destination: Option<solana_program::pubkey::Pubkey>,
    pool_mint: Option<solana_program::pubkey::Pubkey>,
    fee_account: Option<solana_program::pubkey::Pubkey>,
    host_fee_account: Option<solana_program::pubkey::Pubkey>,
    source_mint: Option<solana_program::pubkey::Pubkey>,
    destination_mint: Option<solana_program::pubkey::Pubkey>,
    source_token_program_id: Option<solana_program::pubkey::Pubkey>,
    destination_token_program_id: Option<solana_program::pubkey::Pubkey>,
    pool_token_program_id: Option<solana_program::pubkey::Pubkey>,
    swap_program_id: Option<solana_program::pubkey::Pubkey>,
    amount_in: Option<u64>,
    minimum_amount_out: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SwapBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn token_swap(&mut self, token_swap: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_swap = Some(token_swap);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn user_transfer_authority(
        &mut self,
        user_transfer_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_transfer_authority = Some(user_transfer_authority);
        self
    }

    #[inline(always)]
    pub fn user_source(&mut self, user_source: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_source = Some(user_source);
        self
    }

    #[inline(always)]
    pub fn pool_source(&mut self, pool_source: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_source = Some(pool_source);
        self
    }

    #[inline(always)]
    pub fn pool_destination(
        &mut self,
        pool_destination: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_destination = Some(pool_destination);
        self
    }

    #[inline(always)]
    pub fn user_destination(
        &mut self,
        user_destination: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_destination = Some(user_destination);
        self
    }

    #[inline(always)]
    pub fn pool_mint(&mut self, pool_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_mint = Some(pool_mint);
        self
    }

    #[inline(always)]
    pub fn fee_account(&mut self, fee_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_account = Some(fee_account);
        self
    }

    #[inline(always)]
    pub fn host_fee_account(
        &mut self,
        host_fee_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.host_fee_account = Some(host_fee_account);
        self
    }

    #[inline(always)]
    pub fn source_mint(&mut self, source_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.source_mint = Some(source_mint);
        self
    }

    #[inline(always)]
    pub fn destination_mint(
        &mut self,
        destination_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.destination_mint = Some(destination_mint);
        self
    }

    #[inline(always)]
    pub fn source_token_program_id(
        &mut self,
        source_token_program_id: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.source_token_program_id = Some(source_token_program_id);
        self
    }

    #[inline(always)]
    pub fn destination_token_program_id(
        &mut self,
        destination_token_program_id: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.destination_token_program_id = Some(destination_token_program_id);
        self
    }

    #[inline(always)]
    pub fn pool_token_program_id(
        &mut self,
        pool_token_program_id: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_token_program_id = Some(pool_token_program_id);
        self
    }

    #[inline(always)]
    pub fn swap_program_id(
        &mut self,
        swap_program_id: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swap_program_id = Some(swap_program_id);
        self
    }

    #[inline(always)]
    pub fn amount_in(&mut self, amount_in: u64) -> &mut Self {
        self.amount_in = Some(amount_in);
        self
    }

    #[inline(always)]
    pub fn minimum_amount_out(&mut self, minimum_amount_out: u64) -> &mut Self {
        self.minimum_amount_out = Some(minimum_amount_out);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Swap {
            token_swap: self.token_swap.expect("token_swap is not set"),
            authority: self.authority.expect("authority is not set"),
            user_transfer_authority: self
                .user_transfer_authority
                .expect("user_transfer_authority is not set"),
            user_source: self.user_source.expect("user_source is not set"),
            pool_source: self.pool_source.expect("pool_source is not set"),
            pool_destination: self.pool_destination.expect("pool_destination is not set"),
            user_destination: self.user_destination.expect("user_destination is not set"),
            pool_mint: self.pool_mint.expect("pool_mint is not set"),
            fee_account: self.fee_account.expect("fee_account is not set"),
            host_fee_account: self.host_fee_account.expect("host_fee_account is not set"),
            source_mint: self.source_mint.expect("source_mint is not set"),
            destination_mint: self.destination_mint.expect("destination_mint is not set"),
            source_token_program_id: self
                .source_token_program_id
                .expect("source_token_program_id is not set"),
            destination_token_program_id: self
                .destination_token_program_id
                .expect("destination_token_program_id is not set"),
            pool_token_program_id: self
                .pool_token_program_id
                .expect("pool_token_program_id is not set"),
            swap_program_id: self.swap_program_id.expect("swap_program_id is not set"),
        };
        let args = SwapInstructionArgs {
            amount_in: self.amount_in.clone().expect("amount_in is not set"),
            minimum_amount_out: self
                .minimum_amount_out
                .clone()
                .expect("minimum_amount_out is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `swap` CPI accounts.
pub struct SwapCpiAccounts<'a, 'b> {
    pub token_swap: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_source: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_source: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub host_fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program_id: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `swap` CPI instruction.
pub struct SwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_swap: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_source: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_source: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub host_fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SwapInstructionArgs,
}

impl<'a, 'b> SwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SwapCpiAccounts<'a, 'b>,
        args: SwapInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            token_swap: accounts.token_swap,
            authority: accounts.authority,
            user_transfer_authority: accounts.user_transfer_authority,
            user_source: accounts.user_source,
            pool_source: accounts.pool_source,
            pool_destination: accounts.pool_destination,
            user_destination: accounts.user_destination,
            pool_mint: accounts.pool_mint,
            fee_account: accounts.fee_account,
            host_fee_account: accounts.host_fee_account,
            source_mint: accounts.source_mint,
            destination_mint: accounts.destination_mint,
            source_token_program_id: accounts.source_token_program_id,
            destination_token_program_id: accounts.destination_token_program_id,
            pool_token_program_id: accounts.pool_token_program_id,
            swap_program_id: accounts.swap_program_id,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_swap.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_transfer_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_source.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_source.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_destination.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_destination.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.host_fee_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.source_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.destination_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.source_token_program_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.destination_token_program_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_token_program_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program_id.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&SwapInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::FLUXBEAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(17 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.token_swap.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.user_transfer_authority.clone());
        account_infos.push(self.user_source.clone());
        account_infos.push(self.pool_source.clone());
        account_infos.push(self.pool_destination.clone());
        account_infos.push(self.user_destination.clone());
        account_infos.push(self.pool_mint.clone());
        account_infos.push(self.fee_account.clone());
        account_infos.push(self.host_fee_account.clone());
        account_infos.push(self.source_mint.clone());
        account_infos.push(self.destination_mint.clone());
        account_infos.push(self.source_token_program_id.clone());
        account_infos.push(self.destination_token_program_id.clone());
        account_infos.push(self.pool_token_program_id.clone());
        account_infos.push(self.swap_program_id.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Swap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` token_swap
///   1. `[]` authority
///   2. `[]` user_transfer_authority
///   3. `[]` user_source
///   4. `[]` pool_source
///   5. `[]` pool_destination
///   6. `[]` user_destination
///   7. `[]` pool_mint
///   8. `[]` fee_account
///   9. `[]` host_fee_account
///   10. `[]` source_mint
///   11. `[]` destination_mint
///   12. `[]` source_token_program_id
///   13. `[]` destination_token_program_id
///   14. `[]` pool_token_program_id
///   15. `[]` swap_program_id
#[derive(Clone, Debug)]
pub struct SwapCpiBuilder<'a, 'b> {
    instruction: Box<SwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SwapCpiBuilderInstruction {
            __program: program,
            token_swap: None,
            authority: None,
            user_transfer_authority: None,
            user_source: None,
            pool_source: None,
            pool_destination: None,
            user_destination: None,
            pool_mint: None,
            fee_account: None,
            host_fee_account: None,
            source_mint: None,
            destination_mint: None,
            source_token_program_id: None,
            destination_token_program_id: None,
            pool_token_program_id: None,
            swap_program_id: None,
            amount_in: None,
            minimum_amount_out: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn token_swap(
        &mut self,
        token_swap: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_swap = Some(token_swap);
        self
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn user_transfer_authority(
        &mut self,
        user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_transfer_authority = Some(user_transfer_authority);
        self
    }

    #[inline(always)]
    pub fn user_source(
        &mut self,
        user_source: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_source = Some(user_source);
        self
    }

    #[inline(always)]
    pub fn pool_source(
        &mut self,
        pool_source: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_source = Some(pool_source);
        self
    }

    #[inline(always)]
    pub fn pool_destination(
        &mut self,
        pool_destination: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_destination = Some(pool_destination);
        self
    }

    #[inline(always)]
    pub fn user_destination(
        &mut self,
        user_destination: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_destination = Some(user_destination);
        self
    }

    #[inline(always)]
    pub fn pool_mint(
        &mut self,
        pool_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_mint = Some(pool_mint);
        self
    }

    #[inline(always)]
    pub fn fee_account(
        &mut self,
        fee_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_account = Some(fee_account);
        self
    }

    #[inline(always)]
    pub fn host_fee_account(
        &mut self,
        host_fee_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.host_fee_account = Some(host_fee_account);
        self
    }

    #[inline(always)]
    pub fn source_mint(
        &mut self,
        source_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_mint = Some(source_mint);
        self
    }

    #[inline(always)]
    pub fn destination_mint(
        &mut self,
        destination_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_mint = Some(destination_mint);
        self
    }

    #[inline(always)]
    pub fn source_token_program_id(
        &mut self,
        source_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_token_program_id = Some(source_token_program_id);
        self
    }

    #[inline(always)]
    pub fn destination_token_program_id(
        &mut self,
        destination_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_token_program_id = Some(destination_token_program_id);
        self
    }

    #[inline(always)]
    pub fn pool_token_program_id(
        &mut self,
        pool_token_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_token_program_id = Some(pool_token_program_id);
        self
    }

    #[inline(always)]
    pub fn swap_program_id(
        &mut self,
        swap_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program_id = Some(swap_program_id);
        self
    }

    #[inline(always)]
    pub fn amount_in(&mut self, amount_in: u64) -> &mut Self {
        self.instruction.amount_in = Some(amount_in);
        self
    }

    #[inline(always)]
    pub fn minimum_amount_out(&mut self, minimum_amount_out: u64) -> &mut Self {
        self.instruction.minimum_amount_out = Some(minimum_amount_out);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SwapInstructionArgs {
            amount_in: self
                .instruction
                .amount_in
                .clone()
                .expect("amount_in is not set"),
            minimum_amount_out: self
                .instruction
                .minimum_amount_out
                .clone()
                .expect("minimum_amount_out is not set"),
        };
        let instruction = SwapCpi {
            __program: self.instruction.__program,

            token_swap: self.instruction.token_swap.expect("token_swap is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            user_transfer_authority: self
                .instruction
                .user_transfer_authority
                .expect("user_transfer_authority is not set"),

            user_source: self
                .instruction
                .user_source
                .expect("user_source is not set"),

            pool_source: self
                .instruction
                .pool_source
                .expect("pool_source is not set"),

            pool_destination: self
                .instruction
                .pool_destination
                .expect("pool_destination is not set"),

            user_destination: self
                .instruction
                .user_destination
                .expect("user_destination is not set"),

            pool_mint: self.instruction.pool_mint.expect("pool_mint is not set"),

            fee_account: self
                .instruction
                .fee_account
                .expect("fee_account is not set"),

            host_fee_account: self
                .instruction
                .host_fee_account
                .expect("host_fee_account is not set"),

            source_mint: self
                .instruction
                .source_mint
                .expect("source_mint is not set"),

            destination_mint: self
                .instruction
                .destination_mint
                .expect("destination_mint is not set"),

            source_token_program_id: self
                .instruction
                .source_token_program_id
                .expect("source_token_program_id is not set"),

            destination_token_program_id: self
                .instruction
                .destination_token_program_id
                .expect("destination_token_program_id is not set"),

            pool_token_program_id: self
                .instruction
                .pool_token_program_id
                .expect("pool_token_program_id is not set"),

            swap_program_id: self
                .instruction
                .swap_program_id
                .expect("swap_program_id is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    token_swap: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_transfer_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_source: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_source: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_destination: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_destination: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    host_fee_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    destination_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source_token_program_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    destination_token_program_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_token_program_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_program_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amount_in: Option<u64>,
    minimum_amount_out: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
