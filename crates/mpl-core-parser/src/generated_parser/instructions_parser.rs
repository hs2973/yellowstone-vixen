//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// use borsh::BorshDeserialize;

use crate::{
    instructions::{
        AddCollectionExternalPluginAdapterV1 as AddCollectionExternalPluginAdapterV1IxAccounts,
        AddCollectionExternalPluginAdapterV1InstructionArgs as AddCollectionExternalPluginAdapterV1IxData,
        AddCollectionPluginV1 as AddCollectionPluginV1IxAccounts,
        AddCollectionPluginV1InstructionArgs as AddCollectionPluginV1IxData,
        AddExternalPluginAdapterV1 as AddExternalPluginAdapterV1IxAccounts,
        AddExternalPluginAdapterV1InstructionArgs as AddExternalPluginAdapterV1IxData,
        AddPluginV1 as AddPluginV1IxAccounts, AddPluginV1InstructionArgs as AddPluginV1IxData,
        ApproveCollectionPluginAuthorityV1 as ApproveCollectionPluginAuthorityV1IxAccounts,
        ApproveCollectionPluginAuthorityV1InstructionArgs as ApproveCollectionPluginAuthorityV1IxData,
        ApprovePluginAuthorityV1 as ApprovePluginAuthorityV1IxAccounts,
        ApprovePluginAuthorityV1InstructionArgs as ApprovePluginAuthorityV1IxData,
        BurnCollectionV1 as BurnCollectionV1IxAccounts,
        BurnCollectionV1InstructionArgs as BurnCollectionV1IxData, BurnV1 as BurnV1IxAccounts,
        BurnV1InstructionArgs as BurnV1IxData, Collect as CollectIxAccounts,
        CompressV1 as CompressV1IxAccounts, CreateCollectionV1 as CreateCollectionV1IxAccounts,
        CreateCollectionV1InstructionArgs as CreateCollectionV1IxData,
        CreateCollectionV2 as CreateCollectionV2IxAccounts,
        CreateCollectionV2InstructionArgs as CreateCollectionV2IxData,
        CreateV1 as CreateV1IxAccounts, CreateV1InstructionArgs as CreateV1IxData,
        CreateV2 as CreateV2IxAccounts, CreateV2InstructionArgs as CreateV2IxData,
        DecompressV1 as DecompressV1IxAccounts, DecompressV1InstructionArgs as DecompressV1IxData,
        ExecuteV1 as ExecuteV1IxAccounts, ExecuteV1InstructionArgs as ExecuteV1IxData,
        RemoveCollectionExternalPluginAdapterV1 as RemoveCollectionExternalPluginAdapterV1IxAccounts,
        RemoveCollectionExternalPluginAdapterV1InstructionArgs as RemoveCollectionExternalPluginAdapterV1IxData,
        RemoveCollectionPluginV1 as RemoveCollectionPluginV1IxAccounts,
        RemoveCollectionPluginV1InstructionArgs as RemoveCollectionPluginV1IxData,
        RemoveExternalPluginAdapterV1 as RemoveExternalPluginAdapterV1IxAccounts,
        RemoveExternalPluginAdapterV1InstructionArgs as RemoveExternalPluginAdapterV1IxData,
        RemovePluginV1 as RemovePluginV1IxAccounts,
        RemovePluginV1InstructionArgs as RemovePluginV1IxData,
        RevokeCollectionPluginAuthorityV1 as RevokeCollectionPluginAuthorityV1IxAccounts,
        RevokeCollectionPluginAuthorityV1InstructionArgs as RevokeCollectionPluginAuthorityV1IxData,
        RevokePluginAuthorityV1 as RevokePluginAuthorityV1IxAccounts,
        RevokePluginAuthorityV1InstructionArgs as RevokePluginAuthorityV1IxData,
        TransferV1 as TransferV1IxAccounts, TransferV1InstructionArgs as TransferV1IxData,
        UpdateCollectionExternalPluginAdapterV1 as UpdateCollectionExternalPluginAdapterV1IxAccounts,
        UpdateCollectionExternalPluginAdapterV1InstructionArgs as UpdateCollectionExternalPluginAdapterV1IxData,
        UpdateCollectionPluginV1 as UpdateCollectionPluginV1IxAccounts,
        UpdateCollectionPluginV1InstructionArgs as UpdateCollectionPluginV1IxData,
        UpdateCollectionV1 as UpdateCollectionV1IxAccounts,
        UpdateCollectionV1InstructionArgs as UpdateCollectionV1IxData,
        UpdateExternalPluginAdapterV1 as UpdateExternalPluginAdapterV1IxAccounts,
        UpdateExternalPluginAdapterV1InstructionArgs as UpdateExternalPluginAdapterV1IxData,
        UpdatePluginV1 as UpdatePluginV1IxAccounts,
        UpdatePluginV1InstructionArgs as UpdatePluginV1IxData, UpdateV1 as UpdateV1IxAccounts,
        UpdateV1InstructionArgs as UpdateV1IxData, UpdateV2 as UpdateV2IxAccounts,
        UpdateV2InstructionArgs as UpdateV2IxData,
        WriteCollectionExternalPluginAdapterDataV1 as WriteCollectionExternalPluginAdapterDataV1IxAccounts,
        WriteCollectionExternalPluginAdapterDataV1InstructionArgs as WriteCollectionExternalPluginAdapterDataV1IxData,
        WriteExternalPluginAdapterDataV1 as WriteExternalPluginAdapterDataV1IxAccounts,
        WriteExternalPluginAdapterDataV1InstructionArgs as WriteExternalPluginAdapterDataV1IxData,
    },
    ID,
};

/// MplCoreProgram Instructions
#[derive(Debug)]
pub enum MplCoreProgramProgramIx {
    CreateV1(CreateV1IxAccounts, CreateV1IxData),
    CreateCollectionV1(CreateCollectionV1IxAccounts, CreateCollectionV1IxData),
    AddPluginV1(AddPluginV1IxAccounts, AddPluginV1IxData),
    AddCollectionPluginV1(AddCollectionPluginV1IxAccounts, AddCollectionPluginV1IxData),
    RemovePluginV1(RemovePluginV1IxAccounts, RemovePluginV1IxData),
    RemoveCollectionPluginV1(
        RemoveCollectionPluginV1IxAccounts,
        RemoveCollectionPluginV1IxData,
    ),
    UpdatePluginV1(UpdatePluginV1IxAccounts, UpdatePluginV1IxData),
    UpdateCollectionPluginV1(
        UpdateCollectionPluginV1IxAccounts,
        UpdateCollectionPluginV1IxData,
    ),
    ApprovePluginAuthorityV1(
        ApprovePluginAuthorityV1IxAccounts,
        ApprovePluginAuthorityV1IxData,
    ),
    ApproveCollectionPluginAuthorityV1(
        ApproveCollectionPluginAuthorityV1IxAccounts,
        ApproveCollectionPluginAuthorityV1IxData,
    ),
    RevokePluginAuthorityV1(
        RevokePluginAuthorityV1IxAccounts,
        RevokePluginAuthorityV1IxData,
    ),
    RevokeCollectionPluginAuthorityV1(
        RevokeCollectionPluginAuthorityV1IxAccounts,
        RevokeCollectionPluginAuthorityV1IxData,
    ),
    BurnV1(BurnV1IxAccounts, BurnV1IxData),
    BurnCollectionV1(BurnCollectionV1IxAccounts, BurnCollectionV1IxData),
    TransferV1(TransferV1IxAccounts, TransferV1IxData),
    UpdateV1(UpdateV1IxAccounts, UpdateV1IxData),
    UpdateCollectionV1(UpdateCollectionV1IxAccounts, UpdateCollectionV1IxData),
    CompressV1(CompressV1IxAccounts),
    DecompressV1(DecompressV1IxAccounts, DecompressV1IxData),
    Collect(CollectIxAccounts),
    CreateV2(CreateV2IxAccounts, CreateV2IxData),
    CreateCollectionV2(CreateCollectionV2IxAccounts, CreateCollectionV2IxData),
    AddExternalPluginAdapterV1(
        AddExternalPluginAdapterV1IxAccounts,
        AddExternalPluginAdapterV1IxData,
    ),
    AddCollectionExternalPluginAdapterV1(
        AddCollectionExternalPluginAdapterV1IxAccounts,
        AddCollectionExternalPluginAdapterV1IxData,
    ),
    RemoveExternalPluginAdapterV1(
        RemoveExternalPluginAdapterV1IxAccounts,
        RemoveExternalPluginAdapterV1IxData,
    ),
    RemoveCollectionExternalPluginAdapterV1(
        RemoveCollectionExternalPluginAdapterV1IxAccounts,
        RemoveCollectionExternalPluginAdapterV1IxData,
    ),
    UpdateExternalPluginAdapterV1(
        UpdateExternalPluginAdapterV1IxAccounts,
        UpdateExternalPluginAdapterV1IxData,
    ),
    UpdateCollectionExternalPluginAdapterV1(
        UpdateCollectionExternalPluginAdapterV1IxAccounts,
        UpdateCollectionExternalPluginAdapterV1IxData,
    ),
    WriteExternalPluginAdapterDataV1(
        WriteExternalPluginAdapterDataV1IxAccounts,
        WriteExternalPluginAdapterDataV1IxData,
    ),
    WriteCollectionExternalPluginAdapterDataV1(
        WriteCollectionExternalPluginAdapterDataV1IxAccounts,
        WriteCollectionExternalPluginAdapterDataV1IxData,
    ),
    UpdateV2(UpdateV2IxAccounts, UpdateV2IxData),
    ExecuteV1(ExecuteV1IxAccounts, ExecuteV1IxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = MplCoreProgramProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "MplCoreProgram::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<MplCoreProgramProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 1] = ix.data[0..1].try_into()?;
        let mut _ix_data = &ix.data[1..];
        match ix_discriminator {
            [19] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = CollectIxAccounts {
                    recipient1: ix.accounts[0].0.into(),
                    recipient2: ix.accounts[1].0.into(),
                };
                Ok(MplCoreProgramProgramIx::Collect(ix_accounts))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
