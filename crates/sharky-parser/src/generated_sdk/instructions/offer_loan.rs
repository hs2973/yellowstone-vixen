//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::LoanTermsSpec;

/// Accounts.
#[derive(Debug)]
pub struct OfferLoan {
    pub lender: solana_program::pubkey::Pubkey,

    pub lender_value_token_account: solana_program::pubkey::Pubkey,

    pub value_mint: solana_program::pubkey::Pubkey,

    pub loan: solana_program::pubkey::Pubkey,

    pub escrow: solana_program::pubkey::Pubkey,

    pub escrow_token_account: solana_program::pubkey::Pubkey,

    pub order_book: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl OfferLoan {
    pub fn instruction(
        &self,
        args: OfferLoanInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: OfferLoanInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lender,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lender_value_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.value_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.loan, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.order_book,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&OfferLoanInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SHARKY_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OfferLoanInstructionData {
    discriminator: [u8; 8],
}

impl OfferLoanInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [44, 12, 76, 144, 210, 208, 239, 85],
        }
    }
}

impl Default for OfferLoanInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OfferLoanInstructionArgs {
    pub escrow_bump: u8,
    pub principal_lamports: u64,
    pub terms_choice: Option<LoanTermsSpec>,
}

/// Instruction builder for `OfferLoan`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` lender
///   1. `[writable]` lender_value_token_account
///   2. `[]` value_mint
///   3. `[writable, signer]` loan
///   4. `[writable]` escrow
///   5. `[writable]` escrow_token_account
///   6. `[]` order_book
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   9. `[]` associated_token_program
///   10. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct OfferLoanBuilder {
    lender: Option<solana_program::pubkey::Pubkey>,
    lender_value_token_account: Option<solana_program::pubkey::Pubkey>,
    value_mint: Option<solana_program::pubkey::Pubkey>,
    loan: Option<solana_program::pubkey::Pubkey>,
    escrow: Option<solana_program::pubkey::Pubkey>,
    escrow_token_account: Option<solana_program::pubkey::Pubkey>,
    order_book: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    escrow_bump: Option<u8>,
    principal_lamports: Option<u64>,
    terms_choice: Option<LoanTermsSpec>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl OfferLoanBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn lender(&mut self, lender: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lender = Some(lender);
        self
    }

    #[inline(always)]
    pub fn lender_value_token_account(
        &mut self,
        lender_value_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.lender_value_token_account = Some(lender_value_token_account);
        self
    }

    #[inline(always)]
    pub fn value_mint(&mut self, value_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.value_mint = Some(value_mint);
        self
    }

    #[inline(always)]
    pub fn loan(&mut self, loan: solana_program::pubkey::Pubkey) -> &mut Self {
        self.loan = Some(loan);
        self
    }

    #[inline(always)]
    pub fn escrow(&mut self, escrow: solana_program::pubkey::Pubkey) -> &mut Self {
        self.escrow = Some(escrow);
        self
    }

    #[inline(always)]
    pub fn escrow_token_account(
        &mut self,
        escrow_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.escrow_token_account = Some(escrow_token_account);
        self
    }

    #[inline(always)]
    pub fn order_book(&mut self, order_book: solana_program::pubkey::Pubkey) -> &mut Self {
        self.order_book = Some(order_book);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn escrow_bump(&mut self, escrow_bump: u8) -> &mut Self {
        self.escrow_bump = Some(escrow_bump);
        self
    }

    #[inline(always)]
    pub fn principal_lamports(&mut self, principal_lamports: u64) -> &mut Self {
        self.principal_lamports = Some(principal_lamports);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn terms_choice(&mut self, terms_choice: LoanTermsSpec) -> &mut Self {
        self.terms_choice = Some(terms_choice);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = OfferLoan {
            lender: self.lender.expect("lender is not set"),
            lender_value_token_account: self
                .lender_value_token_account
                .expect("lender_value_token_account is not set"),
            value_mint: self.value_mint.expect("value_mint is not set"),
            loan: self.loan.expect("loan is not set"),
            escrow: self.escrow.expect("escrow is not set"),
            escrow_token_account: self
                .escrow_token_account
                .expect("escrow_token_account is not set"),
            order_book: self.order_book.expect("order_book is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };
        let args = OfferLoanInstructionArgs {
            escrow_bump: self.escrow_bump.clone().expect("escrow_bump is not set"),
            principal_lamports: self
                .principal_lamports
                .clone()
                .expect("principal_lamports is not set"),
            terms_choice: self.terms_choice.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `offer_loan` CPI accounts.
pub struct OfferLoanCpiAccounts<'a, 'b> {
    pub lender: &'b solana_program::account_info::AccountInfo<'a>,

    pub lender_value_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub value_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub loan: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub order_book: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `offer_loan` CPI instruction.
pub struct OfferLoanCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub lender: &'b solana_program::account_info::AccountInfo<'a>,

    pub lender_value_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub value_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub loan: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub order_book: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: OfferLoanInstructionArgs,
}

impl<'a, 'b> OfferLoanCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: OfferLoanCpiAccounts<'a, 'b>,
        args: OfferLoanInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            lender: accounts.lender,
            lender_value_token_account: accounts.lender_value_token_account,
            value_mint: accounts.value_mint,
            loan: accounts.loan,
            escrow: accounts.escrow,
            escrow_token_account: accounts.escrow_token_account,
            order_book: accounts.order_book,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            rent: accounts.rent,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lender.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lender_value_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.value_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.loan.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.order_book.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&OfferLoanInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SHARKY_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.lender.clone());
        account_infos.push(self.lender_value_token_account.clone());
        account_infos.push(self.value_mint.clone());
        account_infos.push(self.loan.clone());
        account_infos.push(self.escrow.clone());
        account_infos.push(self.escrow_token_account.clone());
        account_infos.push(self.order_book.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `OfferLoan` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` lender
///   1. `[writable]` lender_value_token_account
///   2. `[]` value_mint
///   3. `[writable, signer]` loan
///   4. `[writable]` escrow
///   5. `[writable]` escrow_token_account
///   6. `[]` order_book
///   7. `[]` system_program
///   8. `[]` token_program
///   9. `[]` associated_token_program
///   10. `[]` rent
#[derive(Clone, Debug)]
pub struct OfferLoanCpiBuilder<'a, 'b> {
    instruction: Box<OfferLoanCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> OfferLoanCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(OfferLoanCpiBuilderInstruction {
            __program: program,
            lender: None,
            lender_value_token_account: None,
            value_mint: None,
            loan: None,
            escrow: None,
            escrow_token_account: None,
            order_book: None,
            system_program: None,
            token_program: None,
            associated_token_program: None,
            rent: None,
            escrow_bump: None,
            principal_lamports: None,
            terms_choice: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn lender(
        &mut self,
        lender: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lender = Some(lender);
        self
    }

    #[inline(always)]
    pub fn lender_value_token_account(
        &mut self,
        lender_value_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lender_value_token_account = Some(lender_value_token_account);
        self
    }

    #[inline(always)]
    pub fn value_mint(
        &mut self,
        value_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.value_mint = Some(value_mint);
        self
    }

    #[inline(always)]
    pub fn loan(&mut self, loan: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.loan = Some(loan);
        self
    }

    #[inline(always)]
    pub fn escrow(
        &mut self,
        escrow: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow = Some(escrow);
        self
    }

    #[inline(always)]
    pub fn escrow_token_account(
        &mut self,
        escrow_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow_token_account = Some(escrow_token_account);
        self
    }

    #[inline(always)]
    pub fn order_book(
        &mut self,
        order_book: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.order_book = Some(order_book);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn escrow_bump(&mut self, escrow_bump: u8) -> &mut Self {
        self.instruction.escrow_bump = Some(escrow_bump);
        self
    }

    #[inline(always)]
    pub fn principal_lamports(&mut self, principal_lamports: u64) -> &mut Self {
        self.instruction.principal_lamports = Some(principal_lamports);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn terms_choice(&mut self, terms_choice: LoanTermsSpec) -> &mut Self {
        self.instruction.terms_choice = Some(terms_choice);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = OfferLoanInstructionArgs {
            escrow_bump: self
                .instruction
                .escrow_bump
                .clone()
                .expect("escrow_bump is not set"),
            principal_lamports: self
                .instruction
                .principal_lamports
                .clone()
                .expect("principal_lamports is not set"),
            terms_choice: self.instruction.terms_choice.clone(),
        };
        let instruction = OfferLoanCpi {
            __program: self.instruction.__program,

            lender: self.instruction.lender.expect("lender is not set"),

            lender_value_token_account: self
                .instruction
                .lender_value_token_account
                .expect("lender_value_token_account is not set"),

            value_mint: self.instruction.value_mint.expect("value_mint is not set"),

            loan: self.instruction.loan.expect("loan is not set"),

            escrow: self.instruction.escrow.expect("escrow is not set"),

            escrow_token_account: self
                .instruction
                .escrow_token_account
                .expect("escrow_token_account is not set"),

            order_book: self.instruction.order_book.expect("order_book is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct OfferLoanCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    lender: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lender_value_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    value_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    loan: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    order_book: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow_bump: Option<u8>,
    principal_lamports: Option<u64>,
    terms_choice: Option<LoanTermsSpec>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
