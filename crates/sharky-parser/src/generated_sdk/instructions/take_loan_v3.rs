//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct TakeLoanV3 {
    pub lender: solana_program::pubkey::Pubkey,
    /// The borrower that will receive the tokens in exchange for collateral
    pub borrower: solana_program::pubkey::Pubkey,

    pub borrower_collateral_token_account: solana_program::pubkey::Pubkey,
    /// type of token
    pub collateral_mint: solana_program::pubkey::Pubkey,
    /// Expected loan prevents a replacement attack where the loan is replaced between the
    /// user signing take_loan and it hitting the chain
    pub loan: solana_program::pubkey::Pubkey,

    pub escrow: solana_program::pubkey::Pubkey,

    pub escrow_collateral_token_account: solana_program::pubkey::Pubkey,

    pub order_book: solana_program::pubkey::Pubkey,

    pub metadata: solana_program::pubkey::Pubkey,

    pub edition: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub mpl_token_metadata_program: solana_program::pubkey::Pubkey,
}

impl TakeLoanV3 {
    pub fn instruction(
        &self,
        args: TakeLoanV3InstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: TakeLoanV3InstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lender,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.borrower,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.borrower_collateral_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.collateral_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.loan, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow_collateral_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.order_book,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.edition,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mpl_token_metadata_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&TakeLoanV3InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SHARKY_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TakeLoanV3InstructionData {
    discriminator: [u8; 8],
}

impl TakeLoanV3InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [255, 115, 220, 58, 26, 157, 112, 185],
        }
    }
}

impl Default for TakeLoanV3InstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TakeLoanV3InstructionArgs {
    pub expected_loan: String,
    pub nft_list_index: Option<u32>,
    pub skip_freezing_collateral: bool,
}

/// Instruction builder for `TakeLoanV3`.
///
/// ### Accounts:
///
///   0. `[writable]` lender
///   1. `[writable, signer]` borrower
///   2. `[writable]` borrower_collateral_token_account
///   3. `[writable]` collateral_mint
///   4. `[writable]` loan
///   5. `[writable]` escrow
///   6. `[writable]` escrow_collateral_token_account
///   7. `[]` order_book
///   8. `[writable]` metadata
///   9. `[writable]` edition
///   10. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[]` associated_token_program
///   13. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   14. `[optional]` mpl_token_metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
#[derive(Clone, Debug, Default)]
pub struct TakeLoanV3Builder {
    lender: Option<solana_program::pubkey::Pubkey>,
    borrower: Option<solana_program::pubkey::Pubkey>,
    borrower_collateral_token_account: Option<solana_program::pubkey::Pubkey>,
    collateral_mint: Option<solana_program::pubkey::Pubkey>,
    loan: Option<solana_program::pubkey::Pubkey>,
    escrow: Option<solana_program::pubkey::Pubkey>,
    escrow_collateral_token_account: Option<solana_program::pubkey::Pubkey>,
    order_book: Option<solana_program::pubkey::Pubkey>,
    metadata: Option<solana_program::pubkey::Pubkey>,
    edition: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    mpl_token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    expected_loan: Option<String>,
    nft_list_index: Option<u32>,
    skip_freezing_collateral: Option<bool>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl TakeLoanV3Builder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn lender(&mut self, lender: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lender = Some(lender);
        self
    }

    /// The borrower that will receive the tokens in exchange for collateral
    #[inline(always)]
    pub fn borrower(&mut self, borrower: solana_program::pubkey::Pubkey) -> &mut Self {
        self.borrower = Some(borrower);
        self
    }

    #[inline(always)]
    pub fn borrower_collateral_token_account(
        &mut self,
        borrower_collateral_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.borrower_collateral_token_account = Some(borrower_collateral_token_account);
        self
    }

    /// type of token
    #[inline(always)]
    pub fn collateral_mint(
        &mut self,
        collateral_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collateral_mint = Some(collateral_mint);
        self
    }

    /// Expected loan prevents a replacement attack where the loan is replaced between the
    /// user signing take_loan and it hitting the chain
    #[inline(always)]
    pub fn loan(&mut self, loan: solana_program::pubkey::Pubkey) -> &mut Self {
        self.loan = Some(loan);
        self
    }

    #[inline(always)]
    pub fn escrow(&mut self, escrow: solana_program::pubkey::Pubkey) -> &mut Self {
        self.escrow = Some(escrow);
        self
    }

    #[inline(always)]
    pub fn escrow_collateral_token_account(
        &mut self,
        escrow_collateral_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.escrow_collateral_token_account = Some(escrow_collateral_token_account);
        self
    }

    #[inline(always)]
    pub fn order_book(&mut self, order_book: solana_program::pubkey::Pubkey) -> &mut Self {
        self.order_book = Some(order_book);
        self
    }

    #[inline(always)]
    pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.metadata = Some(metadata);
        self
    }

    #[inline(always)]
    pub fn edition(&mut self, edition: solana_program::pubkey::Pubkey) -> &mut Self {
        self.edition = Some(edition);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
    #[inline(always)]
    pub fn mpl_token_metadata_program(
        &mut self,
        mpl_token_metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.mpl_token_metadata_program = Some(mpl_token_metadata_program);
        self
    }

    #[inline(always)]
    pub fn expected_loan(&mut self, expected_loan: String) -> &mut Self {
        self.expected_loan = Some(expected_loan);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn nft_list_index(&mut self, nft_list_index: u32) -> &mut Self {
        self.nft_list_index = Some(nft_list_index);
        self
    }

    #[inline(always)]
    pub fn skip_freezing_collateral(&mut self, skip_freezing_collateral: bool) -> &mut Self {
        self.skip_freezing_collateral = Some(skip_freezing_collateral);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = TakeLoanV3 {
            lender: self.lender.expect("lender is not set"),
            borrower: self.borrower.expect("borrower is not set"),
            borrower_collateral_token_account: self
                .borrower_collateral_token_account
                .expect("borrower_collateral_token_account is not set"),
            collateral_mint: self.collateral_mint.expect("collateral_mint is not set"),
            loan: self.loan.expect("loan is not set"),
            escrow: self.escrow.expect("escrow is not set"),
            escrow_collateral_token_account: self
                .escrow_collateral_token_account
                .expect("escrow_collateral_token_account is not set"),
            order_book: self.order_book.expect("order_book is not set"),
            metadata: self.metadata.expect("metadata is not set"),
            edition: self.edition.expect("edition is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            mpl_token_metadata_program: self.mpl_token_metadata_program.unwrap_or(
                solana_program::pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"),
            ),
        };
        let args = TakeLoanV3InstructionArgs {
            expected_loan: self
                .expected_loan
                .clone()
                .expect("expected_loan is not set"),
            nft_list_index: self.nft_list_index.clone(),
            skip_freezing_collateral: self
                .skip_freezing_collateral
                .clone()
                .expect("skip_freezing_collateral is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `take_loan_v3` CPI accounts.
pub struct TakeLoanV3CpiAccounts<'a, 'b> {
    pub lender: &'b solana_program::account_info::AccountInfo<'a>,
    /// The borrower that will receive the tokens in exchange for collateral
    pub borrower: &'b solana_program::account_info::AccountInfo<'a>,

    pub borrower_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// type of token
    pub collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Expected loan prevents a replacement attack where the loan is replaced between the
    /// user signing take_loan and it hitting the chain
    pub loan: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub order_book: &'b solana_program::account_info::AccountInfo<'a>,

    pub metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub edition: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub mpl_token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `take_loan_v3` CPI instruction.
pub struct TakeLoanV3Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub lender: &'b solana_program::account_info::AccountInfo<'a>,
    /// The borrower that will receive the tokens in exchange for collateral
    pub borrower: &'b solana_program::account_info::AccountInfo<'a>,

    pub borrower_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// type of token
    pub collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Expected loan prevents a replacement attack where the loan is replaced between the
    /// user signing take_loan and it hitting the chain
    pub loan: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub order_book: &'b solana_program::account_info::AccountInfo<'a>,

    pub metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub edition: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub mpl_token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: TakeLoanV3InstructionArgs,
}

impl<'a, 'b> TakeLoanV3Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: TakeLoanV3CpiAccounts<'a, 'b>,
        args: TakeLoanV3InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            lender: accounts.lender,
            borrower: accounts.borrower,
            borrower_collateral_token_account: accounts.borrower_collateral_token_account,
            collateral_mint: accounts.collateral_mint,
            loan: accounts.loan,
            escrow: accounts.escrow,
            escrow_collateral_token_account: accounts.escrow_collateral_token_account,
            order_book: accounts.order_book,
            metadata: accounts.metadata,
            edition: accounts.edition,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            rent: accounts.rent,
            mpl_token_metadata_program: accounts.mpl_token_metadata_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lender.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.borrower.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.borrower_collateral_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collateral_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.loan.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow_collateral_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.order_book.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.edition.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mpl_token_metadata_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&TakeLoanV3InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SHARKY_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.lender.clone());
        account_infos.push(self.borrower.clone());
        account_infos.push(self.borrower_collateral_token_account.clone());
        account_infos.push(self.collateral_mint.clone());
        account_infos.push(self.loan.clone());
        account_infos.push(self.escrow.clone());
        account_infos.push(self.escrow_collateral_token_account.clone());
        account_infos.push(self.order_book.clone());
        account_infos.push(self.metadata.clone());
        account_infos.push(self.edition.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.mpl_token_metadata_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `TakeLoanV3` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` lender
///   1. `[writable, signer]` borrower
///   2. `[writable]` borrower_collateral_token_account
///   3. `[writable]` collateral_mint
///   4. `[writable]` loan
///   5. `[writable]` escrow
///   6. `[writable]` escrow_collateral_token_account
///   7. `[]` order_book
///   8. `[writable]` metadata
///   9. `[writable]` edition
///   10. `[]` system_program
///   11. `[]` token_program
///   12. `[]` associated_token_program
///   13. `[]` rent
///   14. `[]` mpl_token_metadata_program
#[derive(Clone, Debug)]
pub struct TakeLoanV3CpiBuilder<'a, 'b> {
    instruction: Box<TakeLoanV3CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> TakeLoanV3CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(TakeLoanV3CpiBuilderInstruction {
            __program: program,
            lender: None,
            borrower: None,
            borrower_collateral_token_account: None,
            collateral_mint: None,
            loan: None,
            escrow: None,
            escrow_collateral_token_account: None,
            order_book: None,
            metadata: None,
            edition: None,
            system_program: None,
            token_program: None,
            associated_token_program: None,
            rent: None,
            mpl_token_metadata_program: None,
            expected_loan: None,
            nft_list_index: None,
            skip_freezing_collateral: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn lender(
        &mut self,
        lender: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lender = Some(lender);
        self
    }

    /// The borrower that will receive the tokens in exchange for collateral
    #[inline(always)]
    pub fn borrower(
        &mut self,
        borrower: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.borrower = Some(borrower);
        self
    }

    #[inline(always)]
    pub fn borrower_collateral_token_account(
        &mut self,
        borrower_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.borrower_collateral_token_account =
            Some(borrower_collateral_token_account);
        self
    }

    /// type of token
    #[inline(always)]
    pub fn collateral_mint(
        &mut self,
        collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collateral_mint = Some(collateral_mint);
        self
    }

    /// Expected loan prevents a replacement attack where the loan is replaced between the
    /// user signing take_loan and it hitting the chain
    #[inline(always)]
    pub fn loan(&mut self, loan: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.loan = Some(loan);
        self
    }

    #[inline(always)]
    pub fn escrow(
        &mut self,
        escrow: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow = Some(escrow);
        self
    }

    #[inline(always)]
    pub fn escrow_collateral_token_account(
        &mut self,
        escrow_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow_collateral_token_account = Some(escrow_collateral_token_account);
        self
    }

    #[inline(always)]
    pub fn order_book(
        &mut self,
        order_book: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.order_book = Some(order_book);
        self
    }

    #[inline(always)]
    pub fn metadata(
        &mut self,
        metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata = Some(metadata);
        self
    }

    #[inline(always)]
    pub fn edition(
        &mut self,
        edition: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.edition = Some(edition);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn mpl_token_metadata_program(
        &mut self,
        mpl_token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mpl_token_metadata_program = Some(mpl_token_metadata_program);
        self
    }

    #[inline(always)]
    pub fn expected_loan(&mut self, expected_loan: String) -> &mut Self {
        self.instruction.expected_loan = Some(expected_loan);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn nft_list_index(&mut self, nft_list_index: u32) -> &mut Self {
        self.instruction.nft_list_index = Some(nft_list_index);
        self
    }

    #[inline(always)]
    pub fn skip_freezing_collateral(&mut self, skip_freezing_collateral: bool) -> &mut Self {
        self.instruction.skip_freezing_collateral = Some(skip_freezing_collateral);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = TakeLoanV3InstructionArgs {
            expected_loan: self
                .instruction
                .expected_loan
                .clone()
                .expect("expected_loan is not set"),
            nft_list_index: self.instruction.nft_list_index.clone(),
            skip_freezing_collateral: self
                .instruction
                .skip_freezing_collateral
                .clone()
                .expect("skip_freezing_collateral is not set"),
        };
        let instruction = TakeLoanV3Cpi {
            __program: self.instruction.__program,

            lender: self.instruction.lender.expect("lender is not set"),

            borrower: self.instruction.borrower.expect("borrower is not set"),

            borrower_collateral_token_account: self
                .instruction
                .borrower_collateral_token_account
                .expect("borrower_collateral_token_account is not set"),

            collateral_mint: self
                .instruction
                .collateral_mint
                .expect("collateral_mint is not set"),

            loan: self.instruction.loan.expect("loan is not set"),

            escrow: self.instruction.escrow.expect("escrow is not set"),

            escrow_collateral_token_account: self
                .instruction
                .escrow_collateral_token_account
                .expect("escrow_collateral_token_account is not set"),

            order_book: self.instruction.order_book.expect("order_book is not set"),

            metadata: self.instruction.metadata.expect("metadata is not set"),

            edition: self.instruction.edition.expect("edition is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            mpl_token_metadata_program: self
                .instruction
                .mpl_token_metadata_program
                .expect("mpl_token_metadata_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct TakeLoanV3CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    lender: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    borrower: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    borrower_collateral_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collateral_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    loan: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow_collateral_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    order_book: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    edition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mpl_token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    expected_loan: Option<String>,
    nft_list_index: Option<u32>,
    skip_freezing_collateral: Option<bool>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
