//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct ForecloseLoanV3Compressed {
    pub loan: solana_program::pubkey::Pubkey,

    pub escrow: solana_program::pubkey::Pubkey,

    pub borrower: solana_program::pubkey::Pubkey,

    pub lender: solana_program::pubkey::Pubkey,

    pub tree_authority: solana_program::pubkey::Pubkey,

    pub log_wrapper: solana_program::pubkey::Pubkey,

    pub merkle_tree: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub mpl_bubblegum_program: solana_program::pubkey::Pubkey,

    pub compression_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl ForecloseLoanV3Compressed {
    pub fn instruction(
        &self,
        args: ForecloseLoanV3CompressedInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ForecloseLoanV3CompressedInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.loan, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.borrower,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lender,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tree_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.log_wrapper,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.merkle_tree,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mpl_bubblegum_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.compression_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&ForecloseLoanV3CompressedInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SHARKY_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ForecloseLoanV3CompressedInstructionData {
    discriminator: [u8; 8],
}

impl ForecloseLoanV3CompressedInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [194, 193, 5, 193, 115, 133, 231, 197],
        }
    }
}

impl Default for ForecloseLoanV3CompressedInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ForecloseLoanV3CompressedInstructionArgs {
    pub cnft_root: [u8; 32],
    pub cnft_data_hash: [u8; 32],
    pub cnft_creator_hash: [u8; 32],
    pub cnft_nonce: u64,
    pub cnft_index: u32,
}

/// Instruction builder for `ForecloseLoanV3Compressed`.
///
/// ### Accounts:
///
///   0. `[writable]` loan
///   1. `[writable]` escrow
///   2. `[writable]` borrower
///   3. `[writable, signer]` lender
///   4. `[]` tree_authority
///   5. `[]` log_wrapper
///   6. `[writable]` merkle_tree
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   9. `[]` mpl_bubblegum_program
///   10. `[]` compression_program
///   11. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct ForecloseLoanV3CompressedBuilder {
    loan: Option<solana_program::pubkey::Pubkey>,
    escrow: Option<solana_program::pubkey::Pubkey>,
    borrower: Option<solana_program::pubkey::Pubkey>,
    lender: Option<solana_program::pubkey::Pubkey>,
    tree_authority: Option<solana_program::pubkey::Pubkey>,
    log_wrapper: Option<solana_program::pubkey::Pubkey>,
    merkle_tree: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    mpl_bubblegum_program: Option<solana_program::pubkey::Pubkey>,
    compression_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    cnft_root: Option<[u8; 32]>,
    cnft_data_hash: Option<[u8; 32]>,
    cnft_creator_hash: Option<[u8; 32]>,
    cnft_nonce: Option<u64>,
    cnft_index: Option<u32>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ForecloseLoanV3CompressedBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn loan(&mut self, loan: solana_program::pubkey::Pubkey) -> &mut Self {
        self.loan = Some(loan);
        self
    }

    #[inline(always)]
    pub fn escrow(&mut self, escrow: solana_program::pubkey::Pubkey) -> &mut Self {
        self.escrow = Some(escrow);
        self
    }

    #[inline(always)]
    pub fn borrower(&mut self, borrower: solana_program::pubkey::Pubkey) -> &mut Self {
        self.borrower = Some(borrower);
        self
    }

    #[inline(always)]
    pub fn lender(&mut self, lender: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lender = Some(lender);
        self
    }

    #[inline(always)]
    pub fn tree_authority(&mut self, tree_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.tree_authority = Some(tree_authority);
        self
    }

    #[inline(always)]
    pub fn log_wrapper(&mut self, log_wrapper: solana_program::pubkey::Pubkey) -> &mut Self {
        self.log_wrapper = Some(log_wrapper);
        self
    }

    #[inline(always)]
    pub fn merkle_tree(&mut self, merkle_tree: solana_program::pubkey::Pubkey) -> &mut Self {
        self.merkle_tree = Some(merkle_tree);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn mpl_bubblegum_program(
        &mut self,
        mpl_bubblegum_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.mpl_bubblegum_program = Some(mpl_bubblegum_program);
        self
    }

    #[inline(always)]
    pub fn compression_program(
        &mut self,
        compression_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.compression_program = Some(compression_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn cnft_root(&mut self, cnft_root: [u8; 32]) -> &mut Self {
        self.cnft_root = Some(cnft_root);
        self
    }

    #[inline(always)]
    pub fn cnft_data_hash(&mut self, cnft_data_hash: [u8; 32]) -> &mut Self {
        self.cnft_data_hash = Some(cnft_data_hash);
        self
    }

    #[inline(always)]
    pub fn cnft_creator_hash(&mut self, cnft_creator_hash: [u8; 32]) -> &mut Self {
        self.cnft_creator_hash = Some(cnft_creator_hash);
        self
    }

    #[inline(always)]
    pub fn cnft_nonce(&mut self, cnft_nonce: u64) -> &mut Self {
        self.cnft_nonce = Some(cnft_nonce);
        self
    }

    #[inline(always)]
    pub fn cnft_index(&mut self, cnft_index: u32) -> &mut Self {
        self.cnft_index = Some(cnft_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ForecloseLoanV3Compressed {
            loan: self.loan.expect("loan is not set"),
            escrow: self.escrow.expect("escrow is not set"),
            borrower: self.borrower.expect("borrower is not set"),
            lender: self.lender.expect("lender is not set"),
            tree_authority: self.tree_authority.expect("tree_authority is not set"),
            log_wrapper: self.log_wrapper.expect("log_wrapper is not set"),
            merkle_tree: self.merkle_tree.expect("merkle_tree is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            mpl_bubblegum_program: self
                .mpl_bubblegum_program
                .expect("mpl_bubblegum_program is not set"),
            compression_program: self
                .compression_program
                .expect("compression_program is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };
        let args = ForecloseLoanV3CompressedInstructionArgs {
            cnft_root: self.cnft_root.clone().expect("cnft_root is not set"),
            cnft_data_hash: self
                .cnft_data_hash
                .clone()
                .expect("cnft_data_hash is not set"),
            cnft_creator_hash: self
                .cnft_creator_hash
                .clone()
                .expect("cnft_creator_hash is not set"),
            cnft_nonce: self.cnft_nonce.clone().expect("cnft_nonce is not set"),
            cnft_index: self.cnft_index.clone().expect("cnft_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `foreclose_loan_v3_compressed` CPI accounts.
pub struct ForecloseLoanV3CompressedCpiAccounts<'a, 'b> {
    pub loan: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow: &'b solana_program::account_info::AccountInfo<'a>,

    pub borrower: &'b solana_program::account_info::AccountInfo<'a>,

    pub lender: &'b solana_program::account_info::AccountInfo<'a>,

    pub tree_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub mpl_bubblegum_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub compression_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `foreclose_loan_v3_compressed` CPI instruction.
pub struct ForecloseLoanV3CompressedCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub loan: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow: &'b solana_program::account_info::AccountInfo<'a>,

    pub borrower: &'b solana_program::account_info::AccountInfo<'a>,

    pub lender: &'b solana_program::account_info::AccountInfo<'a>,

    pub tree_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub mpl_bubblegum_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub compression_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: ForecloseLoanV3CompressedInstructionArgs,
}

impl<'a, 'b> ForecloseLoanV3CompressedCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ForecloseLoanV3CompressedCpiAccounts<'a, 'b>,
        args: ForecloseLoanV3CompressedInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            loan: accounts.loan,
            escrow: accounts.escrow,
            borrower: accounts.borrower,
            lender: accounts.lender,
            tree_authority: accounts.tree_authority,
            log_wrapper: accounts.log_wrapper,
            merkle_tree: accounts.merkle_tree,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            mpl_bubblegum_program: accounts.mpl_bubblegum_program,
            compression_program: accounts.compression_program,
            rent: accounts.rent,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.loan.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.borrower.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lender.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tree_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.log_wrapper.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.merkle_tree.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mpl_bubblegum_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.compression_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&ForecloseLoanV3CompressedInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SHARKY_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.loan.clone());
        account_infos.push(self.escrow.clone());
        account_infos.push(self.borrower.clone());
        account_infos.push(self.lender.clone());
        account_infos.push(self.tree_authority.clone());
        account_infos.push(self.log_wrapper.clone());
        account_infos.push(self.merkle_tree.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.mpl_bubblegum_program.clone());
        account_infos.push(self.compression_program.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ForecloseLoanV3Compressed` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` loan
///   1. `[writable]` escrow
///   2. `[writable]` borrower
///   3. `[writable, signer]` lender
///   4. `[]` tree_authority
///   5. `[]` log_wrapper
///   6. `[writable]` merkle_tree
///   7. `[]` system_program
///   8. `[]` token_program
///   9. `[]` mpl_bubblegum_program
///   10. `[]` compression_program
///   11. `[]` rent
#[derive(Clone, Debug)]
pub struct ForecloseLoanV3CompressedCpiBuilder<'a, 'b> {
    instruction: Box<ForecloseLoanV3CompressedCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ForecloseLoanV3CompressedCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ForecloseLoanV3CompressedCpiBuilderInstruction {
            __program: program,
            loan: None,
            escrow: None,
            borrower: None,
            lender: None,
            tree_authority: None,
            log_wrapper: None,
            merkle_tree: None,
            system_program: None,
            token_program: None,
            mpl_bubblegum_program: None,
            compression_program: None,
            rent: None,
            cnft_root: None,
            cnft_data_hash: None,
            cnft_creator_hash: None,
            cnft_nonce: None,
            cnft_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn loan(&mut self, loan: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.loan = Some(loan);
        self
    }

    #[inline(always)]
    pub fn escrow(
        &mut self,
        escrow: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow = Some(escrow);
        self
    }

    #[inline(always)]
    pub fn borrower(
        &mut self,
        borrower: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.borrower = Some(borrower);
        self
    }

    #[inline(always)]
    pub fn lender(
        &mut self,
        lender: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lender = Some(lender);
        self
    }

    #[inline(always)]
    pub fn tree_authority(
        &mut self,
        tree_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tree_authority = Some(tree_authority);
        self
    }

    #[inline(always)]
    pub fn log_wrapper(
        &mut self,
        log_wrapper: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.log_wrapper = Some(log_wrapper);
        self
    }

    #[inline(always)]
    pub fn merkle_tree(
        &mut self,
        merkle_tree: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.merkle_tree = Some(merkle_tree);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn mpl_bubblegum_program(
        &mut self,
        mpl_bubblegum_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mpl_bubblegum_program = Some(mpl_bubblegum_program);
        self
    }

    #[inline(always)]
    pub fn compression_program(
        &mut self,
        compression_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.compression_program = Some(compression_program);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn cnft_root(&mut self, cnft_root: [u8; 32]) -> &mut Self {
        self.instruction.cnft_root = Some(cnft_root);
        self
    }

    #[inline(always)]
    pub fn cnft_data_hash(&mut self, cnft_data_hash: [u8; 32]) -> &mut Self {
        self.instruction.cnft_data_hash = Some(cnft_data_hash);
        self
    }

    #[inline(always)]
    pub fn cnft_creator_hash(&mut self, cnft_creator_hash: [u8; 32]) -> &mut Self {
        self.instruction.cnft_creator_hash = Some(cnft_creator_hash);
        self
    }

    #[inline(always)]
    pub fn cnft_nonce(&mut self, cnft_nonce: u64) -> &mut Self {
        self.instruction.cnft_nonce = Some(cnft_nonce);
        self
    }

    #[inline(always)]
    pub fn cnft_index(&mut self, cnft_index: u32) -> &mut Self {
        self.instruction.cnft_index = Some(cnft_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = ForecloseLoanV3CompressedInstructionArgs {
            cnft_root: self
                .instruction
                .cnft_root
                .clone()
                .expect("cnft_root is not set"),
            cnft_data_hash: self
                .instruction
                .cnft_data_hash
                .clone()
                .expect("cnft_data_hash is not set"),
            cnft_creator_hash: self
                .instruction
                .cnft_creator_hash
                .clone()
                .expect("cnft_creator_hash is not set"),
            cnft_nonce: self
                .instruction
                .cnft_nonce
                .clone()
                .expect("cnft_nonce is not set"),
            cnft_index: self
                .instruction
                .cnft_index
                .clone()
                .expect("cnft_index is not set"),
        };
        let instruction = ForecloseLoanV3CompressedCpi {
            __program: self.instruction.__program,

            loan: self.instruction.loan.expect("loan is not set"),

            escrow: self.instruction.escrow.expect("escrow is not set"),

            borrower: self.instruction.borrower.expect("borrower is not set"),

            lender: self.instruction.lender.expect("lender is not set"),

            tree_authority: self
                .instruction
                .tree_authority
                .expect("tree_authority is not set"),

            log_wrapper: self
                .instruction
                .log_wrapper
                .expect("log_wrapper is not set"),

            merkle_tree: self
                .instruction
                .merkle_tree
                .expect("merkle_tree is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            mpl_bubblegum_program: self
                .instruction
                .mpl_bubblegum_program
                .expect("mpl_bubblegum_program is not set"),

            compression_program: self
                .instruction
                .compression_program
                .expect("compression_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ForecloseLoanV3CompressedCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    loan: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    borrower: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lender: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tree_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    merkle_tree: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mpl_bubblegum_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    compression_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cnft_root: Option<[u8; 32]>,
    cnft_data_hash: Option<[u8; 32]>,
    cnft_creator_hash: Option<[u8; 32]>,
    cnft_nonce: Option<u64>,
    cnft_index: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
