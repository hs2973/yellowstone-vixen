//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum SharkyError {
    /// 6000 - Custom
    #[error("Custom")]
    Custom = 0x1770,
    /// 6001 - InvalidArgument
    #[error("InvalidArgument")]
    InvalidArgument = 0x1771,
    /// 6002 - InvalidAccountData
    #[error("InvalidAccountData")]
    InvalidAccountData = 0x1772,
    /// 6003 - IllegalOwner
    #[error("IllegalOwner")]
    IllegalOwner = 0x1773,
    /// 6004 - Mint is invalid
    #[error("Mint is invalid")]
    InvalidMint = 0x1774,
    /// 6005 - Numerical overflow error
    #[error("Numerical overflow error")]
    NumericalOverflowError = 0x1775,
    /// 6006 - Mismatched NFT collateral mint
    #[error("Mismatched NFT collateral mint")]
    MismatchedNftCollateralMint = 0x1776,
    /// 6007 - Mismatched value token mint
    #[error("Mismatched value token mint")]
    MismatchedValueTokenMint = 0x1777,
    /// 6008 - Mismatched lender
    #[error("Mismatched lender")]
    MismatchedLender = 0x1778,
    /// 6009 - Loan is not foreclosable
    #[error("Loan is not foreclosable")]
    NotForeclosable = 0x1779,
    /// 6010 - Fee calculation error
    #[error("Fee calculation error")]
    FeeCalculationError = 0x177a,
    /// 6011 - Invalid book loan terms type
    #[error("Invalid book loan terms type")]
    InvalidBookLoanTermsType = 0x177b,
    /// 6012 - Invalid escrow bump
    #[error("Invalid escrow bump")]
    InvalidEscrowBump = 0x177c,
    /// 6013 - Invalid loan version
    #[error("Invalid loan version")]
    InvalidLoanVersion = 0x177d,
    /// 6014 - Value mint only supports native mint
    #[error("Value mint only supports native mint")]
    InvalidValueMint = 0x177e,
    /// 6015 - Offered loan cannot be foreclosed
    #[error("Offered loan cannot be foreclosed")]
    OfferedLoanCannotBeForeclosed = 0x177f,
}

impl solana_program::program_error::PrintProgramError for SharkyError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for SharkyError {
    fn type_of() -> &'static str { "SharkyError" }
}
