//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{
        CollectionAuthorityRecord, Edition, EditionMarker, EditionMarkerV2, HolderDelegateRecord,
        MasterEditionV1, MasterEditionV2, Metadata, MetadataDelegateRecord, ReservationListV1,
        ReservationListV2, TokenOwnedEscrow, TokenRecord, UseAuthorityRecord,
    },
    ID,
};

/// TokenMetadata Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
pub enum TokenMetadataProgramState {
    CollectionAuthorityRecord(CollectionAuthorityRecord),
    MetadataDelegateRecord(MetadataDelegateRecord),
    HolderDelegateRecord(HolderDelegateRecord),
    Edition(Edition),
    EditionMarker(EditionMarker),
    EditionMarkerV2(EditionMarkerV2),
    TokenOwnedEscrow(TokenOwnedEscrow),
    MasterEditionV2(MasterEditionV2),
    MasterEditionV1(MasterEditionV1),
    Metadata(Metadata),
    TokenRecord(TokenRecord),
    ReservationListV2(ReservationListV2),
    ReservationListV1(ReservationListV1),
    UseAuthorityRecord(UseAuthorityRecord),
}

impl TokenMetadataProgramState {
    #[allow(unreachable_patterns)]
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let data_len = data_bytes.len();
        const COLLECTIONAUTHORITYRECORD_LEN: usize =
            std::mem::size_of::<CollectionAuthorityRecord>();
        const EDITIONMARKERV2_LEN: usize = std::mem::size_of::<EditionMarkerV2>();
        const TOKENOWNEDESCROW_LEN: usize = std::mem::size_of::<TokenOwnedEscrow>();
        const MASTEREDITIONV2_LEN: usize = std::mem::size_of::<MasterEditionV2>();
        const MASTEREDITIONV1_LEN: usize = std::mem::size_of::<MasterEditionV1>();
        const METADATA_LEN: usize = std::mem::size_of::<Metadata>();
        const TOKENRECORD_LEN: usize = std::mem::size_of::<TokenRecord>();
        const RESERVATIONLISTV2_LEN: usize = std::mem::size_of::<ReservationListV2>();
        const RESERVATIONLISTV1_LEN: usize = std::mem::size_of::<ReservationListV1>();
        match data_len {
            COLLECTIONAUTHORITYRECORD_LEN => {
                Ok(TokenMetadataProgramState::CollectionAuthorityRecord(
                    CollectionAuthorityRecord::from_bytes(data_bytes)?,
                ))
            },
            MetadataDelegateRecord::LEN => Ok(TokenMetadataProgramState::MetadataDelegateRecord(
                MetadataDelegateRecord::from_bytes(data_bytes)?,
            )),
            HolderDelegateRecord::LEN => Ok(TokenMetadataProgramState::HolderDelegateRecord(
                HolderDelegateRecord::from_bytes(data_bytes)?,
            )),
            Edition::LEN => Ok(TokenMetadataProgramState::Edition(Edition::from_bytes(
                data_bytes,
            )?)),
            EditionMarker::LEN => Ok(TokenMetadataProgramState::EditionMarker(
                EditionMarker::from_bytes(data_bytes)?,
            )),
            EDITIONMARKERV2_LEN => Ok(TokenMetadataProgramState::EditionMarkerV2(
                EditionMarkerV2::from_bytes(data_bytes)?,
            )),
            TOKENOWNEDESCROW_LEN => Ok(TokenMetadataProgramState::TokenOwnedEscrow(
                TokenOwnedEscrow::from_bytes(data_bytes)?,
            )),
            MASTEREDITIONV2_LEN => Ok(TokenMetadataProgramState::MasterEditionV2(
                MasterEditionV2::from_bytes(data_bytes)?,
            )),
            MASTEREDITIONV1_LEN => Ok(TokenMetadataProgramState::MasterEditionV1(
                MasterEditionV1::from_bytes(data_bytes)?,
            )),
            METADATA_LEN => Ok(TokenMetadataProgramState::Metadata(Metadata::from_bytes(
                data_bytes,
            )?)),
            TOKENRECORD_LEN => Ok(TokenMetadataProgramState::TokenRecord(
                TokenRecord::from_bytes(data_bytes)?,
            )),
            RESERVATIONLISTV2_LEN => Ok(TokenMetadataProgramState::ReservationListV2(
                ReservationListV2::from_bytes(data_bytes)?,
            )),
            RESERVATIONLISTV1_LEN => Ok(TokenMetadataProgramState::ReservationListV1(
                ReservationListV1::from_bytes(data_bytes)?,
            )),
            UseAuthorityRecord::LEN => Ok(TokenMetadataProgramState::UseAuthorityRecord(
                UseAuthorityRecord::from_bytes(data_bytes)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account data length".to_owned(),
            )),
        }
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = TokenMetadataProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "token_metadata::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        TokenMetadataProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}
