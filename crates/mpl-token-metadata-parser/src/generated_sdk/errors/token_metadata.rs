//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum TokenMetadataError {
    /// 0 -
    #[error("")]
    InstructionUnpackError = 0x0,
    /// 1 -
    #[error("")]
    InstructionPackError = 0x1,
    /// 2 - Lamport balance below rent-exempt threshold
    #[error("Lamport balance below rent-exempt threshold")]
    NotRentExempt = 0x2,
    /// 3 - Already initialized
    #[error("Already initialized")]
    AlreadyInitialized = 0x3,
    /// 4 - Uninitialized
    #[error("Uninitialized")]
    Uninitialized = 0x4,
    /// 5 -  Metadata's key must match seed of ['metadata', program id, mint] provided
    #[error(" Metadata's key must match seed of ['metadata', program id, mint] provided")]
    InvalidMetadataKey = 0x5,
    /// 6 - Edition's key must match seed of ['metadata', program id, name, 'edition'] provided
    #[error("Edition's key must match seed of ['metadata', program id, name, 'edition'] provided")]
    InvalidEditionKey = 0x6,
    /// 7 - Update Authority given does not match
    #[error("Update Authority given does not match")]
    UpdateAuthorityIncorrect = 0x7,
    /// 8 - Update Authority needs to be signer to update metadata
    #[error("Update Authority needs to be signer to update metadata")]
    UpdateAuthorityIsNotSigner = 0x8,
    /// 9 - You must be the mint authority and signer on this transaction
    #[error("You must be the mint authority and signer on this transaction")]
    NotMintAuthority = 0x9,
    /// 10 - Mint authority provided does not match the authority on the mint
    #[error("Mint authority provided does not match the authority on the mint")]
    InvalidMintAuthority = 0xa,
    /// 11 - Name too long
    #[error("Name too long")]
    NameTooLong = 0xb,
    /// 12 - Symbol too long
    #[error("Symbol too long")]
    SymbolTooLong = 0xc,
    /// 13 - URI too long
    #[error("URI too long")]
    UriTooLong = 0xd,
    /// 14 -
    #[error("")]
    UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner = 0xe,
    /// 15 - Mint given does not match mint on Metadata
    #[error("Mint given does not match mint on Metadata")]
    MintMismatch = 0xf,
    /// 16 - Editions must have exactly one token
    #[error("Editions must have exactly one token")]
    EditionsMustHaveExactlyOneToken = 0x10,
    /// 17 -
    #[error("")]
    MaxEditionsMintedAlready = 0x11,
    /// 18 -
    #[error("")]
    TokenMintToFailed = 0x12,
    /// 19 -
    #[error("")]
    MasterRecordMismatch = 0x13,
    /// 20 -
    #[error("")]
    DestinationMintMismatch = 0x14,
    /// 21 -
    #[error("")]
    EditionAlreadyMinted = 0x15,
    /// 22 -
    #[error("")]
    PrintingMintDecimalsShouldBeZero = 0x16,
    /// 23 -
    #[error("")]
    OneTimePrintingAuthorizationMintDecimalsShouldBeZero = 0x17,
    /// 24 - EditionMintDecimalsShouldBeZero
    #[error("EditionMintDecimalsShouldBeZero")]
    EditionMintDecimalsShouldBeZero = 0x18,
    /// 25 -
    #[error("")]
    TokenBurnFailed = 0x19,
    /// 26 -
    #[error("")]
    TokenAccountOneTimeAuthMintMismatch = 0x1a,
    /// 27 - Derived key invalid
    #[error("Derived key invalid")]
    DerivedKeyInvalid = 0x1b,
    /// 28 - The Printing mint does not match that on the master edition!
    #[error("The Printing mint does not match that on the master edition!")]
    PrintingMintMismatch = 0x1c,
    /// 29 - The One Time Printing Auth mint does not match that on the master edition!
    #[error("The One Time Printing Auth mint does not match that on the master edition!")]
    OneTimePrintingAuthMintMismatch = 0x1d,
    /// 30 - The mint of the token account does not match the Printing mint!
    #[error("The mint of the token account does not match the Printing mint!")]
    TokenAccountMintMismatch = 0x1e,
    /// 31 - The mint of the token account does not match the master metadata mint!
    #[error("The mint of the token account does not match the master metadata mint!")]
    TokenAccountMintMismatchV2 = 0x1f,
    /// 32 - Not enough tokens to mint a limited edition
    #[error("Not enough tokens to mint a limited edition")]
    NotEnoughTokens = 0x20,
    /// 33 -
    #[error("")]
    PrintingMintAuthorizationAccountMismatch = 0x21,
    /// 34 -
    #[error("")]
    AuthorizationTokenAccountOwnerMismatch = 0x22,
    /// 35 -
    #[error("")]
    Disabled = 0x23,
    /// 36 - Creators list too long
    #[error("Creators list too long")]
    CreatorsTooLong = 0x24,
    /// 37 - Creators must be at least one if set
    #[error("Creators must be at least one if set")]
    CreatorsMustBeAtleastOne = 0x25,
    /// 38 -
    #[error("")]
    MustBeOneOfCreators = 0x26,
    /// 39 - This metadata does not have creators
    #[error("This metadata does not have creators")]
    NoCreatorsPresentOnMetadata = 0x27,
    /// 40 - This creator address was not found
    #[error("This creator address was not found")]
    CreatorNotFound = 0x28,
    /// 41 - Basis points cannot be more than 10000
    #[error("Basis points cannot be more than 10000")]
    InvalidBasisPoints = 0x29,
    /// 42 - Primary sale can only be flipped to true and is immutable
    #[error("Primary sale can only be flipped to true and is immutable")]
    PrimarySaleCanOnlyBeFlippedToTrue = 0x2a,
    /// 43 - Owner does not match that on the account given
    #[error("Owner does not match that on the account given")]
    OwnerMismatch = 0x2b,
    /// 44 - This account has no tokens to be used for authorization
    #[error("This account has no tokens to be used for authorization")]
    NoBalanceInAccountForAuthorization = 0x2c,
    /// 45 - Share total must equal 100 for creator array
    #[error("Share total must equal 100 for creator array")]
    ShareTotalMustBe100 = 0x2d,
    /// 46 -
    #[error("")]
    ReservationExists = 0x2e,
    /// 47 -
    #[error("")]
    ReservationDoesNotExist = 0x2f,
    /// 48 -
    #[error("")]
    ReservationNotSet = 0x30,
    /// 49 -
    #[error("")]
    ReservationAlreadyMade = 0x31,
    /// 50 -
    #[error("")]
    BeyondMaxAddressSize = 0x32,
    /// 51 - NumericalOverflowError
    #[error("NumericalOverflowError")]
    NumericalOverflowError = 0x33,
    /// 52 -
    #[error("")]
    ReservationBreachesMaximumSupply = 0x34,
    /// 53 -
    #[error("")]
    AddressNotInReservation = 0x35,
    /// 54 - You cannot unilaterally verify another creator, they must sign
    #[error("You cannot unilaterally verify another creator, they must sign")]
    CannotVerifyAnotherCreator = 0x36,
    /// 55 - You cannot unilaterally unverify another creator
    #[error("You cannot unilaterally unverify another creator")]
    CannotUnverifyAnotherCreator = 0x37,
    /// 56 -
    #[error("")]
    SpotMismatch = 0x38,
    /// 57 - Incorrect account owner
    #[error("Incorrect account owner")]
    IncorrectOwner = 0x39,
    /// 58 -
    #[error("")]
    PrintingWouldBreachMaximumSupply = 0x3a,
    /// 59 - Data is immutable
    #[error("Data is immutable")]
    DataIsImmutable = 0x3b,
    /// 60 - No duplicate creator addresses
    #[error("No duplicate creator addresses")]
    DuplicateCreatorAddress = 0x3c,
    /// 61 -
    #[error("")]
    ReservationSpotsRemainingShouldMatchTotalSpotsAtStart = 0x3d,
    /// 62 - Invalid token program
    #[error("Invalid token program")]
    InvalidTokenProgram = 0x3e,
    /// 63 - Data type mismatch
    #[error("Data type mismatch")]
    DataTypeMismatch = 0x3f,
    /// 64 -
    #[error("")]
    BeyondAlottedAddressSize = 0x40,
    /// 65 -
    #[error("")]
    ReservationNotComplete = 0x41,
    /// 66 -
    #[error("")]
    TriedToReplaceAnExistingReservation = 0x42,
    /// 67 - Invalid operation
    #[error("Invalid operation")]
    InvalidOperation = 0x43,
    /// 68 - Invalid Owner
    #[error("Invalid Owner")]
    InvalidOwner = 0x44,
    /// 69 - Printing mint supply must be zero for conversion
    #[error("Printing mint supply must be zero for conversion")]
    PrintingMintSupplyMustBeZeroForConversion = 0x45,
    /// 70 - One Time Auth mint supply must be zero for conversion
    #[error("One Time Auth mint supply must be zero for conversion")]
    OneTimeAuthMintSupplyMustBeZeroForConversion = 0x46,
    /// 71 - You tried to insert one edition too many into an edition mark pda
    #[error("You tried to insert one edition too many into an edition mark pda")]
    InvalidEditionIndex = 0x47,
    /// 72 -
    #[error("")]
    ReservationArrayShouldBeSizeOne = 0x48,
    /// 73 - Is Mutable can only be flipped to false
    #[error("Is Mutable can only be flipped to false")]
    IsMutableCanOnlyBeFlippedToFalse = 0x49,
    /// 74 - Collection cannot be verified in this instruction
    #[error("Collection cannot be verified in this instruction")]
    CollectionCannotBeVerifiedInThisInstruction = 0x4a,
    /// 75 - This instruction was deprecated in a previous release and is now removed
    #[error("This instruction was deprecated in a previous release and is now removed")]
    Removed = 0x4b,
    /// 76 -
    #[error("")]
    MustBeBurned = 0x4c,
    /// 77 - This use method is invalid
    #[error("This use method is invalid")]
    InvalidUseMethod = 0x4d,
    /// 78 - Cannot Change Use Method after the first use
    #[error("Cannot Change Use Method after the first use")]
    CannotChangeUseMethodAfterFirstUse = 0x4e,
    /// 79 - Cannot Change Remaining or Available uses after the first use
    #[error("Cannot Change Remaining or Available uses after the first use")]
    CannotChangeUsesAfterFirstUse = 0x4f,
    /// 80 - Collection Not Found on Metadata
    #[error("Collection Not Found on Metadata")]
    CollectionNotFound = 0x50,
    /// 81 - Collection Update Authority is invalid
    #[error("Collection Update Authority is invalid")]
    InvalidCollectionUpdateAuthority = 0x51,
    /// 82 - Collection Must Be a Unique Master Edition v2
    #[error("Collection Must Be a Unique Master Edition v2")]
    CollectionMustBeAUniqueMasterEdition = 0x52,
    /// 83 - The Use Authority Record Already Exists, to modify it Revoke, then Approve
    #[error("The Use Authority Record Already Exists, to modify it Revoke, then Approve")]
    UseAuthorityRecordAlreadyExists = 0x53,
    /// 84 - The Use Authority Record is empty or already revoked
    #[error("The Use Authority Record is empty or already revoked")]
    UseAuthorityRecordAlreadyRevoked = 0x54,
    /// 85 - This token has no uses
    #[error("This token has no uses")]
    Unusable = 0x55,
    /// 86 - There are not enough Uses left on this token.
    #[error("There are not enough Uses left on this token.")]
    NotEnoughUses = 0x56,
    /// 87 - This Collection Authority Record Already Exists.
    #[error("This Collection Authority Record Already Exists.")]
    CollectionAuthorityRecordAlreadyExists = 0x57,
    /// 88 - This Collection Authority Record Does Not Exist.
    #[error("This Collection Authority Record Does Not Exist.")]
    CollectionAuthorityDoesNotExist = 0x58,
    /// 89 - This Use Authority Record is invalid.
    #[error("This Use Authority Record is invalid.")]
    InvalidUseAuthorityRecord = 0x59,
    /// 90 -
    #[error("")]
    InvalidCollectionAuthorityRecord = 0x5a,
    /// 91 - Metadata does not match the freeze authority on the mint
    #[error("Metadata does not match the freeze authority on the mint")]
    InvalidFreezeAuthority = 0x5b,
    /// 92 - All tokens in this account have not been delegated to this user.
    #[error("All tokens in this account have not been delegated to this user.")]
    InvalidDelegate = 0x5c,
    /// 93 -
    #[error("")]
    CannotAdjustVerifiedCreator = 0x5d,
    /// 94 - Verified creators cannot be removed.
    #[error("Verified creators cannot be removed.")]
    CannotRemoveVerifiedCreator = 0x5e,
    /// 95 -
    #[error("")]
    CannotWipeVerifiedCreators = 0x5f,
    /// 96 -
    #[error("")]
    NotAllowedToChangeSellerFeeBasisPoints = 0x60,
    /// 97 - Edition override cannot be zero
    #[error("Edition override cannot be zero")]
    EditionOverrideCannotBeZero = 0x61,
    /// 98 - Invalid User
    #[error("Invalid User")]
    InvalidUser = 0x62,
    /// 99 - Revoke Collection Authority signer is incorrect
    #[error("Revoke Collection Authority signer is incorrect")]
    RevokeCollectionAuthoritySignerIncorrect = 0x63,
    /// 100 -
    #[error("")]
    TokenCloseFailed = 0x64,
    /// 101 - Can't use this function on unsized collection
    #[error("Can't use this function on unsized collection")]
    UnsizedCollection = 0x65,
    /// 102 - Can't use this function on a sized collection
    #[error("Can't use this function on a sized collection")]
    SizedCollection = 0x66,
    /// 103 - Missing collection metadata account
    #[error("Missing collection metadata account")]
    MissingCollectionMetadata = 0x67,
    /// 104 - This NFT is not a member of the specified collection.
    #[error("This NFT is not a member of the specified collection.")]
    NotAMemberOfCollection = 0x68,
    /// 105 - This NFT is not a verified member of the specified collection.
    #[error("This NFT is not a verified member of the specified collection.")]
    NotVerifiedMemberOfCollection = 0x69,
    /// 106 - This NFT is not a collection parent NFT.
    #[error("This NFT is not a collection parent NFT.")]
    NotACollectionParent = 0x6a,
    /// 107 - Could not determine a TokenStandard type.
    #[error("Could not determine a TokenStandard type.")]
    CouldNotDetermineTokenStandard = 0x6b,
    /// 108 - This mint account has an edition but none was provided.
    #[error("This mint account has an edition but none was provided.")]
    MissingEditionAccount = 0x6c,
    /// 109 - This edition is not a Master Edition
    #[error("This edition is not a Master Edition")]
    NotAMasterEdition = 0x6d,
    /// 110 - This Master Edition has existing prints
    #[error("This Master Edition has existing prints")]
    MasterEditionHasPrints = 0x6e,
    /// 111 -
    #[error("")]
    BorshDeserializationError = 0x6f,
    /// 112 - Cannot update a verified collection in this command
    #[error("Cannot update a verified collection in this command")]
    CannotUpdateVerifiedCollection = 0x70,
    /// 113 - Edition account doesnt match collection
    #[error("Edition account doesnt match collection ")]
    CollectionMasterEditionAccountInvalid = 0x71,
    /// 114 - Item is already verified.
    #[error("Item is already verified.")]
    AlreadyVerified = 0x72,
    /// 115 -
    #[error("")]
    AlreadyUnverified = 0x73,
    /// 116 - This edition is not a Print Edition
    #[error("This edition is not a Print Edition")]
    NotAPrintEdition = 0x74,
    /// 117 - Invalid Master Edition
    #[error("Invalid Master Edition")]
    InvalidMasterEdition = 0x75,
    /// 118 - Invalid Print Edition
    #[error("Invalid Print Edition")]
    InvalidPrintEdition = 0x76,
    /// 119 - Invalid Edition Marker
    #[error("Invalid Edition Marker")]
    InvalidEditionMarker = 0x77,
    /// 120 - Reservation List is Deprecated
    #[error("Reservation List is Deprecated")]
    ReservationListDeprecated = 0x78,
    /// 121 - Print Edition does not match Master Edition
    #[error("Print Edition does not match Master Edition")]
    PrintEditionDoesNotMatchMasterEdition = 0x79,
    /// 122 - Edition Number greater than max supply
    #[error("Edition Number greater than max supply")]
    EditionNumberGreaterThanMaxSupply = 0x7a,
    /// 123 - Must unverify before migrating collections.
    #[error("Must unverify before migrating collections.")]
    MustUnverify = 0x7b,
    /// 124 - Invalid Escrow Account Bump Seed
    #[error("Invalid Escrow Account Bump Seed")]
    InvalidEscrowBumpSeed = 0x7c,
    /// 125 - Must Escrow Authority
    #[error("Must Escrow Authority")]
    MustBeEscrowAuthority = 0x7d,
    /// 126 - Invalid System Program
    #[error("Invalid System Program")]
    InvalidSystemProgram = 0x7e,
    /// 127 - Must be a Non Fungible Token
    #[error("Must be a Non Fungible Token")]
    MustBeNonFungible = 0x7f,
    /// 128 - Insufficient tokens for transfer
    #[error("Insufficient tokens for transfer")]
    InsufficientTokens = 0x80,
    /// 129 - Borsh Serialization Error
    #[error("Borsh Serialization Error")]
    BorshSerializationError = 0x81,
    /// 130 - Cannot create NFT with no Freeze Authority.
    #[error("Cannot create NFT with no Freeze Authority.")]
    NoFreezeAuthoritySet = 0x82,
    /// 131 - Invalid collection size change
    #[error("Invalid collection size change")]
    InvalidCollectionSizeChange = 0x83,
    /// 132 - Invalid bubblegum signer
    #[error("Invalid bubblegum signer")]
    InvalidBubblegumSigner = 0x84,
    /// 133 - Escrow parent cannot have a delegate
    #[error("Escrow parent cannot have a delegate")]
    EscrowParentHasDelegate = 0x85,
    /// 134 - Mint needs to be signer to initialize the account
    #[error("Mint needs to be signer to initialize the account")]
    MintIsNotSigner = 0x86,
    /// 135 - Invalid token standard
    #[error("Invalid token standard")]
    InvalidTokenStandard = 0x87,
    /// 136 - Invalid mint account for specified token standard
    #[error("Invalid mint account for specified token standard")]
    InvalidMintForTokenStandard = 0x88,
    /// 137 - Invalid authorization rules account
    #[error("Invalid authorization rules account")]
    InvalidAuthorizationRules = 0x89,
    /// 138 - Missing authorization rules account
    #[error("Missing authorization rules account")]
    MissingAuthorizationRules = 0x8a,
    /// 139 - Missing programmable configuration
    #[error("Missing programmable configuration")]
    MissingProgrammableConfig = 0x8b,
    /// 140 - Invalid programmable configuration
    #[error("Invalid programmable configuration")]
    InvalidProgrammableConfig = 0x8c,
    /// 141 - Delegate already exists
    #[error("Delegate already exists")]
    DelegateAlreadyExists = 0x8d,
    /// 142 - Delegate not found
    #[error("Delegate not found")]
    DelegateNotFound = 0x8e,
    /// 143 - Required account not set in instruction builder
    #[error("Required account not set in instruction builder")]
    MissingAccountInBuilder = 0x8f,
    /// 144 - Required argument not set in instruction builder
    #[error("Required argument not set in instruction builder")]
    MissingArgumentInBuilder = 0x90,
    /// 145 - Feature not supported currently
    #[error("Feature not supported currently")]
    FeatureNotSupported = 0x91,
    /// 146 - Invalid system wallet
    #[error("Invalid system wallet")]
    InvalidSystemWallet = 0x92,
    /// 147 - Only the sale delegate can transfer while its set
    #[error("Only the sale delegate can transfer while its set")]
    OnlySaleDelegateCanTransfer = 0x93,
    /// 148 - Missing token account
    #[error("Missing token account")]
    MissingTokenAccount = 0x94,
    /// 149 - Missing SPL token program
    #[error("Missing SPL token program")]
    MissingSplTokenProgram = 0x95,
    /// 150 - Missing authorization rules program
    #[error("Missing authorization rules program")]
    MissingAuthorizationRulesProgram = 0x96,
    /// 151 - Invalid delegate role for transfer
    #[error("Invalid delegate role for transfer")]
    InvalidDelegateRoleForTransfer = 0x97,
    /// 152 - Invalid transfer authority
    #[error("Invalid transfer authority")]
    InvalidTransferAuthority = 0x98,
    /// 153 - Instruction not supported for ProgrammableNonFungible assets
    #[error("Instruction not supported for ProgrammableNonFungible assets")]
    InstructionNotSupported = 0x99,
    /// 154 - Public key does not match expected value
    #[error("Public key does not match expected value")]
    KeyMismatch = 0x9a,
    /// 155 - Token is locked
    #[error("Token is locked")]
    LockedToken = 0x9b,
    /// 156 - Token is unlocked
    #[error("Token is unlocked")]
    UnlockedToken = 0x9c,
    /// 157 - Missing delegate role
    #[error("Missing delegate role")]
    MissingDelegateRole = 0x9d,
    /// 158 - Invalid authority type
    #[error("Invalid authority type")]
    InvalidAuthorityType = 0x9e,
    /// 159 - Missing token record account
    #[error("Missing token record account")]
    MissingTokenRecord = 0x9f,
    /// 160 - Mint supply must be zero for programmable assets
    #[error("Mint supply must be zero for programmable assets")]
    MintSupplyMustBeZero = 0xa0,
    /// 161 - Data is empty or zeroed
    #[error("Data is empty or zeroed")]
    DataIsEmptyOrZeroed = 0xa1,
    /// 162 - Missing token owner
    #[error("Missing token owner")]
    MissingTokenOwnerAccount = 0xa2,
    /// 163 - Master edition account has an invalid length
    #[error("Master edition account has an invalid length")]
    InvalidMasterEditionAccountLength = 0xa3,
    /// 164 - Incorrect token state
    #[error("Incorrect token state")]
    IncorrectTokenState = 0xa4,
    /// 165 - Invalid delegate role
    #[error("Invalid delegate role")]
    InvalidDelegateRole = 0xa5,
    /// 166 - Print supply is required for non-fungibles
    #[error("Print supply is required for non-fungibles")]
    MissingPrintSupply = 0xa6,
    /// 167 - Missing master edition account
    #[error("Missing master edition account")]
    MissingMasterEditionAccount = 0xa7,
    /// 168 - Amount must be greater than zero
    #[error("Amount must be greater than zero")]
    AmountMustBeGreaterThanZero = 0xa8,
    /// 169 - Invalid delegate args
    #[error("Invalid delegate args")]
    InvalidDelegateArgs = 0xa9,
    /// 170 - Missing address for locked transfer
    #[error("Missing address for locked transfer")]
    MissingLockedTransferAddress = 0xaa,
    /// 171 - Invalid destination address for locked transfer
    #[error("Invalid destination address for locked transfer")]
    InvalidLockedTransferAddress = 0xab,
    /// 172 - Exceeded account realloc increase limit
    #[error("Exceeded account realloc increase limit")]
    DataIncrementLimitExceeded = 0xac,
    /// 173 - Cannot update the rule set of a programmable asset that has a delegate
    #[error("Cannot update the rule set of a programmable asset that has a delegate")]
    CannotUpdateAssetWithDelegate = 0xad,
    /// 174 - Invalid token amount for this operation or token standard
    #[error("Invalid token amount for this operation or token standard")]
    InvalidAmount = 0xae,
    /// 175 - Missing master edition mint account
    #[error("Missing master edition mint account")]
    MissingMasterEditionMintAccount = 0xaf,
    /// 176 - Missing master edition token account
    #[error("Missing master edition token account")]
    MissingMasterEditionTokenAccount = 0xb0,
    /// 177 - Missing edition marker account
    #[error("Missing edition marker account")]
    MissingEditionMarkerAccount = 0xb1,
    /// 178 - Cannot burn while persistent delegate is set
    #[error("Cannot burn while persistent delegate is set")]
    CannotBurnWithDelegate = 0xb2,
    /// 179 - Missing edition account
    #[error("Missing edition account")]
    MissingEdition = 0xb3,
    /// 180 - Invalid Associated Token Account Program
    #[error("Invalid Associated Token Account Program")]
    InvalidAssociatedTokenAccountProgram = 0xb4,
    /// 181 - Invalid InstructionsSysvar
    #[error("Invalid InstructionsSysvar")]
    InvalidInstructionsSysvar = 0xb5,
    /// 182 - Invalid or Unneeded parent accounts
    #[error("Invalid or Unneeded parent accounts")]
    InvalidParentAccounts = 0xb6,
    /// 183 - Authority cannot apply all update args
    #[error("Authority cannot apply all update args")]
    InvalidUpdateArgs = 0xb7,
    /// 184 - Token account does not have enough tokens
    #[error("Token account does not have enough tokens")]
    InsufficientTokenBalance = 0xb8,
    /// 185 - Missing collection account
    #[error("Missing collection account")]
    MissingCollectionMint = 0xb9,
    /// 186 - Missing collection master edition account
    #[error("Missing collection master edition account")]
    MissingCollectionMasterEdition = 0xba,
    /// 187 - Invalid token record account
    #[error("Invalid token record account")]
    InvalidTokenRecord = 0xbb,
    /// 188 - The close authority needs to be revoked by the Utility Delegate
    #[error("The close authority needs to be revoked by the Utility Delegate")]
    InvalidCloseAuthority = 0xbc,
    /// 189 - Invalid or removed instruction
    #[error("Invalid or removed instruction")]
    InvalidInstruction = 0xbd,
    /// 190 - Missing delegate record
    #[error("Missing delegate record")]
    MissingDelegateRecord = 0xbe,
    /// 191 -
    #[error("")]
    InvalidFeeAccount = 0xbf,
    /// 192 -
    #[error("")]
    InvalidMetadataFlags = 0xc0,
    /// 193 - Cannot change the update authority with a delegate
    #[error("Cannot change the update authority with a delegate")]
    CannotChangeUpdateAuthorityWithDelegate = 0xc1,
    /// 194 - Invalid mint extension type
    #[error("Invalid mint extension type")]
    InvalidMintExtensionType = 0xc2,
    /// 195 - Invalid mint close authority
    #[error("Invalid mint close authority")]
    InvalidMintCloseAuthority = 0xc3,
    /// 196 - Invalid metadata pointer
    #[error("Invalid metadata pointer")]
    InvalidMetadataPointer = 0xc4,
    /// 197 - Invalid token extension type
    #[error("Invalid token extension type")]
    InvalidTokenExtensionType = 0xc5,
    /// 198 - Missing immutable owner extension
    #[error("Missing immutable owner extension")]
    MissingImmutableOwnerExtension = 0xc6,
    /// 199 - Expected account to be uninitialized
    #[error("Expected account to be uninitialized")]
    ExpectedUninitializedAccount = 0xc7,
    /// 200 - Edition account has an invalid length
    #[error("Edition account has an invalid length")]
    InvalidEditionAccountLength = 0xc8,
    /// 201 - Account has already been resized
    #[error("Account has already been resized")]
    AccountAlreadyResized = 0xc9,
    /// 202 - Conditions for closing not met
    #[error("Conditions for closing not met")]
    ConditionsForClosingNotMet = 0xca,
}

impl solana_program::program_error::PrintProgramError for TokenMetadataError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for TokenMetadataError {
    fn type_of() -> &'static str { "TokenMetadataError" }
}
