//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

use crate::generated::types::{RewardInfo, TokenInfo};

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct FarmState {
    pub discriminator: [u8; 8],
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub farm_admin: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub global_config: Pubkey,
    pub token: TokenInfo,
    pub reward_infos: [RewardInfo; 10],
    pub num_reward_tokens: u64,
    /// Data used to calculate the rewards of the user
    pub num_users: u64,
    /// The number of token in the `farm_vault` staked (getting rewards and fees)
    /// Set such as `farm_vault.amount = total_staked_amount + total_pending_amount`
    pub total_staked_amount: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub farm_vault: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub farm_vaults_authority: Pubkey,
    pub farm_vaults_authority_bump: u64,
    /// Only used for delegate farms
    /// Set to `default()` otherwise
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub delegate_authority: Pubkey,
    /// Raw representation of a `TimeUnit`
    /// Seconds = 0, Slots = 1
    pub time_unit: u8,
    /// Automatically set to true in case of a full authority withdrawal
    /// If true, the farm is frozen and no more deposits are allowed
    pub is_farm_frozen: u8,
    /// Indicates if the farm is a delegate farm
    /// If true, the farm is a delegate farm and the `delegate_authority` is set*
    pub is_farm_delegated: u8,
    pub padding0: [u8; 5],
    /// Withdraw authority for the farm, allowed to lock deposited funds and withdraw them
    /// Set to `default()` if unused (only the depositors can withdraw their funds)
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub withdraw_authority: Pubkey,
    /// Delay between a user deposit and the moment it is considered as staked
    /// 0 if unused
    pub deposit_warmup_period: u32,
    /// Delay between a user unstake and the ability to withdraw his deposit.
    pub withdrawal_cooldown_period: u32,
    /// Total active stake of tokens in the farm (scaled from `Decimal` representation).
    pub total_active_stake_scaled: u128,
    /// Total pending stake of tokens in the farm (scaled from `Decimal` representation).
    /// (can be used by `withdraw_authority` but don't get rewards or fees)
    pub total_pending_stake_scaled: u128,
    /// Total pending amount of tokens in the farm
    pub total_pending_amount: u64,
    /// Slashed amounts from early withdrawal
    pub slashed_amount_current: u64,
    pub slashed_amount_cumulative: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub slashed_amount_spill_address: Pubkey,
    /// Locking stake
    pub locking_mode: u64,
    pub locking_start_timestamp: u64,
    pub locking_duration: u64,
    pub locking_early_withdrawal_penalty_bps: u64,
    pub deposit_cap_amount: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub scope_prices: Pubkey,
    pub scope_oracle_price_id: u64,
    pub scope_oracle_max_age: u64,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pending_farm_admin: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub strategy_id: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub delegated_rps_admin: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub vault_id: Pubkey,
    #[cfg_attr(feature = "serde", serde(with = "serde_big_array::BigArray"))]
    pub padding: [u64; 78],
}

impl FarmState {
    pub const LEN: usize = 8336;

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for FarmState {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}

#[cfg(feature = "fetch")]
pub fn fetch_farm_state(
    rpc: &solana_client::rpc_client::RpcClient,
    address: &solana_program::pubkey::Pubkey,
) -> Result<crate::shared::DecodedAccount<FarmState>, std::io::Error> {
    let accounts = fetch_all_farm_state(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_farm_state(
    rpc: &solana_client::rpc_client::RpcClient,
    addresses: &[solana_program::pubkey::Pubkey],
) -> Result<Vec<crate::shared::DecodedAccount<FarmState>>, std::io::Error> {
    let accounts = rpc
        .get_multiple_accounts(addresses)
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::DecodedAccount<FarmState>> = Vec::new();
    for i in 0..addresses.len() {
        let address = addresses[i];
        let account = accounts[i].as_ref().ok_or(std::io::Error::new(
            std::io::ErrorKind::Other,
            format!("Account not found: {}", address),
        ))?;
        let data = FarmState::from_bytes(&account.data)?;
        decoded_accounts.push(crate::shared::DecodedAccount {
            address,
            account: account.clone(),
            data,
        });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
pub fn fetch_maybe_farm_state(
    rpc: &solana_client::rpc_client::RpcClient,
    address: &solana_program::pubkey::Pubkey,
) -> Result<crate::shared::MaybeAccount<FarmState>, std::io::Error> {
    let accounts = fetch_all_maybe_farm_state(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_farm_state(
    rpc: &solana_client::rpc_client::RpcClient,
    addresses: &[solana_program::pubkey::Pubkey],
) -> Result<Vec<crate::shared::MaybeAccount<FarmState>>, std::io::Error> {
    let accounts = rpc
        .get_multiple_accounts(addresses)
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::MaybeAccount<FarmState>> = Vec::new();
    for i in 0..addresses.len() {
        let address = addresses[i];
        if let Some(account) = accounts[i].as_ref() {
            let data = FarmState::from_bytes(&account.data)?;
            decoded_accounts.push(crate::shared::MaybeAccount::Exists(
                crate::shared::DecodedAccount {
                    address,
                    account: account.clone(),
                    data,
                },
            ));
        } else {
            decoded_accounts.push(crate::shared::MaybeAccount::NotFound(address));
        }
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for FarmState {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for FarmState {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for FarmState {
    fn owner() -> Pubkey { crate::FARMS_ID }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for FarmState {}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for FarmState {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
}
