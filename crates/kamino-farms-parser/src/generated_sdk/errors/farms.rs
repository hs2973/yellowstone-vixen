//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum FarmsError {
    /// 6000 - Cannot stake 0 amount
    #[error("Cannot stake 0 amount")]
    StakeZero = 0x1770,
    /// 6001 - Cannot unstake 0 amount
    #[error("Cannot unstake 0 amount")]
    UnstakeZero = 0x1771,
    /// 6002 - Nothing to unstake
    #[error("Nothing to unstake")]
    NothingToUnstake = 0x1772,
    /// 6003 - No reward to harvest
    #[error("No reward to harvest")]
    NoRewardToHarvest = 0x1773,
    /// 6004 - Reward not present in reward list
    #[error("Reward not present in reward list")]
    NoRewardInList = 0x1774,
    /// 6005 - Reward already initialized
    #[error("Reward already initialized")]
    RewardAlreadyInitialized = 0x1775,
    /// 6006 - Max number of reward tokens reached
    #[error("Max number of reward tokens reached")]
    MaxRewardNumberReached = 0x1776,
    /// 6007 - Reward does not exist
    #[error("Reward does not exist")]
    RewardDoesNotExist = 0x1777,
    /// 6008 - Reward vault exists but the account is wrong
    #[error("Reward vault exists but the account is wrong")]
    WrongRewardVaultAccount = 0x1778,
    /// 6009 - Reward vault pubkey does not match staking pool vault
    #[error("Reward vault pubkey does not match staking pool vault")]
    RewardVaultMismatch = 0x1779,
    /// 6010 - Reward vault authority pubkey does not match staking pool vault
    #[error("Reward vault authority pubkey does not match staking pool vault")]
    RewardVaultAuthorityMismatch = 0x177a,
    /// 6011 - Nothing staked, cannot collect any rewards
    #[error("Nothing staked, cannot collect any rewards")]
    NothingStaked = 0x177b,
    /// 6012 - Integer overflow
    #[error("Integer overflow")]
    IntegerOverflow = 0x177c,
    /// 6013 - Conversion failure
    #[error("Conversion failure")]
    ConversionFailure = 0x177d,
    /// 6014 - Unexpected account in instruction
    #[error("Unexpected account in instruction")]
    UnexpectedAccount = 0x177e,
    /// 6015 - Operation forbidden
    #[error("Operation forbidden")]
    OperationForbidden = 0x177f,
    /// 6016 - Mathematical operation with overflow
    #[error("Mathematical operation with overflow")]
    MathOverflow = 0x1780,
    /// 6017 - Minimum claim duration has not been reached
    #[error("Minimum claim duration has not been reached")]
    MinClaimDurationNotReached = 0x1781,
    /// 6018 - Reward vault has a delegate
    #[error("Reward vault has a delegate")]
    RewardsVaultHasDelegate = 0x1782,
    /// 6019 - Reward vault has a close authority
    #[error("Reward vault has a close authority")]
    RewardsVaultHasCloseAuthority = 0x1783,
    /// 6020 - Farm vault has a delegate
    #[error("Farm vault has a delegate")]
    FarmVaultHasDelegate = 0x1784,
    /// 6021 - Farm vault has a close authority
    #[error("Farm vault has a close authority")]
    FarmVaultHasCloseAuthority = 0x1785,
    /// 6022 - Reward vault has a delegate
    #[error("Reward vault has a delegate")]
    RewardsTreasuryVaultHasDelegate = 0x1786,
    /// 6023 - Reward vault has a close authority
    #[error("Reward vault has a close authority")]
    RewardsTreasuryVaultHasCloseAuthority = 0x1787,
    /// 6024 - User ata and reward vault have different mints
    #[error("User ata and reward vault have different mints")]
    UserAtaRewardVaultMintMissmatch = 0x1788,
    /// 6025 - User ata and farm token have different mints
    #[error("User ata and farm token have different mints")]
    UserAtaFarmTokenMintMissmatch = 0x1789,
    /// 6026 - Token mint and farm token have different mints
    #[error("Token mint and farm token have different mints")]
    TokenFarmTokenMintMissmatch = 0x178a,
    /// 6027 - Reward ata mint is different than reward mint
    #[error("Reward ata mint is different than reward mint")]
    RewardAtaRewardMintMissmatch = 0x178b,
    /// 6028 - Reward ata owner is different than payer
    #[error("Reward ata owner is different than payer")]
    RewardAtaOwnerNotPayer = 0x178c,
    /// 6029 - Mode to update global_config is invalid
    #[error("Mode to update global_config is invalid")]
    InvalidGlobalConfigMode = 0x178d,
    /// 6030 - Reward Index is higher than number of rewards
    #[error("Reward Index is higher than number of rewards")]
    RewardIndexOutOfRange = 0x178e,
    /// 6031 - No tokens available to withdraw
    #[error("No tokens available to withdraw")]
    NothingToWithdraw = 0x178f,
    /// 6032 - user, user_ref, authority and payer must match for non-delegated farm
    #[error("user, user_ref, authority and payer must match for non-delegated farm")]
    UserDelegatedFarmNonDelegatedMissmatch = 0x1790,
    /// 6033 - Authority must match farm delegate authority
    #[error("Authority must match farm delegate authority")]
    AuthorityFarmDelegateMissmatch = 0x1791,
    /// 6034 - Farm not delegated, can not set stake
    #[error("Farm not delegated, can not set stake")]
    FarmNotDelegated = 0x1792,
    /// 6035 - Operation not allowed for delegated farm
    #[error("Operation not allowed for delegated farm")]
    FarmDelegated = 0x1793,
    /// 6036 - Unstake lockup period is not elapsed. Deposit is locked until end of unstake period
    #[error("Unstake lockup period is not elapsed. Deposit is locked until end of unstake period")]
    UnstakeNotElapsed = 0x1794,
    /// 6037 - Pending withdrawal already exist and not withdrawn yet
    #[error("Pending withdrawal already exist and not withdrawn yet")]
    PendingWithdrawalNotWithdrawnYet = 0x1795,
    /// 6038 - Cannot deposit zero amount directly to farm vault
    #[error("Cannot deposit zero amount directly to farm vault")]
    DepositZero = 0x1796,
    /// 6039 - Invalid config value
    #[error("Invalid config value")]
    InvalidConfigValue = 0x1797,
    /// 6040 - Invalid penalty percentage
    #[error("Invalid penalty percentage")]
    InvalidPenaltyPercentage = 0x1798,
    /// 6041 - Early withdrawal not allowed
    #[error("Early withdrawal not allowed")]
    EarlyWithdrawalNotAllowed = 0x1799,
    /// 6042 - Invalid locking timestamps
    #[error("Invalid locking timestamps")]
    InvalidLockingTimestamps = 0x179a,
    /// 6043 - Invalid reward rate curve point
    #[error("Invalid reward rate curve point")]
    InvalidRpsCurvePoint = 0x179b,
    /// 6044 - Invalid timestamp
    #[error("Invalid timestamp")]
    InvalidTimestamp = 0x179c,
    /// 6045 - Deposit cap reached
    #[error("Deposit cap reached")]
    DepositCapReached = 0x179d,
    /// 6046 - Missing Scope Prices
    #[error("Missing Scope Prices")]
    MissingScopePrices = 0x179e,
    /// 6047 - Scope Oracle Price Too Old
    #[error("Scope Oracle Price Too Old")]
    ScopeOraclePriceTooOld = 0x179f,
    /// 6048 - Invalid Oracle Config
    #[error("Invalid Oracle Config")]
    InvalidOracleConfig = 0x17a0,
    /// 6049 - Could not deserialize scope
    #[error("Could not deserialize scope")]
    CouldNotDeserializeScope = 0x17a1,
    /// 6050 - Reward ata owner is different than farm admin
    #[error("Reward ata owner is different than farm admin")]
    RewardAtaOwnerNotAdmin = 0x17a2,
    /// 6051 - Cannot withdraw reward as available amount is zero
    #[error("Cannot withdraw reward as available amount is zero")]
    WithdrawRewardZeroAvailable = 0x17a3,
    /// 6052 - Cannot withdraw reward as reward schedule is set
    #[error("Cannot withdraw reward as reward schedule is set")]
    RewardScheduleCurveSet = 0x17a4,
    /// 6053 - Cannot initialize farm while having a mint with token22 and requested extensions
    #[error("Cannot initialize farm while having a mint with token22 and requested extensions")]
    UnsupportedTokenExtension = 0x17a5,
    /// 6054 - Invalid authority for updating farm config
    #[error("Invalid authority for updating farm config")]
    InvalidFarmConfigUpdateAuthority = 0x17a6,
}

impl solana_program::program_error::PrintProgramError for FarmsError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for FarmsError {
    fn type_of() -> &'static str { "FarmsError" }
}
