//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct WithdrawTreasury {
    pub global_admin: solana_program::pubkey::Pubkey,

    pub global_config: solana_program::pubkey::Pubkey,

    pub reward_mint: solana_program::pubkey::Pubkey,

    pub reward_treasury_vault: solana_program::pubkey::Pubkey,

    pub treasury_vault_authority: solana_program::pubkey::Pubkey,

    pub withdraw_destination_token_account: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl WithdrawTreasury {
    pub fn instruction(
        &self,
        args: WithdrawTreasuryInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: WithdrawTreasuryInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.global_admin,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.reward_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reward_treasury_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.treasury_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.withdraw_destination_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&WithdrawTreasuryInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::FARMS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawTreasuryInstructionData {
    discriminator: [u8; 8],
}

impl WithdrawTreasuryInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [40, 63, 122, 158, 144, 216, 83, 96],
        }
    }
}

impl Default for WithdrawTreasuryInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawTreasuryInstructionArgs {
    pub amount: u64,
}

/// Instruction builder for `WithdrawTreasury`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` global_admin
///   1. `[]` global_config
///   2. `[]` reward_mint
///   3. `[writable]` reward_treasury_vault
///   4. `[]` treasury_vault_authority
///   5. `[writable]` withdraw_destination_token_account
///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct WithdrawTreasuryBuilder {
    global_admin: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    reward_mint: Option<solana_program::pubkey::Pubkey>,
    reward_treasury_vault: Option<solana_program::pubkey::Pubkey>,
    treasury_vault_authority: Option<solana_program::pubkey::Pubkey>,
    withdraw_destination_token_account: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl WithdrawTreasuryBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn global_admin(&mut self, global_admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_admin = Some(global_admin);
        self
    }

    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }

    #[inline(always)]
    pub fn reward_mint(&mut self, reward_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reward_mint = Some(reward_mint);
        self
    }

    #[inline(always)]
    pub fn reward_treasury_vault(
        &mut self,
        reward_treasury_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.reward_treasury_vault = Some(reward_treasury_vault);
        self
    }

    #[inline(always)]
    pub fn treasury_vault_authority(
        &mut self,
        treasury_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.treasury_vault_authority = Some(treasury_vault_authority);
        self
    }

    #[inline(always)]
    pub fn withdraw_destination_token_account(
        &mut self,
        withdraw_destination_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.withdraw_destination_token_account = Some(withdraw_destination_token_account);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = WithdrawTreasury {
            global_admin: self.global_admin.expect("global_admin is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            reward_mint: self.reward_mint.expect("reward_mint is not set"),
            reward_treasury_vault: self
                .reward_treasury_vault
                .expect("reward_treasury_vault is not set"),
            treasury_vault_authority: self
                .treasury_vault_authority
                .expect("treasury_vault_authority is not set"),
            withdraw_destination_token_account: self
                .withdraw_destination_token_account
                .expect("withdraw_destination_token_account is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = WithdrawTreasuryInstructionArgs {
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `withdraw_treasury` CPI accounts.
pub struct WithdrawTreasuryCpiAccounts<'a, 'b> {
    pub global_admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub reward_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub reward_treasury_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub withdraw_destination_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `withdraw_treasury` CPI instruction.
pub struct WithdrawTreasuryCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub reward_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub reward_treasury_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub withdraw_destination_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: WithdrawTreasuryInstructionArgs,
}

impl<'a, 'b> WithdrawTreasuryCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: WithdrawTreasuryCpiAccounts<'a, 'b>,
        args: WithdrawTreasuryInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            global_admin: accounts.global_admin,
            global_config: accounts.global_config,
            reward_mint: accounts.reward_mint,
            reward_treasury_vault: accounts.reward_treasury_vault,
            treasury_vault_authority: accounts.treasury_vault_authority,
            withdraw_destination_token_account: accounts.withdraw_destination_token_account,
            token_program: accounts.token_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.global_admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.reward_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reward_treasury_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.treasury_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.withdraw_destination_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&WithdrawTreasuryInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::FARMS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.global_admin.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.reward_mint.clone());
        account_infos.push(self.reward_treasury_vault.clone());
        account_infos.push(self.treasury_vault_authority.clone());
        account_infos.push(self.withdraw_destination_token_account.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `WithdrawTreasury` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` global_admin
///   1. `[]` global_config
///   2. `[]` reward_mint
///   3. `[writable]` reward_treasury_vault
///   4. `[]` treasury_vault_authority
///   5. `[writable]` withdraw_destination_token_account
///   6. `[]` token_program
#[derive(Clone, Debug)]
pub struct WithdrawTreasuryCpiBuilder<'a, 'b> {
    instruction: Box<WithdrawTreasuryCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> WithdrawTreasuryCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(WithdrawTreasuryCpiBuilderInstruction {
            __program: program,
            global_admin: None,
            global_config: None,
            reward_mint: None,
            reward_treasury_vault: None,
            treasury_vault_authority: None,
            withdraw_destination_token_account: None,
            token_program: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn global_admin(
        &mut self,
        global_admin: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_admin = Some(global_admin);
        self
    }

    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }

    #[inline(always)]
    pub fn reward_mint(
        &mut self,
        reward_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reward_mint = Some(reward_mint);
        self
    }

    #[inline(always)]
    pub fn reward_treasury_vault(
        &mut self,
        reward_treasury_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reward_treasury_vault = Some(reward_treasury_vault);
        self
    }

    #[inline(always)]
    pub fn treasury_vault_authority(
        &mut self,
        treasury_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.treasury_vault_authority = Some(treasury_vault_authority);
        self
    }

    #[inline(always)]
    pub fn withdraw_destination_token_account(
        &mut self,
        withdraw_destination_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.withdraw_destination_token_account =
            Some(withdraw_destination_token_account);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = WithdrawTreasuryInstructionArgs {
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = WithdrawTreasuryCpi {
            __program: self.instruction.__program,

            global_admin: self
                .instruction
                .global_admin
                .expect("global_admin is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            reward_mint: self
                .instruction
                .reward_mint
                .expect("reward_mint is not set"),

            reward_treasury_vault: self
                .instruction
                .reward_treasury_vault
                .expect("reward_treasury_vault is not set"),

            treasury_vault_authority: self
                .instruction
                .treasury_vault_authority
                .expect("treasury_vault_authority is not set"),

            withdraw_destination_token_account: self
                .instruction
                .withdraw_destination_token_account
                .expect("withdraw_destination_token_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct WithdrawTreasuryCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    global_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reward_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reward_treasury_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    treasury_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    withdraw_destination_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
