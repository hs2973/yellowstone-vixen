//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct SetStakeDelegated {
    pub delegate_authority: solana_program::pubkey::Pubkey,

    pub user_state: solana_program::pubkey::Pubkey,

    pub farm_state: solana_program::pubkey::Pubkey,
}

impl SetStakeDelegated {
    pub fn instruction(
        &self,
        args: SetStakeDelegatedInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SetStakeDelegatedInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.delegate_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.farm_state,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&SetStakeDelegatedInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::FARMS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetStakeDelegatedInstructionData {
    discriminator: [u8; 8],
}

impl SetStakeDelegatedInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [73, 171, 184, 75, 30, 56, 198, 223],
        }
    }
}

impl Default for SetStakeDelegatedInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetStakeDelegatedInstructionArgs {
    pub new_amount: u64,
}

/// Instruction builder for `SetStakeDelegated`.
///
/// ### Accounts:
///
///   0. `[signer]` delegate_authority
///   1. `[writable]` user_state
///   2. `[writable]` farm_state
#[derive(Clone, Debug, Default)]
pub struct SetStakeDelegatedBuilder {
    delegate_authority: Option<solana_program::pubkey::Pubkey>,
    user_state: Option<solana_program::pubkey::Pubkey>,
    farm_state: Option<solana_program::pubkey::Pubkey>,
    new_amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SetStakeDelegatedBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn delegate_authority(
        &mut self,
        delegate_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.delegate_authority = Some(delegate_authority);
        self
    }

    #[inline(always)]
    pub fn user_state(&mut self, user_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_state = Some(user_state);
        self
    }

    #[inline(always)]
    pub fn farm_state(&mut self, farm_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.farm_state = Some(farm_state);
        self
    }

    #[inline(always)]
    pub fn new_amount(&mut self, new_amount: u64) -> &mut Self {
        self.new_amount = Some(new_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SetStakeDelegated {
            delegate_authority: self
                .delegate_authority
                .expect("delegate_authority is not set"),
            user_state: self.user_state.expect("user_state is not set"),
            farm_state: self.farm_state.expect("farm_state is not set"),
        };
        let args = SetStakeDelegatedInstructionArgs {
            new_amount: self.new_amount.clone().expect("new_amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `set_stake_delegated` CPI accounts.
pub struct SetStakeDelegatedCpiAccounts<'a, 'b> {
    pub delegate_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub farm_state: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `set_stake_delegated` CPI instruction.
pub struct SetStakeDelegatedCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub delegate_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub farm_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SetStakeDelegatedInstructionArgs,
}

impl<'a, 'b> SetStakeDelegatedCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SetStakeDelegatedCpiAccounts<'a, 'b>,
        args: SetStakeDelegatedInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            delegate_authority: accounts.delegate_authority,
            user_state: accounts.user_state,
            farm_state: accounts.farm_state,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.delegate_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.farm_state.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&SetStakeDelegatedInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::FARMS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.delegate_authority.clone());
        account_infos.push(self.user_state.clone());
        account_infos.push(self.farm_state.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SetStakeDelegated` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` delegate_authority
///   1. `[writable]` user_state
///   2. `[writable]` farm_state
#[derive(Clone, Debug)]
pub struct SetStakeDelegatedCpiBuilder<'a, 'b> {
    instruction: Box<SetStakeDelegatedCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SetStakeDelegatedCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SetStakeDelegatedCpiBuilderInstruction {
            __program: program,
            delegate_authority: None,
            user_state: None,
            farm_state: None,
            new_amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn delegate_authority(
        &mut self,
        delegate_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.delegate_authority = Some(delegate_authority);
        self
    }

    #[inline(always)]
    pub fn user_state(
        &mut self,
        user_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_state = Some(user_state);
        self
    }

    #[inline(always)]
    pub fn farm_state(
        &mut self,
        farm_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.farm_state = Some(farm_state);
        self
    }

    #[inline(always)]
    pub fn new_amount(&mut self, new_amount: u64) -> &mut Self {
        self.instruction.new_amount = Some(new_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SetStakeDelegatedInstructionArgs {
            new_amount: self
                .instruction
                .new_amount
                .clone()
                .expect("new_amount is not set"),
        };
        let instruction = SetStakeDelegatedCpi {
            __program: self.instruction.__program,

            delegate_authority: self
                .instruction
                .delegate_authority
                .expect("delegate_authority is not set"),

            user_state: self.instruction.user_state.expect("user_state is not set"),

            farm_state: self.instruction.farm_state.expect("farm_state is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SetStakeDelegatedCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    delegate_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    farm_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
