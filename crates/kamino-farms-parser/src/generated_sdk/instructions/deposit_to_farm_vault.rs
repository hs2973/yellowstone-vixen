//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct DepositToFarmVault {
    pub depositor: solana_program::pubkey::Pubkey,

    pub farm_state: solana_program::pubkey::Pubkey,

    pub farm_vault: solana_program::pubkey::Pubkey,

    pub depositor_ata: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl DepositToFarmVault {
    pub fn instruction(
        &self,
        args: DepositToFarmVaultInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: DepositToFarmVaultInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.depositor,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.farm_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.farm_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.depositor_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&DepositToFarmVaultInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::FARMS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositToFarmVaultInstructionData {
    discriminator: [u8; 8],
}

impl DepositToFarmVaultInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [131, 166, 64, 94, 108, 213, 114, 183],
        }
    }
}

impl Default for DepositToFarmVaultInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositToFarmVaultInstructionArgs {
    pub amount: u64,
}

/// Instruction builder for `DepositToFarmVault`.
///
/// ### Accounts:
///
///   0. `[signer]` depositor
///   1. `[writable]` farm_state
///   2. `[writable]` farm_vault
///   3. `[writable]` depositor_ata
///   4. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct DepositToFarmVaultBuilder {
    depositor: Option<solana_program::pubkey::Pubkey>,
    farm_state: Option<solana_program::pubkey::Pubkey>,
    farm_vault: Option<solana_program::pubkey::Pubkey>,
    depositor_ata: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DepositToFarmVaultBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn depositor(&mut self, depositor: solana_program::pubkey::Pubkey) -> &mut Self {
        self.depositor = Some(depositor);
        self
    }

    #[inline(always)]
    pub fn farm_state(&mut self, farm_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.farm_state = Some(farm_state);
        self
    }

    #[inline(always)]
    pub fn farm_vault(&mut self, farm_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.farm_vault = Some(farm_vault);
        self
    }

    #[inline(always)]
    pub fn depositor_ata(&mut self, depositor_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.depositor_ata = Some(depositor_ata);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = DepositToFarmVault {
            depositor: self.depositor.expect("depositor is not set"),
            farm_state: self.farm_state.expect("farm_state is not set"),
            farm_vault: self.farm_vault.expect("farm_vault is not set"),
            depositor_ata: self.depositor_ata.expect("depositor_ata is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = DepositToFarmVaultInstructionArgs {
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `deposit_to_farm_vault` CPI accounts.
pub struct DepositToFarmVaultCpiAccounts<'a, 'b> {
    pub depositor: &'b solana_program::account_info::AccountInfo<'a>,

    pub farm_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub farm_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub depositor_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `deposit_to_farm_vault` CPI instruction.
pub struct DepositToFarmVaultCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub depositor: &'b solana_program::account_info::AccountInfo<'a>,

    pub farm_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub farm_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub depositor_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: DepositToFarmVaultInstructionArgs,
}

impl<'a, 'b> DepositToFarmVaultCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: DepositToFarmVaultCpiAccounts<'a, 'b>,
        args: DepositToFarmVaultInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            depositor: accounts.depositor,
            farm_state: accounts.farm_state,
            farm_vault: accounts.farm_vault,
            depositor_ata: accounts.depositor_ata,
            token_program: accounts.token_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.depositor.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.farm_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.farm_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.depositor_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&DepositToFarmVaultInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::FARMS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.depositor.clone());
        account_infos.push(self.farm_state.clone());
        account_infos.push(self.farm_vault.clone());
        account_infos.push(self.depositor_ata.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DepositToFarmVault` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` depositor
///   1. `[writable]` farm_state
///   2. `[writable]` farm_vault
///   3. `[writable]` depositor_ata
///   4. `[]` token_program
#[derive(Clone, Debug)]
pub struct DepositToFarmVaultCpiBuilder<'a, 'b> {
    instruction: Box<DepositToFarmVaultCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositToFarmVaultCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DepositToFarmVaultCpiBuilderInstruction {
            __program: program,
            depositor: None,
            farm_state: None,
            farm_vault: None,
            depositor_ata: None,
            token_program: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn depositor(
        &mut self,
        depositor: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.depositor = Some(depositor);
        self
    }

    #[inline(always)]
    pub fn farm_state(
        &mut self,
        farm_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.farm_state = Some(farm_state);
        self
    }

    #[inline(always)]
    pub fn farm_vault(
        &mut self,
        farm_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.farm_vault = Some(farm_vault);
        self
    }

    #[inline(always)]
    pub fn depositor_ata(
        &mut self,
        depositor_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.depositor_ata = Some(depositor_ata);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = DepositToFarmVaultInstructionArgs {
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = DepositToFarmVaultCpi {
            __program: self.instruction.__program,

            depositor: self.instruction.depositor.expect("depositor is not set"),

            farm_state: self.instruction.farm_state.expect("farm_state is not set"),

            farm_vault: self.instruction.farm_vault.expect("farm_vault is not set"),

            depositor_ata: self
                .instruction
                .depositor_ata
                .expect("depositor_ata is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DepositToFarmVaultCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    depositor: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    farm_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    farm_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    depositor_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
