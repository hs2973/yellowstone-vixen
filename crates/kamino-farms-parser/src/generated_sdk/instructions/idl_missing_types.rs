//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::{
    FarmConfigOption, GlobalConfigOption, LockingMode, RewardType, TimeUnit,
};

/// Accounts.
#[derive(Debug)]
pub struct IdlMissingTypes {
    pub global_admin: solana_program::pubkey::Pubkey,

    pub global_config: solana_program::pubkey::Pubkey,
}

impl IdlMissingTypes {
    pub fn instruction(
        &self,
        args: IdlMissingTypesInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: IdlMissingTypesInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_admin,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.global_config,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&IdlMissingTypesInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::FARMS_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct IdlMissingTypesInstructionData {
    discriminator: [u8; 8],
}

impl IdlMissingTypesInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [130, 80, 38, 153, 80, 212, 182, 253],
        }
    }
}

impl Default for IdlMissingTypesInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct IdlMissingTypesInstructionArgs {
    pub global_config_option_kind: GlobalConfigOption,
    pub farm_config_option_kind: FarmConfigOption,
    pub time_unit: TimeUnit,
    pub locking_mode: LockingMode,
    pub reward_type: RewardType,
}

/// Instruction builder for `IdlMissingTypes`.
///
/// ### Accounts:
///
///   0. `[signer]` global_admin
///   1. `[writable]` global_config
#[derive(Clone, Debug, Default)]
pub struct IdlMissingTypesBuilder {
    global_admin: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    global_config_option_kind: Option<GlobalConfigOption>,
    farm_config_option_kind: Option<FarmConfigOption>,
    time_unit: Option<TimeUnit>,
    locking_mode: Option<LockingMode>,
    reward_type: Option<RewardType>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl IdlMissingTypesBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn global_admin(&mut self, global_admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_admin = Some(global_admin);
        self
    }

    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }

    #[inline(always)]
    pub fn global_config_option_kind(
        &mut self,
        global_config_option_kind: GlobalConfigOption,
    ) -> &mut Self {
        self.global_config_option_kind = Some(global_config_option_kind);
        self
    }

    #[inline(always)]
    pub fn farm_config_option_kind(
        &mut self,
        farm_config_option_kind: FarmConfigOption,
    ) -> &mut Self {
        self.farm_config_option_kind = Some(farm_config_option_kind);
        self
    }

    #[inline(always)]
    pub fn time_unit(&mut self, time_unit: TimeUnit) -> &mut Self {
        self.time_unit = Some(time_unit);
        self
    }

    #[inline(always)]
    pub fn locking_mode(&mut self, locking_mode: LockingMode) -> &mut Self {
        self.locking_mode = Some(locking_mode);
        self
    }

    #[inline(always)]
    pub fn reward_type(&mut self, reward_type: RewardType) -> &mut Self {
        self.reward_type = Some(reward_type);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = IdlMissingTypes {
            global_admin: self.global_admin.expect("global_admin is not set"),
            global_config: self.global_config.expect("global_config is not set"),
        };
        let args = IdlMissingTypesInstructionArgs {
            global_config_option_kind: self
                .global_config_option_kind
                .clone()
                .expect("global_config_option_kind is not set"),
            farm_config_option_kind: self
                .farm_config_option_kind
                .clone()
                .expect("farm_config_option_kind is not set"),
            time_unit: self.time_unit.clone().expect("time_unit is not set"),
            locking_mode: self.locking_mode.clone().expect("locking_mode is not set"),
            reward_type: self.reward_type.clone().expect("reward_type is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `idl_missing_types` CPI accounts.
pub struct IdlMissingTypesCpiAccounts<'a, 'b> {
    pub global_admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `idl_missing_types` CPI instruction.
pub struct IdlMissingTypesCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: IdlMissingTypesInstructionArgs,
}

impl<'a, 'b> IdlMissingTypesCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: IdlMissingTypesCpiAccounts<'a, 'b>,
        args: IdlMissingTypesInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            global_admin: accounts.global_admin,
            global_config: accounts.global_config,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.global_config.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&IdlMissingTypesInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::FARMS_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.global_admin.clone());
        account_infos.push(self.global_config.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `IdlMissingTypes` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` global_admin
///   1. `[writable]` global_config
#[derive(Clone, Debug)]
pub struct IdlMissingTypesCpiBuilder<'a, 'b> {
    instruction: Box<IdlMissingTypesCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> IdlMissingTypesCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(IdlMissingTypesCpiBuilderInstruction {
            __program: program,
            global_admin: None,
            global_config: None,
            global_config_option_kind: None,
            farm_config_option_kind: None,
            time_unit: None,
            locking_mode: None,
            reward_type: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn global_admin(
        &mut self,
        global_admin: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_admin = Some(global_admin);
        self
    }

    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }

    #[inline(always)]
    pub fn global_config_option_kind(
        &mut self,
        global_config_option_kind: GlobalConfigOption,
    ) -> &mut Self {
        self.instruction.global_config_option_kind = Some(global_config_option_kind);
        self
    }

    #[inline(always)]
    pub fn farm_config_option_kind(
        &mut self,
        farm_config_option_kind: FarmConfigOption,
    ) -> &mut Self {
        self.instruction.farm_config_option_kind = Some(farm_config_option_kind);
        self
    }

    #[inline(always)]
    pub fn time_unit(&mut self, time_unit: TimeUnit) -> &mut Self {
        self.instruction.time_unit = Some(time_unit);
        self
    }

    #[inline(always)]
    pub fn locking_mode(&mut self, locking_mode: LockingMode) -> &mut Self {
        self.instruction.locking_mode = Some(locking_mode);
        self
    }

    #[inline(always)]
    pub fn reward_type(&mut self, reward_type: RewardType) -> &mut Self {
        self.instruction.reward_type = Some(reward_type);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = IdlMissingTypesInstructionArgs {
            global_config_option_kind: self
                .instruction
                .global_config_option_kind
                .clone()
                .expect("global_config_option_kind is not set"),
            farm_config_option_kind: self
                .instruction
                .farm_config_option_kind
                .clone()
                .expect("farm_config_option_kind is not set"),
            time_unit: self
                .instruction
                .time_unit
                .clone()
                .expect("time_unit is not set"),
            locking_mode: self
                .instruction
                .locking_mode
                .clone()
                .expect("locking_mode is not set"),
            reward_type: self
                .instruction
                .reward_type
                .clone()
                .expect("reward_type is not set"),
        };
        let instruction = IdlMissingTypesCpi {
            __program: self.instruction.__program,

            global_admin: self
                .instruction
                .global_admin
                .expect("global_admin is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct IdlMissingTypesCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    global_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config_option_kind: Option<GlobalConfigOption>,
    farm_config_option_kind: Option<FarmConfigOption>,
    time_unit: Option<TimeUnit>,
    locking_mode: Option<LockingMode>,
    reward_type: Option<RewardType>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
