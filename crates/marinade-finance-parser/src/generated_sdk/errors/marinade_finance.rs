//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum MarinadeFinanceError {
    /// 6000 - Wrong reserve owner. Must be a system account
    #[error("Wrong reserve owner. Must be a system account")]
    WrongReserveOwner = 0x1770,
    /// 6001 - Reserve must have no data, but has data
    #[error("Reserve must have no data, but has data")]
    NonEmptyReserveData = 0x1771,
    /// 6002 - Invalid initial reserve lamports
    #[error("Invalid initial reserve lamports")]
    InvalidInitialReserveLamports = 0x1772,
    /// 6003 - Zero validator chunk size
    #[error("Zero validator chunk size")]
    ZeroValidatorChunkSize = 0x1773,
    /// 6004 - Too big validator chunk size
    #[error("Too big validator chunk size")]
    TooBigValidatorChunkSize = 0x1774,
    /// 6005 - Zero credit chunk size
    #[error("Zero credit chunk size")]
    ZeroCreditChunkSize = 0x1775,
    /// 6006 - Too big credit chunk size
    #[error("Too big credit chunk size")]
    TooBigCreditChunkSize = 0x1776,
    /// 6007 - Too low credit fee
    #[error("Too low credit fee")]
    TooLowCreditFee = 0x1777,
    /// 6008 - Invalid mint authority
    #[error("Invalid mint authority")]
    InvalidMintAuthority = 0x1778,
    /// 6009 - Non empty initial mint supply
    #[error("Non empty initial mint supply")]
    MintHasInitialSupply = 0x1779,
    /// 6010 - Invalid owner fee state
    #[error("Invalid owner fee state")]
    InvalidOwnerFeeState = 0x177a,
    /// 6011 - Invalid program id. For using program from another account please update id in the code
    #[error(
        "Invalid program id. For using program from another account please update id in the code"
    )]
    InvalidProgramId = 0x177b,
    /// 6012 - Unexpected account
    #[error("Unexpected account")]
    UnexpectedAccount = 0x177c,
    /// 6013 - Calculation failure
    #[error("Calculation failure")]
    CalculationFailure = 0x177d,
    /// 6014 - You can't deposit a stake-account with lockup
    #[error("You can't deposit a stake-account with lockup")]
    StakeAccountWithLockup = 0x177e,
    /// 6015 - Min stake is too low
    #[error("Min stake is too low")]
    MinStakeIsTooLow = 0x177f,
    /// 6016 - Lp max fee is too high
    #[error("Lp max fee is too high")]
    LpMaxFeeIsTooHigh = 0x1780,
    /// 6017 - Basis points overflow
    #[error("Basis points overflow")]
    BasisPointsOverflow = 0x1781,
    /// 6018 - LP min fee > LP max fee
    #[error("LP min fee > LP max fee")]
    LpFeesAreWrongWayRound = 0x1782,
    /// 6019 - Liquidity target too low
    #[error("Liquidity target too low")]
    LiquidityTargetTooLow = 0x1783,
    /// 6020 - Ticket not due. Wait more epochs
    #[error("Ticket not due. Wait more epochs")]
    TicketNotDue = 0x1784,
    /// 6021 - Ticket not ready. Wait a few hours and try again
    #[error("Ticket not ready. Wait a few hours and try again")]
    TicketNotReady = 0x1785,
    /// 6022 - Wrong Ticket Beneficiary
    #[error("Wrong Ticket Beneficiary")]
    WrongBeneficiary = 0x1786,
    /// 6023 - Stake Account not updated yet
    #[error("Stake Account not updated yet")]
    StakeAccountNotUpdatedYet = 0x1787,
    /// 6024 - Stake Account not delegated
    #[error("Stake Account not delegated")]
    StakeNotDelegated = 0x1788,
    /// 6025 - Stake Account is emergency unstaking
    #[error("Stake Account is emergency unstaking")]
    StakeAccountIsEmergencyUnstaking = 0x1789,
    /// 6026 - Insufficient Liquidity in the Liquidity Pool
    #[error("Insufficient Liquidity in the Liquidity Pool")]
    InsufficientLiquidity = 0x178a,
    /// 6027 -
    #[error("")]
    NotUsed6027 = 0x178b,
    /// 6028 - Invalid admin authority
    #[error("Invalid admin authority")]
    InvalidAdminAuthority = 0x178c,
    /// 6029 - Invalid validator system manager
    #[error("Invalid validator system manager")]
    InvalidValidatorManager = 0x178d,
    /// 6030 - Invalid stake list account discriminator
    #[error("Invalid stake list account discriminator")]
    InvalidStakeListDiscriminator = 0x178e,
    /// 6031 - Invalid validator list account discriminator
    #[error("Invalid validator list account discriminator")]
    InvalidValidatorListDiscriminator = 0x178f,
    /// 6032 - Treasury cut is too high
    #[error("Treasury cut is too high")]
    TreasuryCutIsTooHigh = 0x1790,
    /// 6033 - Reward fee is too high
    #[error("Reward fee is too high")]
    RewardsFeeIsTooHigh = 0x1791,
    /// 6034 - Staking is capped
    #[error("Staking is capped")]
    StakingIsCapped = 0x1792,
    /// 6035 - Liquidity is capped
    #[error("Liquidity is capped")]
    LiquidityIsCapped = 0x1793,
    /// 6036 - Update window is too low
    #[error("Update window is too low")]
    UpdateWindowIsTooLow = 0x1794,
    /// 6037 - Min withdraw is too high
    #[error("Min withdraw is too high")]
    MinWithdrawIsTooHigh = 0x1795,
    /// 6038 - Withdraw amount is too low
    #[error("Withdraw amount is too low")]
    WithdrawAmountIsTooLow = 0x1796,
    /// 6039 - Deposit amount is too low
    #[error("Deposit amount is too low")]
    DepositAmountIsTooLow = 0x1797,
    /// 6040 - Not enough user funds
    #[error("Not enough user funds")]
    NotEnoughUserFunds = 0x1798,
    /// 6041 - Wrong token owner or delegate
    #[error("Wrong token owner or delegate")]
    WrongTokenOwnerOrDelegate = 0x1799,
    /// 6042 - Too early for stake delta
    #[error("Too early for stake delta")]
    TooEarlyForStakeDelta = 0x179a,
    /// 6043 - Required delegated stake
    #[error("Required delegated stake")]
    RequiredDelegatedStake = 0x179b,
    /// 6044 - Required active stake
    #[error("Required active stake")]
    RequiredActiveStake = 0x179c,
    /// 6045 - Required deactivating stake
    #[error("Required deactivating stake")]
    RequiredDeactivatingStake = 0x179d,
    /// 6046 - Depositing not activated stake
    #[error("Depositing not activated stake")]
    DepositingNotActivatedStake = 0x179e,
    /// 6047 - Too low delegation in the depositing stake
    #[error("Too low delegation in the depositing stake")]
    TooLowDelegationInDepositingStake = 0x179f,
    /// 6048 - Wrong deposited stake balance
    #[error("Wrong deposited stake balance")]
    WrongStakeBalance = 0x17a0,
    /// 6049 - Wrong validator account or index
    #[error("Wrong validator account or index")]
    WrongValidatorAccountOrIndex = 0x17a1,
    /// 6050 - Wrong stake account or index
    #[error("Wrong stake account or index")]
    WrongStakeAccountOrIndex = 0x17a2,
    /// 6051 - Delta stake is positive so we must stake instead of unstake
    #[error("Delta stake is positive so we must stake instead of unstake")]
    UnstakingOnPositiveDelta = 0x17a3,
    /// 6052 - Delta stake is negative so we must unstake instead of stake
    #[error("Delta stake is negative so we must unstake instead of stake")]
    StakingOnNegativeDelta = 0x17a4,
    /// 6053 - Moving stake during an epoch is capped
    #[error("Moving stake during an epoch is capped")]
    MovingStakeIsCapped = 0x17a5,
    /// 6054 - Stake must be uninitialized
    #[error("Stake must be uninitialized")]
    StakeMustBeUninitialized = 0x17a6,
    /// 6055 - Destination stake must be delegated
    #[error("Destination stake must be delegated")]
    DestinationStakeMustBeDelegated = 0x17a7,
    /// 6056 - Destination stake must not be deactivating
    #[error("Destination stake must not be deactivating")]
    DestinationStakeMustNotBeDeactivating = 0x17a8,
    /// 6057 - Destination stake must be updated
    #[error("Destination stake must be updated")]
    DestinationStakeMustBeUpdated = 0x17a9,
    /// 6058 - Invalid destination stake delegation
    #[error("Invalid destination stake delegation")]
    InvalidDestinationStakeDelegation = 0x17aa,
    /// 6059 - Source stake must be delegated
    #[error("Source stake must be delegated")]
    SourceStakeMustBeDelegated = 0x17ab,
    /// 6060 - Source stake must not be deactivating
    #[error("Source stake must not be deactivating")]
    SourceStakeMustNotBeDeactivating = 0x17ac,
    /// 6061 - Source stake must be updated
    #[error("Source stake must be updated")]
    SourceStakeMustBeUpdated = 0x17ad,
    /// 6062 - Invalid source stake delegation
    #[error("Invalid source stake delegation")]
    InvalidSourceStakeDelegation = 0x17ae,
    /// 6063 - Invalid delayed unstake ticket
    #[error("Invalid delayed unstake ticket")]
    InvalidDelayedUnstakeTicket = 0x17af,
    /// 6064 - Reusing delayed unstake ticket
    #[error("Reusing delayed unstake ticket")]
    ReusingDelayedUnstakeTicket = 0x17b0,
    /// 6065 - Emergency unstaking from non zero scored validator
    #[error("Emergency unstaking from non zero scored validator")]
    EmergencyUnstakingFromNonZeroScoredValidator = 0x17b1,
    /// 6066 - Wrong validator duplication flag
    #[error("Wrong validator duplication flag")]
    WrongValidatorDuplicationFlag = 0x17b2,
    /// 6067 - Redepositing marinade stake
    #[error("Redepositing marinade stake")]
    RedepositingMarinadeStake = 0x17b3,
    /// 6068 - Removing validator with balance
    #[error("Removing validator with balance")]
    RemovingValidatorWithBalance = 0x17b4,
    /// 6069 - Redelegate will put validator over stake target
    #[error("Redelegate will put validator over stake target")]
    RedelegateOverTarget = 0x17b5,
    /// 6070 - Source and Dest Validators are the same
    #[error("Source and Dest Validators are the same")]
    SourceAndDestValidatorsAreTheSame = 0x17b6,
    /// 6071 - Some mSOL tokens was minted outside of marinade contract
    #[error("Some mSOL tokens was minted outside of marinade contract")]
    UnregisteredMsolMinted = 0x17b7,
    /// 6072 - Some LP tokens was minted outside of marinade contract
    #[error("Some LP tokens was minted outside of marinade contract")]
    UnregisteredLPMinted = 0x17b8,
    /// 6073 - List index out of bounds
    #[error("List index out of bounds")]
    ListIndexOutOfBounds = 0x17b9,
    /// 6074 - List overflow
    #[error("List overflow")]
    ListOverflow = 0x17ba,
    /// 6075 - Requested pause and already Paused
    #[error("Requested pause and already Paused")]
    AlreadyPaused = 0x17bb,
    /// 6076 - Requested resume, but not Paused
    #[error("Requested resume, but not Paused")]
    NotPaused = 0x17bc,
    /// 6077 - Emergency Pause is Active
    #[error("Emergency Pause is Active")]
    ProgramIsPaused = 0x17bd,
    /// 6078 - Invalid pause authority
    #[error("Invalid pause authority")]
    InvalidPauseAuthority = 0x17be,
    /// 6079 - Selected Stake account has not enough funds
    #[error("Selected Stake account has not enough funds")]
    SelectedStakeAccountHasNotEnoughFunds = 0x17bf,
    /// 6080 - Basis point CENTS overflow
    #[error("Basis point CENTS overflow")]
    BasisPointCentsOverflow = 0x17c0,
    /// 6081 - Withdraw stake account is not enabled
    #[error("Withdraw stake account is not enabled")]
    WithdrawStakeAccountIsNotEnabled = 0x17c1,
    /// 6082 - Withdraw stake account fee is too high
    #[error("Withdraw stake account fee is too high")]
    WithdrawStakeAccountFeeIsTooHigh = 0x17c2,
    /// 6083 - Delayed unstake fee is too high
    #[error("Delayed unstake fee is too high")]
    DelayedUnstakeFeeIsTooHigh = 0x17c3,
    /// 6084 - Withdraw stake account value is too low
    #[error("Withdraw stake account value is too low")]
    WithdrawStakeLamportsIsTooLow = 0x17c4,
    /// 6085 - Stake account remainder too low
    #[error("Stake account remainder too low")]
    StakeAccountRemainderTooLow = 0x17c5,
    /// 6086 - Capacity of the list must be not less than it's current size
    #[error("Capacity of the list must be not less than it's current size")]
    ShrinkingListWithDeletingContents = 0x17c6,
}

impl solana_program::program_error::PrintProgramError for MarinadeFinanceError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for MarinadeFinanceError {
    fn type_of() -> &'static str { "MarinadeFinanceError" }
}
