//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::{Fee, FeeCents};

/// Accounts.
#[derive(Debug)]
pub struct ConfigMarinade {
    pub state: solana_program::pubkey::Pubkey,

    pub admin_authority: solana_program::pubkey::Pubkey,
}

impl ConfigMarinade {
    pub fn instruction(
        &self,
        args: ConfigMarinadeInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ConfigMarinadeInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.admin_authority,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&ConfigMarinadeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConfigMarinadeInstructionData {
    discriminator: [u8; 8],
}

impl ConfigMarinadeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [67, 3, 34, 114, 190, 185, 17, 62],
        }
    }
}

impl Default for ConfigMarinadeInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConfigMarinadeInstructionArgs {
    pub rewards_fee: Option<Fee>,
    pub slots_for_stake_delta: Option<u64>,
    pub min_stake: Option<u64>,
    pub min_deposit: Option<u64>,
    pub min_withdraw: Option<u64>,
    pub staking_sol_cap: Option<u64>,
    pub liquidity_sol_cap: Option<u64>,
    pub withdraw_stake_account_enabled: Option<bool>,
    pub delayed_unstake_fee: Option<FeeCents>,
    pub withdraw_stake_account_fee: Option<FeeCents>,
    pub max_stake_moved_per_epoch: Option<Fee>,
}

/// Instruction builder for `ConfigMarinade`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[signer]` admin_authority
#[derive(Clone, Debug, Default)]
pub struct ConfigMarinadeBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    admin_authority: Option<solana_program::pubkey::Pubkey>,
    rewards_fee: Option<Fee>,
    slots_for_stake_delta: Option<u64>,
    min_stake: Option<u64>,
    min_deposit: Option<u64>,
    min_withdraw: Option<u64>,
    staking_sol_cap: Option<u64>,
    liquidity_sol_cap: Option<u64>,
    withdraw_stake_account_enabled: Option<bool>,
    delayed_unstake_fee: Option<FeeCents>,
    withdraw_stake_account_fee: Option<FeeCents>,
    max_stake_moved_per_epoch: Option<Fee>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ConfigMarinadeBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn admin_authority(
        &mut self,
        admin_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.admin_authority = Some(admin_authority);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn rewards_fee(&mut self, rewards_fee: Fee) -> &mut Self {
        self.rewards_fee = Some(rewards_fee);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn slots_for_stake_delta(&mut self, slots_for_stake_delta: u64) -> &mut Self {
        self.slots_for_stake_delta = Some(slots_for_stake_delta);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn min_stake(&mut self, min_stake: u64) -> &mut Self {
        self.min_stake = Some(min_stake);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn min_deposit(&mut self, min_deposit: u64) -> &mut Self {
        self.min_deposit = Some(min_deposit);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn min_withdraw(&mut self, min_withdraw: u64) -> &mut Self {
        self.min_withdraw = Some(min_withdraw);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn staking_sol_cap(&mut self, staking_sol_cap: u64) -> &mut Self {
        self.staking_sol_cap = Some(staking_sol_cap);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn liquidity_sol_cap(&mut self, liquidity_sol_cap: u64) -> &mut Self {
        self.liquidity_sol_cap = Some(liquidity_sol_cap);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn withdraw_stake_account_enabled(
        &mut self,
        withdraw_stake_account_enabled: bool,
    ) -> &mut Self {
        self.withdraw_stake_account_enabled = Some(withdraw_stake_account_enabled);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn delayed_unstake_fee(&mut self, delayed_unstake_fee: FeeCents) -> &mut Self {
        self.delayed_unstake_fee = Some(delayed_unstake_fee);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn withdraw_stake_account_fee(
        &mut self,
        withdraw_stake_account_fee: FeeCents,
    ) -> &mut Self {
        self.withdraw_stake_account_fee = Some(withdraw_stake_account_fee);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn max_stake_moved_per_epoch(&mut self, max_stake_moved_per_epoch: Fee) -> &mut Self {
        self.max_stake_moved_per_epoch = Some(max_stake_moved_per_epoch);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ConfigMarinade {
            state: self.state.expect("state is not set"),
            admin_authority: self.admin_authority.expect("admin_authority is not set"),
        };
        let args = ConfigMarinadeInstructionArgs {
            rewards_fee: self.rewards_fee.clone(),
            slots_for_stake_delta: self.slots_for_stake_delta.clone(),
            min_stake: self.min_stake.clone(),
            min_deposit: self.min_deposit.clone(),
            min_withdraw: self.min_withdraw.clone(),
            staking_sol_cap: self.staking_sol_cap.clone(),
            liquidity_sol_cap: self.liquidity_sol_cap.clone(),
            withdraw_stake_account_enabled: self.withdraw_stake_account_enabled.clone(),
            delayed_unstake_fee: self.delayed_unstake_fee.clone(),
            withdraw_stake_account_fee: self.withdraw_stake_account_fee.clone(),
            max_stake_moved_per_epoch: self.max_stake_moved_per_epoch.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `config_marinade` CPI accounts.
pub struct ConfigMarinadeCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `config_marinade` CPI instruction.
pub struct ConfigMarinadeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: ConfigMarinadeInstructionArgs,
}

impl<'a, 'b> ConfigMarinadeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ConfigMarinadeCpiAccounts<'a, 'b>,
        args: ConfigMarinadeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            admin_authority: accounts.admin_authority,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.admin_authority.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&ConfigMarinadeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.admin_authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ConfigMarinade` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[signer]` admin_authority
#[derive(Clone, Debug)]
pub struct ConfigMarinadeCpiBuilder<'a, 'b> {
    instruction: Box<ConfigMarinadeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ConfigMarinadeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ConfigMarinadeCpiBuilderInstruction {
            __program: program,
            state: None,
            admin_authority: None,
            rewards_fee: None,
            slots_for_stake_delta: None,
            min_stake: None,
            min_deposit: None,
            min_withdraw: None,
            staking_sol_cap: None,
            liquidity_sol_cap: None,
            withdraw_stake_account_enabled: None,
            delayed_unstake_fee: None,
            withdraw_stake_account_fee: None,
            max_stake_moved_per_epoch: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn admin_authority(
        &mut self,
        admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.admin_authority = Some(admin_authority);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn rewards_fee(&mut self, rewards_fee: Fee) -> &mut Self {
        self.instruction.rewards_fee = Some(rewards_fee);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn slots_for_stake_delta(&mut self, slots_for_stake_delta: u64) -> &mut Self {
        self.instruction.slots_for_stake_delta = Some(slots_for_stake_delta);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn min_stake(&mut self, min_stake: u64) -> &mut Self {
        self.instruction.min_stake = Some(min_stake);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn min_deposit(&mut self, min_deposit: u64) -> &mut Self {
        self.instruction.min_deposit = Some(min_deposit);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn min_withdraw(&mut self, min_withdraw: u64) -> &mut Self {
        self.instruction.min_withdraw = Some(min_withdraw);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn staking_sol_cap(&mut self, staking_sol_cap: u64) -> &mut Self {
        self.instruction.staking_sol_cap = Some(staking_sol_cap);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn liquidity_sol_cap(&mut self, liquidity_sol_cap: u64) -> &mut Self {
        self.instruction.liquidity_sol_cap = Some(liquidity_sol_cap);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn withdraw_stake_account_enabled(
        &mut self,
        withdraw_stake_account_enabled: bool,
    ) -> &mut Self {
        self.instruction.withdraw_stake_account_enabled = Some(withdraw_stake_account_enabled);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn delayed_unstake_fee(&mut self, delayed_unstake_fee: FeeCents) -> &mut Self {
        self.instruction.delayed_unstake_fee = Some(delayed_unstake_fee);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn withdraw_stake_account_fee(
        &mut self,
        withdraw_stake_account_fee: FeeCents,
    ) -> &mut Self {
        self.instruction.withdraw_stake_account_fee = Some(withdraw_stake_account_fee);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn max_stake_moved_per_epoch(&mut self, max_stake_moved_per_epoch: Fee) -> &mut Self {
        self.instruction.max_stake_moved_per_epoch = Some(max_stake_moved_per_epoch);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = ConfigMarinadeInstructionArgs {
            rewards_fee: self.instruction.rewards_fee.clone(),
            slots_for_stake_delta: self.instruction.slots_for_stake_delta.clone(),
            min_stake: self.instruction.min_stake.clone(),
            min_deposit: self.instruction.min_deposit.clone(),
            min_withdraw: self.instruction.min_withdraw.clone(),
            staking_sol_cap: self.instruction.staking_sol_cap.clone(),
            liquidity_sol_cap: self.instruction.liquidity_sol_cap.clone(),
            withdraw_stake_account_enabled: self.instruction.withdraw_stake_account_enabled.clone(),
            delayed_unstake_fee: self.instruction.delayed_unstake_fee.clone(),
            withdraw_stake_account_fee: self.instruction.withdraw_stake_account_fee.clone(),
            max_stake_moved_per_epoch: self.instruction.max_stake_moved_per_epoch.clone(),
        };
        let instruction = ConfigMarinadeCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            admin_authority: self
                .instruction
                .admin_authority
                .expect("admin_authority is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ConfigMarinadeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rewards_fee: Option<Fee>,
    slots_for_stake_delta: Option<u64>,
    min_stake: Option<u64>,
    min_deposit: Option<u64>,
    min_withdraw: Option<u64>,
    staking_sol_cap: Option<u64>,
    liquidity_sol_cap: Option<u64>,
    withdraw_stake_account_enabled: Option<bool>,
    delayed_unstake_fee: Option<FeeCents>,
    withdraw_stake_account_fee: Option<FeeCents>,
    max_stake_moved_per_epoch: Option<Fee>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
