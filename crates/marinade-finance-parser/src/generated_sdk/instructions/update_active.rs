//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct UpdateActive {
    pub state: solana_program::pubkey::Pubkey,

    pub stake_list: solana_program::pubkey::Pubkey,

    pub stake_account: solana_program::pubkey::Pubkey,

    pub stake_withdraw_authority: solana_program::pubkey::Pubkey,

    pub reserve_pda: solana_program::pubkey::Pubkey,

    pub msol_mint: solana_program::pubkey::Pubkey,

    pub msol_mint_authority: solana_program::pubkey::Pubkey,

    pub treasury_msol_account: solana_program::pubkey::Pubkey,

    pub clock: solana_program::pubkey::Pubkey,

    pub stake_history: solana_program::pubkey::Pubkey,

    pub stake_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub validator_list: solana_program::pubkey::Pubkey,
}

impl UpdateActive {
    pub fn instruction(
        &self,
        args: UpdateActiveInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateActiveInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_list,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_withdraw_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.msol_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.msol_mint_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.treasury_msol_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_history,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.validator_list,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&UpdateActiveInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateActiveInstructionData {
    discriminator: [u8; 8],
}

impl UpdateActiveInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [4, 67, 81, 64, 136, 245, 93, 152],
        }
    }
}

impl Default for UpdateActiveInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateActiveInstructionArgs {
    pub stake_index: u32,
    pub validator_index: u32,
}

/// Instruction builder for `UpdateActive`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable]` stake_list
///   2. `[writable]` stake_account
///   3. `[]` stake_withdraw_authority
///   4. `[writable]` reserve_pda
///   5. `[writable]` msol_mint
///   6. `[]` msol_mint_authority
///   7. `[writable]` treasury_msol_account
///   8. `[]` clock
///   9. `[]` stake_history
///   10. `[]` stake_program
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[writable]` validator_list
#[derive(Clone, Debug, Default)]
pub struct UpdateActiveBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    stake_list: Option<solana_program::pubkey::Pubkey>,
    stake_account: Option<solana_program::pubkey::Pubkey>,
    stake_withdraw_authority: Option<solana_program::pubkey::Pubkey>,
    reserve_pda: Option<solana_program::pubkey::Pubkey>,
    msol_mint: Option<solana_program::pubkey::Pubkey>,
    msol_mint_authority: Option<solana_program::pubkey::Pubkey>,
    treasury_msol_account: Option<solana_program::pubkey::Pubkey>,
    clock: Option<solana_program::pubkey::Pubkey>,
    stake_history: Option<solana_program::pubkey::Pubkey>,
    stake_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    validator_list: Option<solana_program::pubkey::Pubkey>,
    stake_index: Option<u32>,
    validator_index: Option<u32>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateActiveBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn stake_list(&mut self, stake_list: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_list = Some(stake_list);
        self
    }

    #[inline(always)]
    pub fn stake_account(&mut self, stake_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_account = Some(stake_account);
        self
    }

    #[inline(always)]
    pub fn stake_withdraw_authority(
        &mut self,
        stake_withdraw_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.stake_withdraw_authority = Some(stake_withdraw_authority);
        self
    }

    #[inline(always)]
    pub fn reserve_pda(&mut self, reserve_pda: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reserve_pda = Some(reserve_pda);
        self
    }

    #[inline(always)]
    pub fn msol_mint(&mut self, msol_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.msol_mint = Some(msol_mint);
        self
    }

    #[inline(always)]
    pub fn msol_mint_authority(
        &mut self,
        msol_mint_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.msol_mint_authority = Some(msol_mint_authority);
        self
    }

    #[inline(always)]
    pub fn treasury_msol_account(
        &mut self,
        treasury_msol_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.treasury_msol_account = Some(treasury_msol_account);
        self
    }

    #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clock = Some(clock);
        self
    }

    #[inline(always)]
    pub fn stake_history(&mut self, stake_history: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_history = Some(stake_history);
        self
    }

    #[inline(always)]
    pub fn stake_program(&mut self, stake_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_program = Some(stake_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn validator_list(&mut self, validator_list: solana_program::pubkey::Pubkey) -> &mut Self {
        self.validator_list = Some(validator_list);
        self
    }

    #[inline(always)]
    pub fn stake_index(&mut self, stake_index: u32) -> &mut Self {
        self.stake_index = Some(stake_index);
        self
    }

    #[inline(always)]
    pub fn validator_index(&mut self, validator_index: u32) -> &mut Self {
        self.validator_index = Some(validator_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateActive {
            state: self.state.expect("state is not set"),
            stake_list: self.stake_list.expect("stake_list is not set"),
            stake_account: self.stake_account.expect("stake_account is not set"),
            stake_withdraw_authority: self
                .stake_withdraw_authority
                .expect("stake_withdraw_authority is not set"),
            reserve_pda: self.reserve_pda.expect("reserve_pda is not set"),
            msol_mint: self.msol_mint.expect("msol_mint is not set"),
            msol_mint_authority: self
                .msol_mint_authority
                .expect("msol_mint_authority is not set"),
            treasury_msol_account: self
                .treasury_msol_account
                .expect("treasury_msol_account is not set"),
            clock: self.clock.expect("clock is not set"),
            stake_history: self.stake_history.expect("stake_history is not set"),
            stake_program: self.stake_program.expect("stake_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            validator_list: self.validator_list.expect("validator_list is not set"),
        };
        let args = UpdateActiveInstructionArgs {
            stake_index: self.stake_index.clone().expect("stake_index is not set"),
            validator_index: self
                .validator_index
                .clone()
                .expect("validator_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_active` CPI accounts.
pub struct UpdateActiveCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_msol_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_active` CPI instruction.
pub struct UpdateActiveCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_msol_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UpdateActiveInstructionArgs,
}

impl<'a, 'b> UpdateActiveCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdateActiveCpiAccounts<'a, 'b>,
        args: UpdateActiveInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            stake_list: accounts.stake_list,
            stake_account: accounts.stake_account,
            stake_withdraw_authority: accounts.stake_withdraw_authority,
            reserve_pda: accounts.reserve_pda,
            msol_mint: accounts.msol_mint,
            msol_mint_authority: accounts.msol_mint_authority,
            treasury_msol_account: accounts.treasury_msol_account,
            clock: accounts.clock,
            stake_history: accounts.stake_history,
            stake_program: accounts.stake_program,
            token_program: accounts.token_program,
            validator_list: accounts.validator_list,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_list.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_withdraw_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.msol_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.msol_mint_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.treasury_msol_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_history.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.validator_list.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&UpdateActiveInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(14 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.stake_list.clone());
        account_infos.push(self.stake_account.clone());
        account_infos.push(self.stake_withdraw_authority.clone());
        account_infos.push(self.reserve_pda.clone());
        account_infos.push(self.msol_mint.clone());
        account_infos.push(self.msol_mint_authority.clone());
        account_infos.push(self.treasury_msol_account.clone());
        account_infos.push(self.clock.clone());
        account_infos.push(self.stake_history.clone());
        account_infos.push(self.stake_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.validator_list.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateActive` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable]` stake_list
///   2. `[writable]` stake_account
///   3. `[]` stake_withdraw_authority
///   4. `[writable]` reserve_pda
///   5. `[writable]` msol_mint
///   6. `[]` msol_mint_authority
///   7. `[writable]` treasury_msol_account
///   8. `[]` clock
///   9. `[]` stake_history
///   10. `[]` stake_program
///   11. `[]` token_program
///   12. `[writable]` validator_list
#[derive(Clone, Debug)]
pub struct UpdateActiveCpiBuilder<'a, 'b> {
    instruction: Box<UpdateActiveCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateActiveCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateActiveCpiBuilderInstruction {
            __program: program,
            state: None,
            stake_list: None,
            stake_account: None,
            stake_withdraw_authority: None,
            reserve_pda: None,
            msol_mint: None,
            msol_mint_authority: None,
            treasury_msol_account: None,
            clock: None,
            stake_history: None,
            stake_program: None,
            token_program: None,
            validator_list: None,
            stake_index: None,
            validator_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn stake_list(
        &mut self,
        stake_list: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_list = Some(stake_list);
        self
    }

    #[inline(always)]
    pub fn stake_account(
        &mut self,
        stake_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_account = Some(stake_account);
        self
    }

    #[inline(always)]
    pub fn stake_withdraw_authority(
        &mut self,
        stake_withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_withdraw_authority = Some(stake_withdraw_authority);
        self
    }

    #[inline(always)]
    pub fn reserve_pda(
        &mut self,
        reserve_pda: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_pda = Some(reserve_pda);
        self
    }

    #[inline(always)]
    pub fn msol_mint(
        &mut self,
        msol_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.msol_mint = Some(msol_mint);
        self
    }

    #[inline(always)]
    pub fn msol_mint_authority(
        &mut self,
        msol_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.msol_mint_authority = Some(msol_mint_authority);
        self
    }

    #[inline(always)]
    pub fn treasury_msol_account(
        &mut self,
        treasury_msol_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.treasury_msol_account = Some(treasury_msol_account);
        self
    }

    #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.clock = Some(clock);
        self
    }

    #[inline(always)]
    pub fn stake_history(
        &mut self,
        stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_history = Some(stake_history);
        self
    }

    #[inline(always)]
    pub fn stake_program(
        &mut self,
        stake_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_program = Some(stake_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn validator_list(
        &mut self,
        validator_list: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.validator_list = Some(validator_list);
        self
    }

    #[inline(always)]
    pub fn stake_index(&mut self, stake_index: u32) -> &mut Self {
        self.instruction.stake_index = Some(stake_index);
        self
    }

    #[inline(always)]
    pub fn validator_index(&mut self, validator_index: u32) -> &mut Self {
        self.instruction.validator_index = Some(validator_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = UpdateActiveInstructionArgs {
            stake_index: self
                .instruction
                .stake_index
                .clone()
                .expect("stake_index is not set"),
            validator_index: self
                .instruction
                .validator_index
                .clone()
                .expect("validator_index is not set"),
        };
        let instruction = UpdateActiveCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            stake_list: self.instruction.stake_list.expect("stake_list is not set"),

            stake_account: self
                .instruction
                .stake_account
                .expect("stake_account is not set"),

            stake_withdraw_authority: self
                .instruction
                .stake_withdraw_authority
                .expect("stake_withdraw_authority is not set"),

            reserve_pda: self
                .instruction
                .reserve_pda
                .expect("reserve_pda is not set"),

            msol_mint: self.instruction.msol_mint.expect("msol_mint is not set"),

            msol_mint_authority: self
                .instruction
                .msol_mint_authority
                .expect("msol_mint_authority is not set"),

            treasury_msol_account: self
                .instruction
                .treasury_msol_account
                .expect("treasury_msol_account is not set"),

            clock: self.instruction.clock.expect("clock is not set"),

            stake_history: self
                .instruction
                .stake_history
                .expect("stake_history is not set"),

            stake_program: self
                .instruction
                .stake_program
                .expect("stake_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            validator_list: self
                .instruction
                .validator_list
                .expect("validator_list is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdateActiveCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_withdraw_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    msol_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    msol_mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    treasury_msol_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    validator_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_index: Option<u32>,
    validator_index: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
