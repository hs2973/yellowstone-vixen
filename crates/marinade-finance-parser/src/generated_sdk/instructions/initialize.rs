//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

use crate::generated::types::{Fee, LiqPoolInitializeData};

/// Accounts.
#[derive(Debug)]
pub struct Initialize {
    pub state: solana_program::pubkey::Pubkey,

    pub reserve_pda: solana_program::pubkey::Pubkey,

    pub stake_list: solana_program::pubkey::Pubkey,

    pub validator_list: solana_program::pubkey::Pubkey,

    pub msol_mint: solana_program::pubkey::Pubkey,

    pub operational_sol_account: solana_program::pubkey::Pubkey,

    pub lp_mint: solana_program::pubkey::Pubkey,

    pub sol_leg_pda: solana_program::pubkey::Pubkey,

    pub msol_leg: solana_program::pubkey::Pubkey,

    pub treasury_msol_account: solana_program::pubkey::Pubkey,

    pub clock: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl Initialize {
    pub fn instruction(
        &self,
        args: InitializeInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.reserve_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_list,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.validator_list,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.msol_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.operational_sol_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sol_leg_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.msol_leg,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.treasury_msol_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeInstructionData {
    discriminator: [u8; 8],
}

impl InitializeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
        }
    }
}

impl Default for InitializeInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeInstructionArgs {
    pub admin_authority: Pubkey,
    pub validator_manager_authority: Pubkey,
    pub min_stake: u64,
    pub rewards_fee: Fee,
    pub liq_pool: LiqPoolInitializeData,
    pub additional_stake_record_space: u32,
    pub additional_validator_record_space: u32,
    pub slots_for_stake_delta: u64,
    pub pause_authority: Pubkey,
}

/// Instruction builder for `Initialize`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[]` reserve_pda
///   2. `[writable]` stake_list
///   3. `[writable]` validator_list
///   4. `[]` msol_mint
///   5. `[]` operational_sol_account
///   6. `[]` lp_mint
///   7. `[]` sol_leg_pda
///   8. `[]` msol_leg
///   9. `[]` treasury_msol_account
///   10. `[]` clock
///   11. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    reserve_pda: Option<solana_program::pubkey::Pubkey>,
    stake_list: Option<solana_program::pubkey::Pubkey>,
    validator_list: Option<solana_program::pubkey::Pubkey>,
    msol_mint: Option<solana_program::pubkey::Pubkey>,
    operational_sol_account: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    sol_leg_pda: Option<solana_program::pubkey::Pubkey>,
    msol_leg: Option<solana_program::pubkey::Pubkey>,
    treasury_msol_account: Option<solana_program::pubkey::Pubkey>,
    clock: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    admin_authority: Option<Pubkey>,
    validator_manager_authority: Option<Pubkey>,
    min_stake: Option<u64>,
    rewards_fee: Option<Fee>,
    liq_pool: Option<LiqPoolInitializeData>,
    additional_stake_record_space: Option<u32>,
    additional_validator_record_space: Option<u32>,
    slots_for_stake_delta: Option<u64>,
    pause_authority: Option<Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn reserve_pda(&mut self, reserve_pda: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reserve_pda = Some(reserve_pda);
        self
    }

    #[inline(always)]
    pub fn stake_list(&mut self, stake_list: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_list = Some(stake_list);
        self
    }

    #[inline(always)]
    pub fn validator_list(&mut self, validator_list: solana_program::pubkey::Pubkey) -> &mut Self {
        self.validator_list = Some(validator_list);
        self
    }

    #[inline(always)]
    pub fn msol_mint(&mut self, msol_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.msol_mint = Some(msol_mint);
        self
    }

    #[inline(always)]
    pub fn operational_sol_account(
        &mut self,
        operational_sol_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.operational_sol_account = Some(operational_sol_account);
        self
    }

    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn sol_leg_pda(&mut self, sol_leg_pda: solana_program::pubkey::Pubkey) -> &mut Self {
        self.sol_leg_pda = Some(sol_leg_pda);
        self
    }

    #[inline(always)]
    pub fn msol_leg(&mut self, msol_leg: solana_program::pubkey::Pubkey) -> &mut Self {
        self.msol_leg = Some(msol_leg);
        self
    }

    #[inline(always)]
    pub fn treasury_msol_account(
        &mut self,
        treasury_msol_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.treasury_msol_account = Some(treasury_msol_account);
        self
    }

    #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clock = Some(clock);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn admin_authority(&mut self, admin_authority: Pubkey) -> &mut Self {
        self.admin_authority = Some(admin_authority);
        self
    }

    #[inline(always)]
    pub fn validator_manager_authority(
        &mut self,
        validator_manager_authority: Pubkey,
    ) -> &mut Self {
        self.validator_manager_authority = Some(validator_manager_authority);
        self
    }

    #[inline(always)]
    pub fn min_stake(&mut self, min_stake: u64) -> &mut Self {
        self.min_stake = Some(min_stake);
        self
    }

    #[inline(always)]
    pub fn rewards_fee(&mut self, rewards_fee: Fee) -> &mut Self {
        self.rewards_fee = Some(rewards_fee);
        self
    }

    #[inline(always)]
    pub fn liq_pool(&mut self, liq_pool: LiqPoolInitializeData) -> &mut Self {
        self.liq_pool = Some(liq_pool);
        self
    }

    #[inline(always)]
    pub fn additional_stake_record_space(
        &mut self,
        additional_stake_record_space: u32,
    ) -> &mut Self {
        self.additional_stake_record_space = Some(additional_stake_record_space);
        self
    }

    #[inline(always)]
    pub fn additional_validator_record_space(
        &mut self,
        additional_validator_record_space: u32,
    ) -> &mut Self {
        self.additional_validator_record_space = Some(additional_validator_record_space);
        self
    }

    #[inline(always)]
    pub fn slots_for_stake_delta(&mut self, slots_for_stake_delta: u64) -> &mut Self {
        self.slots_for_stake_delta = Some(slots_for_stake_delta);
        self
    }

    #[inline(always)]
    pub fn pause_authority(&mut self, pause_authority: Pubkey) -> &mut Self {
        self.pause_authority = Some(pause_authority);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Initialize {
            state: self.state.expect("state is not set"),
            reserve_pda: self.reserve_pda.expect("reserve_pda is not set"),
            stake_list: self.stake_list.expect("stake_list is not set"),
            validator_list: self.validator_list.expect("validator_list is not set"),
            msol_mint: self.msol_mint.expect("msol_mint is not set"),
            operational_sol_account: self
                .operational_sol_account
                .expect("operational_sol_account is not set"),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            sol_leg_pda: self.sol_leg_pda.expect("sol_leg_pda is not set"),
            msol_leg: self.msol_leg.expect("msol_leg is not set"),
            treasury_msol_account: self
                .treasury_msol_account
                .expect("treasury_msol_account is not set"),
            clock: self.clock.expect("clock is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };
        let args = InitializeInstructionArgs {
            admin_authority: self
                .admin_authority
                .clone()
                .expect("admin_authority is not set"),
            validator_manager_authority: self
                .validator_manager_authority
                .clone()
                .expect("validator_manager_authority is not set"),
            min_stake: self.min_stake.clone().expect("min_stake is not set"),
            rewards_fee: self.rewards_fee.clone().expect("rewards_fee is not set"),
            liq_pool: self.liq_pool.clone().expect("liq_pool is not set"),
            additional_stake_record_space: self
                .additional_stake_record_space
                .clone()
                .expect("additional_stake_record_space is not set"),
            additional_validator_record_space: self
                .additional_validator_record_space
                .clone()
                .expect("additional_validator_record_space is not set"),
            slots_for_stake_delta: self
                .slots_for_stake_delta
                .clone()
                .expect("slots_for_stake_delta is not set"),
            pause_authority: self
                .pause_authority
                .clone()
                .expect("pause_authority is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize` CPI accounts.
pub struct InitializeCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub operational_sol_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_leg: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_msol_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize` CPI instruction.
pub struct InitializeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub operational_sol_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_leg: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_msol_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeInstructionArgs,
}

impl<'a, 'b> InitializeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeCpiAccounts<'a, 'b>,
        args: InitializeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            reserve_pda: accounts.reserve_pda,
            stake_list: accounts.stake_list,
            validator_list: accounts.validator_list,
            msol_mint: accounts.msol_mint,
            operational_sol_account: accounts.operational_sol_account,
            lp_mint: accounts.lp_mint,
            sol_leg_pda: accounts.sol_leg_pda,
            msol_leg: accounts.msol_leg,
            treasury_msol_account: accounts.treasury_msol_account,
            clock: accounts.clock,
            rent: accounts.rent,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.reserve_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_list.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.validator_list.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.msol_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.operational_sol_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sol_leg_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.msol_leg.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.treasury_msol_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.reserve_pda.clone());
        account_infos.push(self.stake_list.clone());
        account_infos.push(self.validator_list.clone());
        account_infos.push(self.msol_mint.clone());
        account_infos.push(self.operational_sol_account.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.sol_leg_pda.clone());
        account_infos.push(self.msol_leg.clone());
        account_infos.push(self.treasury_msol_account.clone());
        account_infos.push(self.clock.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Initialize` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[]` reserve_pda
///   2. `[writable]` stake_list
///   3. `[writable]` validator_list
///   4. `[]` msol_mint
///   5. `[]` operational_sol_account
///   6. `[]` lp_mint
///   7. `[]` sol_leg_pda
///   8. `[]` msol_leg
///   9. `[]` treasury_msol_account
///   10. `[]` clock
///   11. `[]` rent
#[derive(Clone, Debug)]
pub struct InitializeCpiBuilder<'a, 'b> {
    instruction: Box<InitializeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeCpiBuilderInstruction {
            __program: program,
            state: None,
            reserve_pda: None,
            stake_list: None,
            validator_list: None,
            msol_mint: None,
            operational_sol_account: None,
            lp_mint: None,
            sol_leg_pda: None,
            msol_leg: None,
            treasury_msol_account: None,
            clock: None,
            rent: None,
            admin_authority: None,
            validator_manager_authority: None,
            min_stake: None,
            rewards_fee: None,
            liq_pool: None,
            additional_stake_record_space: None,
            additional_validator_record_space: None,
            slots_for_stake_delta: None,
            pause_authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn reserve_pda(
        &mut self,
        reserve_pda: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_pda = Some(reserve_pda);
        self
    }

    #[inline(always)]
    pub fn stake_list(
        &mut self,
        stake_list: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_list = Some(stake_list);
        self
    }

    #[inline(always)]
    pub fn validator_list(
        &mut self,
        validator_list: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.validator_list = Some(validator_list);
        self
    }

    #[inline(always)]
    pub fn msol_mint(
        &mut self,
        msol_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.msol_mint = Some(msol_mint);
        self
    }

    #[inline(always)]
    pub fn operational_sol_account(
        &mut self,
        operational_sol_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operational_sol_account = Some(operational_sol_account);
        self
    }

    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn sol_leg_pda(
        &mut self,
        sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sol_leg_pda = Some(sol_leg_pda);
        self
    }

    #[inline(always)]
    pub fn msol_leg(
        &mut self,
        msol_leg: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.msol_leg = Some(msol_leg);
        self
    }

    #[inline(always)]
    pub fn treasury_msol_account(
        &mut self,
        treasury_msol_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.treasury_msol_account = Some(treasury_msol_account);
        self
    }

    #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.clock = Some(clock);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn admin_authority(&mut self, admin_authority: Pubkey) -> &mut Self {
        self.instruction.admin_authority = Some(admin_authority);
        self
    }

    #[inline(always)]
    pub fn validator_manager_authority(
        &mut self,
        validator_manager_authority: Pubkey,
    ) -> &mut Self {
        self.instruction.validator_manager_authority = Some(validator_manager_authority);
        self
    }

    #[inline(always)]
    pub fn min_stake(&mut self, min_stake: u64) -> &mut Self {
        self.instruction.min_stake = Some(min_stake);
        self
    }

    #[inline(always)]
    pub fn rewards_fee(&mut self, rewards_fee: Fee) -> &mut Self {
        self.instruction.rewards_fee = Some(rewards_fee);
        self
    }

    #[inline(always)]
    pub fn liq_pool(&mut self, liq_pool: LiqPoolInitializeData) -> &mut Self {
        self.instruction.liq_pool = Some(liq_pool);
        self
    }

    #[inline(always)]
    pub fn additional_stake_record_space(
        &mut self,
        additional_stake_record_space: u32,
    ) -> &mut Self {
        self.instruction.additional_stake_record_space = Some(additional_stake_record_space);
        self
    }

    #[inline(always)]
    pub fn additional_validator_record_space(
        &mut self,
        additional_validator_record_space: u32,
    ) -> &mut Self {
        self.instruction.additional_validator_record_space =
            Some(additional_validator_record_space);
        self
    }

    #[inline(always)]
    pub fn slots_for_stake_delta(&mut self, slots_for_stake_delta: u64) -> &mut Self {
        self.instruction.slots_for_stake_delta = Some(slots_for_stake_delta);
        self
    }

    #[inline(always)]
    pub fn pause_authority(&mut self, pause_authority: Pubkey) -> &mut Self {
        self.instruction.pause_authority = Some(pause_authority);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeInstructionArgs {
            admin_authority: self
                .instruction
                .admin_authority
                .clone()
                .expect("admin_authority is not set"),
            validator_manager_authority: self
                .instruction
                .validator_manager_authority
                .clone()
                .expect("validator_manager_authority is not set"),
            min_stake: self
                .instruction
                .min_stake
                .clone()
                .expect("min_stake is not set"),
            rewards_fee: self
                .instruction
                .rewards_fee
                .clone()
                .expect("rewards_fee is not set"),
            liq_pool: self
                .instruction
                .liq_pool
                .clone()
                .expect("liq_pool is not set"),
            additional_stake_record_space: self
                .instruction
                .additional_stake_record_space
                .clone()
                .expect("additional_stake_record_space is not set"),
            additional_validator_record_space: self
                .instruction
                .additional_validator_record_space
                .clone()
                .expect("additional_validator_record_space is not set"),
            slots_for_stake_delta: self
                .instruction
                .slots_for_stake_delta
                .clone()
                .expect("slots_for_stake_delta is not set"),
            pause_authority: self
                .instruction
                .pause_authority
                .clone()
                .expect("pause_authority is not set"),
        };
        let instruction = InitializeCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            reserve_pda: self
                .instruction
                .reserve_pda
                .expect("reserve_pda is not set"),

            stake_list: self.instruction.stake_list.expect("stake_list is not set"),

            validator_list: self
                .instruction
                .validator_list
                .expect("validator_list is not set"),

            msol_mint: self.instruction.msol_mint.expect("msol_mint is not set"),

            operational_sol_account: self
                .instruction
                .operational_sol_account
                .expect("operational_sol_account is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            sol_leg_pda: self
                .instruction
                .sol_leg_pda
                .expect("sol_leg_pda is not set"),

            msol_leg: self.instruction.msol_leg.expect("msol_leg is not set"),

            treasury_msol_account: self
                .instruction
                .treasury_msol_account
                .expect("treasury_msol_account is not set"),

            clock: self.instruction.clock.expect("clock is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    validator_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    msol_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operational_sol_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sol_leg_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    msol_leg: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    treasury_msol_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin_authority: Option<Pubkey>,
    validator_manager_authority: Option<Pubkey>,
    min_stake: Option<u64>,
    rewards_fee: Option<Fee>,
    liq_pool: Option<LiqPoolInitializeData>,
    additional_stake_record_space: Option<u32>,
    additional_validator_record_space: Option<u32>,
    slots_for_stake_delta: Option<u64>,
    pause_authority: Option<Pubkey>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
