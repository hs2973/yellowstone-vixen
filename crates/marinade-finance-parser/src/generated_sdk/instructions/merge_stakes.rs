//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct MergeStakes {
    pub state: solana_program::pubkey::Pubkey,

    pub stake_list: solana_program::pubkey::Pubkey,

    pub validator_list: solana_program::pubkey::Pubkey,

    pub destination_stake: solana_program::pubkey::Pubkey,

    pub source_stake: solana_program::pubkey::Pubkey,

    pub stake_deposit_authority: solana_program::pubkey::Pubkey,

    pub stake_withdraw_authority: solana_program::pubkey::Pubkey,

    pub operational_sol_account: solana_program::pubkey::Pubkey,

    pub clock: solana_program::pubkey::Pubkey,

    pub stake_history: solana_program::pubkey::Pubkey,

    pub stake_program: solana_program::pubkey::Pubkey,
}

impl MergeStakes {
    pub fn instruction(
        &self,
        args: MergeStakesInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: MergeStakesInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_list,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.validator_list,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.destination_stake,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.source_stake,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_deposit_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_withdraw_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.operational_sol_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_history,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&MergeStakesInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MergeStakesInstructionData {
    discriminator: [u8; 8],
}

impl MergeStakesInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [216, 36, 141, 225, 243, 78, 125, 237],
        }
    }
}

impl Default for MergeStakesInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MergeStakesInstructionArgs {
    pub destination_stake_index: u32,
    pub source_stake_index: u32,
    pub validator_index: u32,
}

/// Instruction builder for `MergeStakes`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable]` stake_list
///   2. `[writable]` validator_list
///   3. `[writable]` destination_stake
///   4. `[writable]` source_stake
///   5. `[]` stake_deposit_authority
///   6. `[]` stake_withdraw_authority
///   7. `[writable]` operational_sol_account
///   8. `[]` clock
///   9. `[]` stake_history
///   10. `[]` stake_program
#[derive(Clone, Debug, Default)]
pub struct MergeStakesBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    stake_list: Option<solana_program::pubkey::Pubkey>,
    validator_list: Option<solana_program::pubkey::Pubkey>,
    destination_stake: Option<solana_program::pubkey::Pubkey>,
    source_stake: Option<solana_program::pubkey::Pubkey>,
    stake_deposit_authority: Option<solana_program::pubkey::Pubkey>,
    stake_withdraw_authority: Option<solana_program::pubkey::Pubkey>,
    operational_sol_account: Option<solana_program::pubkey::Pubkey>,
    clock: Option<solana_program::pubkey::Pubkey>,
    stake_history: Option<solana_program::pubkey::Pubkey>,
    stake_program: Option<solana_program::pubkey::Pubkey>,
    destination_stake_index: Option<u32>,
    source_stake_index: Option<u32>,
    validator_index: Option<u32>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MergeStakesBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn stake_list(&mut self, stake_list: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_list = Some(stake_list);
        self
    }

    #[inline(always)]
    pub fn validator_list(&mut self, validator_list: solana_program::pubkey::Pubkey) -> &mut Self {
        self.validator_list = Some(validator_list);
        self
    }

    #[inline(always)]
    pub fn destination_stake(
        &mut self,
        destination_stake: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.destination_stake = Some(destination_stake);
        self
    }

    #[inline(always)]
    pub fn source_stake(&mut self, source_stake: solana_program::pubkey::Pubkey) -> &mut Self {
        self.source_stake = Some(source_stake);
        self
    }

    #[inline(always)]
    pub fn stake_deposit_authority(
        &mut self,
        stake_deposit_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.stake_deposit_authority = Some(stake_deposit_authority);
        self
    }

    #[inline(always)]
    pub fn stake_withdraw_authority(
        &mut self,
        stake_withdraw_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.stake_withdraw_authority = Some(stake_withdraw_authority);
        self
    }

    #[inline(always)]
    pub fn operational_sol_account(
        &mut self,
        operational_sol_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.operational_sol_account = Some(operational_sol_account);
        self
    }

    #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clock = Some(clock);
        self
    }

    #[inline(always)]
    pub fn stake_history(&mut self, stake_history: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_history = Some(stake_history);
        self
    }

    #[inline(always)]
    pub fn stake_program(&mut self, stake_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_program = Some(stake_program);
        self
    }

    #[inline(always)]
    pub fn destination_stake_index(&mut self, destination_stake_index: u32) -> &mut Self {
        self.destination_stake_index = Some(destination_stake_index);
        self
    }

    #[inline(always)]
    pub fn source_stake_index(&mut self, source_stake_index: u32) -> &mut Self {
        self.source_stake_index = Some(source_stake_index);
        self
    }

    #[inline(always)]
    pub fn validator_index(&mut self, validator_index: u32) -> &mut Self {
        self.validator_index = Some(validator_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MergeStakes {
            state: self.state.expect("state is not set"),
            stake_list: self.stake_list.expect("stake_list is not set"),
            validator_list: self.validator_list.expect("validator_list is not set"),
            destination_stake: self
                .destination_stake
                .expect("destination_stake is not set"),
            source_stake: self.source_stake.expect("source_stake is not set"),
            stake_deposit_authority: self
                .stake_deposit_authority
                .expect("stake_deposit_authority is not set"),
            stake_withdraw_authority: self
                .stake_withdraw_authority
                .expect("stake_withdraw_authority is not set"),
            operational_sol_account: self
                .operational_sol_account
                .expect("operational_sol_account is not set"),
            clock: self.clock.expect("clock is not set"),
            stake_history: self.stake_history.expect("stake_history is not set"),
            stake_program: self.stake_program.expect("stake_program is not set"),
        };
        let args = MergeStakesInstructionArgs {
            destination_stake_index: self
                .destination_stake_index
                .clone()
                .expect("destination_stake_index is not set"),
            source_stake_index: self
                .source_stake_index
                .clone()
                .expect("source_stake_index is not set"),
            validator_index: self
                .validator_index
                .clone()
                .expect("validator_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `merge_stakes` CPI accounts.
pub struct MergeStakesCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_stake: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_stake: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_deposit_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub operational_sol_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `merge_stakes` CPI instruction.
pub struct MergeStakesCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_stake: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_stake: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_deposit_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub operational_sol_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: MergeStakesInstructionArgs,
}

impl<'a, 'b> MergeStakesCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MergeStakesCpiAccounts<'a, 'b>,
        args: MergeStakesInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            stake_list: accounts.stake_list,
            validator_list: accounts.validator_list,
            destination_stake: accounts.destination_stake,
            source_stake: accounts.source_stake,
            stake_deposit_authority: accounts.stake_deposit_authority,
            stake_withdraw_authority: accounts.stake_withdraw_authority,
            operational_sol_account: accounts.operational_sol_account,
            clock: accounts.clock,
            stake_history: accounts.stake_history,
            stake_program: accounts.stake_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_list.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.validator_list.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.destination_stake.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.source_stake.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_deposit_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_withdraw_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.operational_sol_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_history.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&MergeStakesInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.stake_list.clone());
        account_infos.push(self.validator_list.clone());
        account_infos.push(self.destination_stake.clone());
        account_infos.push(self.source_stake.clone());
        account_infos.push(self.stake_deposit_authority.clone());
        account_infos.push(self.stake_withdraw_authority.clone());
        account_infos.push(self.operational_sol_account.clone());
        account_infos.push(self.clock.clone());
        account_infos.push(self.stake_history.clone());
        account_infos.push(self.stake_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MergeStakes` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable]` stake_list
///   2. `[writable]` validator_list
///   3. `[writable]` destination_stake
///   4. `[writable]` source_stake
///   5. `[]` stake_deposit_authority
///   6. `[]` stake_withdraw_authority
///   7. `[writable]` operational_sol_account
///   8. `[]` clock
///   9. `[]` stake_history
///   10. `[]` stake_program
#[derive(Clone, Debug)]
pub struct MergeStakesCpiBuilder<'a, 'b> {
    instruction: Box<MergeStakesCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MergeStakesCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MergeStakesCpiBuilderInstruction {
            __program: program,
            state: None,
            stake_list: None,
            validator_list: None,
            destination_stake: None,
            source_stake: None,
            stake_deposit_authority: None,
            stake_withdraw_authority: None,
            operational_sol_account: None,
            clock: None,
            stake_history: None,
            stake_program: None,
            destination_stake_index: None,
            source_stake_index: None,
            validator_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn stake_list(
        &mut self,
        stake_list: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_list = Some(stake_list);
        self
    }

    #[inline(always)]
    pub fn validator_list(
        &mut self,
        validator_list: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.validator_list = Some(validator_list);
        self
    }

    #[inline(always)]
    pub fn destination_stake(
        &mut self,
        destination_stake: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_stake = Some(destination_stake);
        self
    }

    #[inline(always)]
    pub fn source_stake(
        &mut self,
        source_stake: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_stake = Some(source_stake);
        self
    }

    #[inline(always)]
    pub fn stake_deposit_authority(
        &mut self,
        stake_deposit_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_deposit_authority = Some(stake_deposit_authority);
        self
    }

    #[inline(always)]
    pub fn stake_withdraw_authority(
        &mut self,
        stake_withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_withdraw_authority = Some(stake_withdraw_authority);
        self
    }

    #[inline(always)]
    pub fn operational_sol_account(
        &mut self,
        operational_sol_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operational_sol_account = Some(operational_sol_account);
        self
    }

    #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.clock = Some(clock);
        self
    }

    #[inline(always)]
    pub fn stake_history(
        &mut self,
        stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_history = Some(stake_history);
        self
    }

    #[inline(always)]
    pub fn stake_program(
        &mut self,
        stake_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_program = Some(stake_program);
        self
    }

    #[inline(always)]
    pub fn destination_stake_index(&mut self, destination_stake_index: u32) -> &mut Self {
        self.instruction.destination_stake_index = Some(destination_stake_index);
        self
    }

    #[inline(always)]
    pub fn source_stake_index(&mut self, source_stake_index: u32) -> &mut Self {
        self.instruction.source_stake_index = Some(source_stake_index);
        self
    }

    #[inline(always)]
    pub fn validator_index(&mut self, validator_index: u32) -> &mut Self {
        self.instruction.validator_index = Some(validator_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = MergeStakesInstructionArgs {
            destination_stake_index: self
                .instruction
                .destination_stake_index
                .clone()
                .expect("destination_stake_index is not set"),
            source_stake_index: self
                .instruction
                .source_stake_index
                .clone()
                .expect("source_stake_index is not set"),
            validator_index: self
                .instruction
                .validator_index
                .clone()
                .expect("validator_index is not set"),
        };
        let instruction = MergeStakesCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            stake_list: self.instruction.stake_list.expect("stake_list is not set"),

            validator_list: self
                .instruction
                .validator_list
                .expect("validator_list is not set"),

            destination_stake: self
                .instruction
                .destination_stake
                .expect("destination_stake is not set"),

            source_stake: self
                .instruction
                .source_stake
                .expect("source_stake is not set"),

            stake_deposit_authority: self
                .instruction
                .stake_deposit_authority
                .expect("stake_deposit_authority is not set"),

            stake_withdraw_authority: self
                .instruction
                .stake_withdraw_authority
                .expect("stake_withdraw_authority is not set"),

            operational_sol_account: self
                .instruction
                .operational_sol_account
                .expect("operational_sol_account is not set"),

            clock: self.instruction.clock.expect("clock is not set"),

            stake_history: self
                .instruction
                .stake_history
                .expect("stake_history is not set"),

            stake_program: self
                .instruction
                .stake_program
                .expect("stake_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MergeStakesCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    validator_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    destination_stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source_stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_deposit_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_withdraw_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operational_sol_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    destination_stake_index: Option<u32>,
    source_stake_index: Option<u32>,
    validator_index: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
