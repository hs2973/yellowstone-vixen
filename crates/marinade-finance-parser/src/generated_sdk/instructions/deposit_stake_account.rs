//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct DepositStakeAccount {
    pub state: solana_program::pubkey::Pubkey,

    pub validator_list: solana_program::pubkey::Pubkey,

    pub stake_list: solana_program::pubkey::Pubkey,

    pub stake_account: solana_program::pubkey::Pubkey,

    pub stake_authority: solana_program::pubkey::Pubkey,

    pub duplication_flag: solana_program::pubkey::Pubkey,

    pub rent_payer: solana_program::pubkey::Pubkey,

    pub msol_mint: solana_program::pubkey::Pubkey,
    /// user mSOL Token account to send the mSOL
    pub mint_to: solana_program::pubkey::Pubkey,

    pub msol_mint_authority: solana_program::pubkey::Pubkey,

    pub clock: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub stake_program: solana_program::pubkey::Pubkey,
}

impl DepositStakeAccount {
    pub fn instruction(
        &self,
        args: DepositStakeAccountInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: DepositStakeAccountInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.validator_list,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_list,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.duplication_flag,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.rent_payer,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.msol_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.mint_to,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.msol_mint_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&DepositStakeAccountInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositStakeAccountInstructionData {
    discriminator: [u8; 8],
}

impl DepositStakeAccountInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [110, 130, 115, 41, 164, 102, 2, 59],
        }
    }
}

impl Default for DepositStakeAccountInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositStakeAccountInstructionArgs {
    pub validator_index: u32,
}

/// Instruction builder for `DepositStakeAccount`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable]` validator_list
///   2. `[writable]` stake_list
///   3. `[writable]` stake_account
///   4. `[signer]` stake_authority
///   5. `[writable]` duplication_flag
///   6. `[writable, signer]` rent_payer
///   7. `[writable]` msol_mint
///   8. `[writable]` mint_to
///   9. `[]` msol_mint_authority
///   10. `[]` clock
///   11. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   12. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   13. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   14. `[]` stake_program
#[derive(Clone, Debug, Default)]
pub struct DepositStakeAccountBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    validator_list: Option<solana_program::pubkey::Pubkey>,
    stake_list: Option<solana_program::pubkey::Pubkey>,
    stake_account: Option<solana_program::pubkey::Pubkey>,
    stake_authority: Option<solana_program::pubkey::Pubkey>,
    duplication_flag: Option<solana_program::pubkey::Pubkey>,
    rent_payer: Option<solana_program::pubkey::Pubkey>,
    msol_mint: Option<solana_program::pubkey::Pubkey>,
    mint_to: Option<solana_program::pubkey::Pubkey>,
    msol_mint_authority: Option<solana_program::pubkey::Pubkey>,
    clock: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    stake_program: Option<solana_program::pubkey::Pubkey>,
    validator_index: Option<u32>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DepositStakeAccountBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn validator_list(&mut self, validator_list: solana_program::pubkey::Pubkey) -> &mut Self {
        self.validator_list = Some(validator_list);
        self
    }

    #[inline(always)]
    pub fn stake_list(&mut self, stake_list: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_list = Some(stake_list);
        self
    }

    #[inline(always)]
    pub fn stake_account(&mut self, stake_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_account = Some(stake_account);
        self
    }

    #[inline(always)]
    pub fn stake_authority(
        &mut self,
        stake_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.stake_authority = Some(stake_authority);
        self
    }

    #[inline(always)]
    pub fn duplication_flag(
        &mut self,
        duplication_flag: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.duplication_flag = Some(duplication_flag);
        self
    }

    #[inline(always)]
    pub fn rent_payer(&mut self, rent_payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent_payer = Some(rent_payer);
        self
    }

    #[inline(always)]
    pub fn msol_mint(&mut self, msol_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.msol_mint = Some(msol_mint);
        self
    }

    /// user mSOL Token account to send the mSOL
    #[inline(always)]
    pub fn mint_to(&mut self, mint_to: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_to = Some(mint_to);
        self
    }

    #[inline(always)]
    pub fn msol_mint_authority(
        &mut self,
        msol_mint_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.msol_mint_authority = Some(msol_mint_authority);
        self
    }

    #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clock = Some(clock);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn stake_program(&mut self, stake_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_program = Some(stake_program);
        self
    }

    #[inline(always)]
    pub fn validator_index(&mut self, validator_index: u32) -> &mut Self {
        self.validator_index = Some(validator_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = DepositStakeAccount {
            state: self.state.expect("state is not set"),
            validator_list: self.validator_list.expect("validator_list is not set"),
            stake_list: self.stake_list.expect("stake_list is not set"),
            stake_account: self.stake_account.expect("stake_account is not set"),
            stake_authority: self.stake_authority.expect("stake_authority is not set"),
            duplication_flag: self.duplication_flag.expect("duplication_flag is not set"),
            rent_payer: self.rent_payer.expect("rent_payer is not set"),
            msol_mint: self.msol_mint.expect("msol_mint is not set"),
            mint_to: self.mint_to.expect("mint_to is not set"),
            msol_mint_authority: self
                .msol_mint_authority
                .expect("msol_mint_authority is not set"),
            clock: self.clock.expect("clock is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            stake_program: self.stake_program.expect("stake_program is not set"),
        };
        let args = DepositStakeAccountInstructionArgs {
            validator_index: self
                .validator_index
                .clone()
                .expect("validator_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `deposit_stake_account` CPI accounts.
pub struct DepositStakeAccountCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub duplication_flag: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent_payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// user mSOL Token account to send the mSOL
    pub mint_to: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `deposit_stake_account` CPI instruction.
pub struct DepositStakeAccountCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub duplication_flag: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent_payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// user mSOL Token account to send the mSOL
    pub mint_to: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: DepositStakeAccountInstructionArgs,
}

impl<'a, 'b> DepositStakeAccountCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: DepositStakeAccountCpiAccounts<'a, 'b>,
        args: DepositStakeAccountInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            validator_list: accounts.validator_list,
            stake_list: accounts.stake_list,
            stake_account: accounts.stake_account,
            stake_authority: accounts.stake_authority,
            duplication_flag: accounts.duplication_flag,
            rent_payer: accounts.rent_payer,
            msol_mint: accounts.msol_mint,
            mint_to: accounts.mint_to,
            msol_mint_authority: accounts.msol_mint_authority,
            clock: accounts.clock,
            rent: accounts.rent,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            stake_program: accounts.stake_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.validator_list.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_list.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.duplication_flag.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.rent_payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.msol_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.mint_to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.msol_mint_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&DepositStakeAccountInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.validator_list.clone());
        account_infos.push(self.stake_list.clone());
        account_infos.push(self.stake_account.clone());
        account_infos.push(self.stake_authority.clone());
        account_infos.push(self.duplication_flag.clone());
        account_infos.push(self.rent_payer.clone());
        account_infos.push(self.msol_mint.clone());
        account_infos.push(self.mint_to.clone());
        account_infos.push(self.msol_mint_authority.clone());
        account_infos.push(self.clock.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.stake_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DepositStakeAccount` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable]` validator_list
///   2. `[writable]` stake_list
///   3. `[writable]` stake_account
///   4. `[signer]` stake_authority
///   5. `[writable]` duplication_flag
///   6. `[writable, signer]` rent_payer
///   7. `[writable]` msol_mint
///   8. `[writable]` mint_to
///   9. `[]` msol_mint_authority
///   10. `[]` clock
///   11. `[]` rent
///   12. `[]` system_program
///   13. `[]` token_program
///   14. `[]` stake_program
#[derive(Clone, Debug)]
pub struct DepositStakeAccountCpiBuilder<'a, 'b> {
    instruction: Box<DepositStakeAccountCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositStakeAccountCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DepositStakeAccountCpiBuilderInstruction {
            __program: program,
            state: None,
            validator_list: None,
            stake_list: None,
            stake_account: None,
            stake_authority: None,
            duplication_flag: None,
            rent_payer: None,
            msol_mint: None,
            mint_to: None,
            msol_mint_authority: None,
            clock: None,
            rent: None,
            system_program: None,
            token_program: None,
            stake_program: None,
            validator_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn validator_list(
        &mut self,
        validator_list: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.validator_list = Some(validator_list);
        self
    }

    #[inline(always)]
    pub fn stake_list(
        &mut self,
        stake_list: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_list = Some(stake_list);
        self
    }

    #[inline(always)]
    pub fn stake_account(
        &mut self,
        stake_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_account = Some(stake_account);
        self
    }

    #[inline(always)]
    pub fn stake_authority(
        &mut self,
        stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_authority = Some(stake_authority);
        self
    }

    #[inline(always)]
    pub fn duplication_flag(
        &mut self,
        duplication_flag: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.duplication_flag = Some(duplication_flag);
        self
    }

    #[inline(always)]
    pub fn rent_payer(
        &mut self,
        rent_payer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_payer = Some(rent_payer);
        self
    }

    #[inline(always)]
    pub fn msol_mint(
        &mut self,
        msol_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.msol_mint = Some(msol_mint);
        self
    }

    /// user mSOL Token account to send the mSOL
    #[inline(always)]
    pub fn mint_to(
        &mut self,
        mint_to: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_to = Some(mint_to);
        self
    }

    #[inline(always)]
    pub fn msol_mint_authority(
        &mut self,
        msol_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.msol_mint_authority = Some(msol_mint_authority);
        self
    }

    #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.clock = Some(clock);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn stake_program(
        &mut self,
        stake_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_program = Some(stake_program);
        self
    }

    #[inline(always)]
    pub fn validator_index(&mut self, validator_index: u32) -> &mut Self {
        self.instruction.validator_index = Some(validator_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = DepositStakeAccountInstructionArgs {
            validator_index: self
                .instruction
                .validator_index
                .clone()
                .expect("validator_index is not set"),
        };
        let instruction = DepositStakeAccountCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            validator_list: self
                .instruction
                .validator_list
                .expect("validator_list is not set"),

            stake_list: self.instruction.stake_list.expect("stake_list is not set"),

            stake_account: self
                .instruction
                .stake_account
                .expect("stake_account is not set"),

            stake_authority: self
                .instruction
                .stake_authority
                .expect("stake_authority is not set"),

            duplication_flag: self
                .instruction
                .duplication_flag
                .expect("duplication_flag is not set"),

            rent_payer: self.instruction.rent_payer.expect("rent_payer is not set"),

            msol_mint: self.instruction.msol_mint.expect("msol_mint is not set"),

            mint_to: self.instruction.mint_to.expect("mint_to is not set"),

            msol_mint_authority: self
                .instruction
                .msol_mint_authority
                .expect("msol_mint_authority is not set"),

            clock: self.instruction.clock.expect("clock is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            stake_program: self
                .instruction
                .stake_program
                .expect("stake_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DepositStakeAccountCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    validator_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    duplication_flag: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent_payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    msol_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    msol_mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    validator_index: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
