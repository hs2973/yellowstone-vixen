//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct RemoveLiquidity {
    pub state: solana_program::pubkey::Pubkey,

    pub lp_mint: solana_program::pubkey::Pubkey,

    pub burn_from: solana_program::pubkey::Pubkey,

    pub burn_from_authority: solana_program::pubkey::Pubkey,

    pub transfer_sol_to: solana_program::pubkey::Pubkey,

    pub transfer_msol_to: solana_program::pubkey::Pubkey,

    pub liq_pool_sol_leg_pda: solana_program::pubkey::Pubkey,

    pub liq_pool_msol_leg: solana_program::pubkey::Pubkey,

    pub liq_pool_msol_leg_authority: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl RemoveLiquidity {
    pub fn instruction(
        &self,
        args: RemoveLiquidityInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: RemoveLiquidityInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.burn_from,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.burn_from_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.transfer_sol_to,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.transfer_msol_to,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liq_pool_sol_leg_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liq_pool_msol_leg,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.liq_pool_msol_leg_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&RemoveLiquidityInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RemoveLiquidityInstructionData {
    discriminator: [u8; 8],
}

impl RemoveLiquidityInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [80, 85, 209, 72, 24, 206, 177, 108],
        }
    }
}

impl Default for RemoveLiquidityInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RemoveLiquidityInstructionArgs {
    pub tokens: u64,
}

/// Instruction builder for `RemoveLiquidity`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable]` lp_mint
///   2. `[writable]` burn_from
///   3. `[signer]` burn_from_authority
///   4. `[writable]` transfer_sol_to
///   5. `[writable]` transfer_msol_to
///   6. `[writable]` liq_pool_sol_leg_pda
///   7. `[writable]` liq_pool_msol_leg
///   8. `[]` liq_pool_msol_leg_authority
///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct RemoveLiquidityBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    burn_from: Option<solana_program::pubkey::Pubkey>,
    burn_from_authority: Option<solana_program::pubkey::Pubkey>,
    transfer_sol_to: Option<solana_program::pubkey::Pubkey>,
    transfer_msol_to: Option<solana_program::pubkey::Pubkey>,
    liq_pool_sol_leg_pda: Option<solana_program::pubkey::Pubkey>,
    liq_pool_msol_leg: Option<solana_program::pubkey::Pubkey>,
    liq_pool_msol_leg_authority: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    tokens: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl RemoveLiquidityBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn burn_from(&mut self, burn_from: solana_program::pubkey::Pubkey) -> &mut Self {
        self.burn_from = Some(burn_from);
        self
    }

    #[inline(always)]
    pub fn burn_from_authority(
        &mut self,
        burn_from_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.burn_from_authority = Some(burn_from_authority);
        self
    }

    #[inline(always)]
    pub fn transfer_sol_to(
        &mut self,
        transfer_sol_to: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.transfer_sol_to = Some(transfer_sol_to);
        self
    }

    #[inline(always)]
    pub fn transfer_msol_to(
        &mut self,
        transfer_msol_to: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.transfer_msol_to = Some(transfer_msol_to);
        self
    }

    #[inline(always)]
    pub fn liq_pool_sol_leg_pda(
        &mut self,
        liq_pool_sol_leg_pda: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liq_pool_sol_leg_pda = Some(liq_pool_sol_leg_pda);
        self
    }

    #[inline(always)]
    pub fn liq_pool_msol_leg(
        &mut self,
        liq_pool_msol_leg: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liq_pool_msol_leg = Some(liq_pool_msol_leg);
        self
    }

    #[inline(always)]
    pub fn liq_pool_msol_leg_authority(
        &mut self,
        liq_pool_msol_leg_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liq_pool_msol_leg_authority = Some(liq_pool_msol_leg_authority);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn tokens(&mut self, tokens: u64) -> &mut Self {
        self.tokens = Some(tokens);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = RemoveLiquidity {
            state: self.state.expect("state is not set"),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            burn_from: self.burn_from.expect("burn_from is not set"),
            burn_from_authority: self
                .burn_from_authority
                .expect("burn_from_authority is not set"),
            transfer_sol_to: self.transfer_sol_to.expect("transfer_sol_to is not set"),
            transfer_msol_to: self.transfer_msol_to.expect("transfer_msol_to is not set"),
            liq_pool_sol_leg_pda: self
                .liq_pool_sol_leg_pda
                .expect("liq_pool_sol_leg_pda is not set"),
            liq_pool_msol_leg: self
                .liq_pool_msol_leg
                .expect("liq_pool_msol_leg is not set"),
            liq_pool_msol_leg_authority: self
                .liq_pool_msol_leg_authority
                .expect("liq_pool_msol_leg_authority is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = RemoveLiquidityInstructionArgs {
            tokens: self.tokens.clone().expect("tokens is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `remove_liquidity` CPI accounts.
pub struct RemoveLiquidityCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub burn_from: &'b solana_program::account_info::AccountInfo<'a>,

    pub burn_from_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub transfer_sol_to: &'b solana_program::account_info::AccountInfo<'a>,

    pub transfer_msol_to: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_msol_leg: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_msol_leg_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `remove_liquidity` CPI instruction.
pub struct RemoveLiquidityCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub burn_from: &'b solana_program::account_info::AccountInfo<'a>,

    pub burn_from_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub transfer_sol_to: &'b solana_program::account_info::AccountInfo<'a>,

    pub transfer_msol_to: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_msol_leg: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_msol_leg_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: RemoveLiquidityInstructionArgs,
}

impl<'a, 'b> RemoveLiquidityCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: RemoveLiquidityCpiAccounts<'a, 'b>,
        args: RemoveLiquidityInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            lp_mint: accounts.lp_mint,
            burn_from: accounts.burn_from,
            burn_from_authority: accounts.burn_from_authority,
            transfer_sol_to: accounts.transfer_sol_to,
            transfer_msol_to: accounts.transfer_msol_to,
            liq_pool_sol_leg_pda: accounts.liq_pool_sol_leg_pda,
            liq_pool_msol_leg: accounts.liq_pool_msol_leg,
            liq_pool_msol_leg_authority: accounts.liq_pool_msol_leg_authority,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.burn_from.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.burn_from_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.transfer_sol_to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.transfer_msol_to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liq_pool_sol_leg_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liq_pool_msol_leg.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.liq_pool_msol_leg_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&RemoveLiquidityInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.burn_from.clone());
        account_infos.push(self.burn_from_authority.clone());
        account_infos.push(self.transfer_sol_to.clone());
        account_infos.push(self.transfer_msol_to.clone());
        account_infos.push(self.liq_pool_sol_leg_pda.clone());
        account_infos.push(self.liq_pool_msol_leg.clone());
        account_infos.push(self.liq_pool_msol_leg_authority.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `RemoveLiquidity` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable]` lp_mint
///   2. `[writable]` burn_from
///   3. `[signer]` burn_from_authority
///   4. `[writable]` transfer_sol_to
///   5. `[writable]` transfer_msol_to
///   6. `[writable]` liq_pool_sol_leg_pda
///   7. `[writable]` liq_pool_msol_leg
///   8. `[]` liq_pool_msol_leg_authority
///   9. `[]` system_program
///   10. `[]` token_program
#[derive(Clone, Debug)]
pub struct RemoveLiquidityCpiBuilder<'a, 'b> {
    instruction: Box<RemoveLiquidityCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RemoveLiquidityCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RemoveLiquidityCpiBuilderInstruction {
            __program: program,
            state: None,
            lp_mint: None,
            burn_from: None,
            burn_from_authority: None,
            transfer_sol_to: None,
            transfer_msol_to: None,
            liq_pool_sol_leg_pda: None,
            liq_pool_msol_leg: None,
            liq_pool_msol_leg_authority: None,
            system_program: None,
            token_program: None,
            tokens: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn burn_from(
        &mut self,
        burn_from: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.burn_from = Some(burn_from);
        self
    }

    #[inline(always)]
    pub fn burn_from_authority(
        &mut self,
        burn_from_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.burn_from_authority = Some(burn_from_authority);
        self
    }

    #[inline(always)]
    pub fn transfer_sol_to(
        &mut self,
        transfer_sol_to: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.transfer_sol_to = Some(transfer_sol_to);
        self
    }

    #[inline(always)]
    pub fn transfer_msol_to(
        &mut self,
        transfer_msol_to: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.transfer_msol_to = Some(transfer_msol_to);
        self
    }

    #[inline(always)]
    pub fn liq_pool_sol_leg_pda(
        &mut self,
        liq_pool_sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liq_pool_sol_leg_pda = Some(liq_pool_sol_leg_pda);
        self
    }

    #[inline(always)]
    pub fn liq_pool_msol_leg(
        &mut self,
        liq_pool_msol_leg: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liq_pool_msol_leg = Some(liq_pool_msol_leg);
        self
    }

    #[inline(always)]
    pub fn liq_pool_msol_leg_authority(
        &mut self,
        liq_pool_msol_leg_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liq_pool_msol_leg_authority = Some(liq_pool_msol_leg_authority);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn tokens(&mut self, tokens: u64) -> &mut Self {
        self.instruction.tokens = Some(tokens);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = RemoveLiquidityInstructionArgs {
            tokens: self.instruction.tokens.clone().expect("tokens is not set"),
        };
        let instruction = RemoveLiquidityCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            burn_from: self.instruction.burn_from.expect("burn_from is not set"),

            burn_from_authority: self
                .instruction
                .burn_from_authority
                .expect("burn_from_authority is not set"),

            transfer_sol_to: self
                .instruction
                .transfer_sol_to
                .expect("transfer_sol_to is not set"),

            transfer_msol_to: self
                .instruction
                .transfer_msol_to
                .expect("transfer_msol_to is not set"),

            liq_pool_sol_leg_pda: self
                .instruction
                .liq_pool_sol_leg_pda
                .expect("liq_pool_sol_leg_pda is not set"),

            liq_pool_msol_leg: self
                .instruction
                .liq_pool_msol_leg
                .expect("liq_pool_msol_leg is not set"),

            liq_pool_msol_leg_authority: self
                .instruction
                .liq_pool_msol_leg_authority
                .expect("liq_pool_msol_leg_authority is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct RemoveLiquidityCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    burn_from: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    burn_from_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    transfer_sol_to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    transfer_msol_to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liq_pool_sol_leg_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liq_pool_msol_leg: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liq_pool_msol_leg_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tokens: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
