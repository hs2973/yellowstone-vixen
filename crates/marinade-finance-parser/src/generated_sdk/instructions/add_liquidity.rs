//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct AddLiquidity {
    pub state: solana_program::pubkey::Pubkey,

    pub lp_mint: solana_program::pubkey::Pubkey,

    pub lp_mint_authority: solana_program::pubkey::Pubkey,

    pub liq_pool_msol_leg: solana_program::pubkey::Pubkey,

    pub liq_pool_sol_leg_pda: solana_program::pubkey::Pubkey,

    pub transfer_from: solana_program::pubkey::Pubkey,

    pub mint_to: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl AddLiquidity {
    pub fn instruction(
        &self,
        args: AddLiquidityInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AddLiquidityInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lp_mint_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.liq_pool_msol_leg,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liq_pool_sol_leg_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.transfer_from,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.mint_to,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&AddLiquidityInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddLiquidityInstructionData {
    discriminator: [u8; 8],
}

impl AddLiquidityInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [181, 157, 89, 67, 143, 182, 52, 72],
        }
    }
}

impl Default for AddLiquidityInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddLiquidityInstructionArgs {
    pub lamports: u64,
}

/// Instruction builder for `AddLiquidity`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable]` lp_mint
///   2. `[]` lp_mint_authority
///   3. `[]` liq_pool_msol_leg
///   4. `[writable]` liq_pool_sol_leg_pda
///   5. `[writable, signer]` transfer_from
///   6. `[writable]` mint_to
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct AddLiquidityBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    lp_mint_authority: Option<solana_program::pubkey::Pubkey>,
    liq_pool_msol_leg: Option<solana_program::pubkey::Pubkey>,
    liq_pool_sol_leg_pda: Option<solana_program::pubkey::Pubkey>,
    transfer_from: Option<solana_program::pubkey::Pubkey>,
    mint_to: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    lamports: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AddLiquidityBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn lp_mint_authority(
        &mut self,
        lp_mint_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.lp_mint_authority = Some(lp_mint_authority);
        self
    }

    #[inline(always)]
    pub fn liq_pool_msol_leg(
        &mut self,
        liq_pool_msol_leg: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liq_pool_msol_leg = Some(liq_pool_msol_leg);
        self
    }

    #[inline(always)]
    pub fn liq_pool_sol_leg_pda(
        &mut self,
        liq_pool_sol_leg_pda: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liq_pool_sol_leg_pda = Some(liq_pool_sol_leg_pda);
        self
    }

    #[inline(always)]
    pub fn transfer_from(&mut self, transfer_from: solana_program::pubkey::Pubkey) -> &mut Self {
        self.transfer_from = Some(transfer_from);
        self
    }

    #[inline(always)]
    pub fn mint_to(&mut self, mint_to: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_to = Some(mint_to);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn lamports(&mut self, lamports: u64) -> &mut Self {
        self.lamports = Some(lamports);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AddLiquidity {
            state: self.state.expect("state is not set"),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            lp_mint_authority: self
                .lp_mint_authority
                .expect("lp_mint_authority is not set"),
            liq_pool_msol_leg: self
                .liq_pool_msol_leg
                .expect("liq_pool_msol_leg is not set"),
            liq_pool_sol_leg_pda: self
                .liq_pool_sol_leg_pda
                .expect("liq_pool_sol_leg_pda is not set"),
            transfer_from: self.transfer_from.expect("transfer_from is not set"),
            mint_to: self.mint_to.expect("mint_to is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = AddLiquidityInstructionArgs {
            lamports: self.lamports.clone().expect("lamports is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `add_liquidity` CPI accounts.
pub struct AddLiquidityCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_msol_leg: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub transfer_from: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_to: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `add_liquidity` CPI instruction.
pub struct AddLiquidityCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_msol_leg: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub transfer_from: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_to: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AddLiquidityInstructionArgs,
}

impl<'a, 'b> AddLiquidityCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AddLiquidityCpiAccounts<'a, 'b>,
        args: AddLiquidityInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            lp_mint: accounts.lp_mint,
            lp_mint_authority: accounts.lp_mint_authority,
            liq_pool_msol_leg: accounts.liq_pool_msol_leg,
            liq_pool_sol_leg_pda: accounts.liq_pool_sol_leg_pda,
            transfer_from: accounts.transfer_from,
            mint_to: accounts.mint_to,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lp_mint_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.liq_pool_msol_leg.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liq_pool_sol_leg_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.transfer_from.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.mint_to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&AddLiquidityInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.lp_mint_authority.clone());
        account_infos.push(self.liq_pool_msol_leg.clone());
        account_infos.push(self.liq_pool_sol_leg_pda.clone());
        account_infos.push(self.transfer_from.clone());
        account_infos.push(self.mint_to.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AddLiquidity` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable]` lp_mint
///   2. `[]` lp_mint_authority
///   3. `[]` liq_pool_msol_leg
///   4. `[writable]` liq_pool_sol_leg_pda
///   5. `[writable, signer]` transfer_from
///   6. `[writable]` mint_to
///   7. `[]` system_program
///   8. `[]` token_program
#[derive(Clone, Debug)]
pub struct AddLiquidityCpiBuilder<'a, 'b> {
    instruction: Box<AddLiquidityCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AddLiquidityCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AddLiquidityCpiBuilderInstruction {
            __program: program,
            state: None,
            lp_mint: None,
            lp_mint_authority: None,
            liq_pool_msol_leg: None,
            liq_pool_sol_leg_pda: None,
            transfer_from: None,
            mint_to: None,
            system_program: None,
            token_program: None,
            lamports: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn lp_mint_authority(
        &mut self,
        lp_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint_authority = Some(lp_mint_authority);
        self
    }

    #[inline(always)]
    pub fn liq_pool_msol_leg(
        &mut self,
        liq_pool_msol_leg: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liq_pool_msol_leg = Some(liq_pool_msol_leg);
        self
    }

    #[inline(always)]
    pub fn liq_pool_sol_leg_pda(
        &mut self,
        liq_pool_sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liq_pool_sol_leg_pda = Some(liq_pool_sol_leg_pda);
        self
    }

    #[inline(always)]
    pub fn transfer_from(
        &mut self,
        transfer_from: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.transfer_from = Some(transfer_from);
        self
    }

    #[inline(always)]
    pub fn mint_to(
        &mut self,
        mint_to: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_to = Some(mint_to);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn lamports(&mut self, lamports: u64) -> &mut Self {
        self.instruction.lamports = Some(lamports);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = AddLiquidityInstructionArgs {
            lamports: self
                .instruction
                .lamports
                .clone()
                .expect("lamports is not set"),
        };
        let instruction = AddLiquidityCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            lp_mint_authority: self
                .instruction
                .lp_mint_authority
                .expect("lp_mint_authority is not set"),

            liq_pool_msol_leg: self
                .instruction
                .liq_pool_msol_leg
                .expect("liq_pool_msol_leg is not set"),

            liq_pool_sol_leg_pda: self
                .instruction
                .liq_pool_sol_leg_pda
                .expect("liq_pool_sol_leg_pda is not set"),

            transfer_from: self
                .instruction
                .transfer_from
                .expect("transfer_from is not set"),

            mint_to: self.instruction.mint_to.expect("mint_to is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AddLiquidityCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liq_pool_msol_leg: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liq_pool_sol_leg_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    transfer_from: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lamports: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
