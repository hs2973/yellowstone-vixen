//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct ChangeAuthority {
    pub state: solana_program::pubkey::Pubkey,

    pub admin_authority: solana_program::pubkey::Pubkey,
}

impl ChangeAuthority {
    pub fn instruction(
        &self,
        args: ChangeAuthorityInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ChangeAuthorityInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.admin_authority,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&ChangeAuthorityInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChangeAuthorityInstructionData {
    discriminator: [u8; 8],
}

impl ChangeAuthorityInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [50, 106, 66, 104, 99, 118, 145, 88],
        }
    }
}

impl Default for ChangeAuthorityInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChangeAuthorityInstructionArgs {
    pub admin: Option<Pubkey>,
    pub validator_manager: Option<Pubkey>,
    pub operational_sol_account: Option<Pubkey>,
    pub treasury_msol_account: Option<Pubkey>,
    pub pause_authority: Option<Pubkey>,
}

/// Instruction builder for `ChangeAuthority`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[signer]` admin_authority
#[derive(Clone, Debug, Default)]
pub struct ChangeAuthorityBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    admin_authority: Option<solana_program::pubkey::Pubkey>,
    admin: Option<Pubkey>,
    validator_manager: Option<Pubkey>,
    operational_sol_account: Option<Pubkey>,
    treasury_msol_account: Option<Pubkey>,
    pause_authority: Option<Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ChangeAuthorityBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn admin_authority(
        &mut self,
        admin_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.admin_authority = Some(admin_authority);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn admin(&mut self, admin: Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn validator_manager(&mut self, validator_manager: Pubkey) -> &mut Self {
        self.validator_manager = Some(validator_manager);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn operational_sol_account(&mut self, operational_sol_account: Pubkey) -> &mut Self {
        self.operational_sol_account = Some(operational_sol_account);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn treasury_msol_account(&mut self, treasury_msol_account: Pubkey) -> &mut Self {
        self.treasury_msol_account = Some(treasury_msol_account);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn pause_authority(&mut self, pause_authority: Pubkey) -> &mut Self {
        self.pause_authority = Some(pause_authority);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ChangeAuthority {
            state: self.state.expect("state is not set"),
            admin_authority: self.admin_authority.expect("admin_authority is not set"),
        };
        let args = ChangeAuthorityInstructionArgs {
            admin: self.admin.clone(),
            validator_manager: self.validator_manager.clone(),
            operational_sol_account: self.operational_sol_account.clone(),
            treasury_msol_account: self.treasury_msol_account.clone(),
            pause_authority: self.pause_authority.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `change_authority` CPI accounts.
pub struct ChangeAuthorityCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `change_authority` CPI instruction.
pub struct ChangeAuthorityCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: ChangeAuthorityInstructionArgs,
}

impl<'a, 'b> ChangeAuthorityCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ChangeAuthorityCpiAccounts<'a, 'b>,
        args: ChangeAuthorityInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            admin_authority: accounts.admin_authority,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.admin_authority.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&ChangeAuthorityInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MARINADE_FINANCE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.admin_authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ChangeAuthority` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[signer]` admin_authority
#[derive(Clone, Debug)]
pub struct ChangeAuthorityCpiBuilder<'a, 'b> {
    instruction: Box<ChangeAuthorityCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ChangeAuthorityCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ChangeAuthorityCpiBuilderInstruction {
            __program: program,
            state: None,
            admin_authority: None,
            admin: None,
            validator_manager: None,
            operational_sol_account: None,
            treasury_msol_account: None,
            pause_authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn admin_authority(
        &mut self,
        admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.admin_authority = Some(admin_authority);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn admin(&mut self, admin: Pubkey) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn validator_manager(&mut self, validator_manager: Pubkey) -> &mut Self {
        self.instruction.validator_manager = Some(validator_manager);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn operational_sol_account(&mut self, operational_sol_account: Pubkey) -> &mut Self {
        self.instruction.operational_sol_account = Some(operational_sol_account);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn treasury_msol_account(&mut self, treasury_msol_account: Pubkey) -> &mut Self {
        self.instruction.treasury_msol_account = Some(treasury_msol_account);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn pause_authority(&mut self, pause_authority: Pubkey) -> &mut Self {
        self.instruction.pause_authority = Some(pause_authority);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = ChangeAuthorityInstructionArgs {
            admin: self.instruction.admin.clone(),
            validator_manager: self.instruction.validator_manager.clone(),
            operational_sol_account: self.instruction.operational_sol_account.clone(),
            treasury_msol_account: self.instruction.treasury_msol_account.clone(),
            pause_authority: self.instruction.pause_authority.clone(),
        };
        let instruction = ChangeAuthorityCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            admin_authority: self
                .instruction
                .admin_authority
                .expect("admin_authority is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ChangeAuthorityCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<Pubkey>,
    validator_manager: Option<Pubkey>,
    operational_sol_account: Option<Pubkey>,
    treasury_msol_account: Option<Pubkey>,
    pause_authority: Option<Pubkey>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
