//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum PhoenixV1Error {
    /// 0 - Invalid market parameters error
    #[error("Invalid market parameters error")]
    InvalidMarketParameters = 0x0,
    /// 1 - Invalid market authority error
    #[error("Invalid market authority error")]
    InvalidMarketAuthority = 0x1,
    /// 2 - Market deserialization error
    #[error("Market deserialization error")]
    FailedToLoadMarketFromAccount = 0x2,
    /// 3 - Market already initialized error
    #[error("Market already initialized error")]
    MarketAlreadyInitialized = 0x3,
    /// 4 - Market is not initialized error
    #[error("Market is not initialized error")]
    MarketUninitialized = 0x4,
    /// 5 - Invalid state transition error
    #[error("Invalid state transition error")]
    InvalidStateTransition = 0x5,
    /// 6 - Invalid market signer error
    #[error("Invalid market signer error")]
    InvalidMarketSigner = 0x6,
    /// 7 - Invalid lot size error
    #[error("Invalid lot size error")]
    InvalidLotSize = 0x7,
    /// 8 - Invalid tick size error
    #[error("Invalid tick size error")]
    InvalidTickSize = 0x8,
    /// 9 - Invalid mint error
    #[error("Invalid mint error")]
    InvalidMint = 0x9,
    /// 10 - Invalid base vault error
    #[error("Invalid base vault error")]
    InvalidBaseVault = 0xA,
    /// 11 - Invalid quote vault error
    #[error("Invalid quote vault error")]
    InvalidQuoteVault = 0xB,
    /// 12 - Invalid base account error
    #[error("Invalid base account error")]
    InvalidBaseAccount = 0xC,
    /// 13 - Invalid quote account error
    #[error("Invalid quote account error")]
    InvalidQuoteAccount = 0xD,
    /// 14 - Too many events error
    #[error("Too many events error")]
    TooManyEvents = 0xE,
    /// 15 - New order error
    #[error("New order error")]
    NewOrderError = 0xF,
    /// 16 - Reduce order error
    #[error("Reduce order error")]
    ReduceOrderError = 0x10,
    /// 17 - Cancel multiple orders error
    #[error("Cancel multiple orders error")]
    CancelMultipleOrdersError = 0x11,
    /// 18 - Withdraw funds error
    #[error("Withdraw funds error")]
    WithdrawFundsError = 0x12,
    /// 19 - Remove empty orders error
    #[error("Remove empty orders error")]
    RemoveEmptyOrdersError = 0x13,
    /// 20 - Trader not found error
    #[error("Trader not found error")]
    TraderNotFound = 0x14,
    /// 21 - Invalid seat status
    #[error("Invalid seat status")]
    InvalidSeatStatus = 0x15,
    /// 22 - Failed to evict trader
    #[error("Failed to evict trader")]
    EvictionError = 0x16,
    /// 23 - Non empty scratch buffer
    #[error("Non empty scratch buffer")]
    NonEmptyScratchBuffer = 0x17,
    /// 24 - Failed to serialize event
    #[error("Failed to serialize event")]
    FailedToSerializeEvent = 0x18,
    /// 25 - Failed to flush buffer
    #[error("Failed to flush buffer")]
    FailedToFlushBuffer = 0x19,
}

impl solana_program::program_error::PrintProgramError for PhoenixV1Error {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for PhoenixV1Error {
    fn type_of() -> &'static str {
        "PhoenixV1Error"
    }
}

