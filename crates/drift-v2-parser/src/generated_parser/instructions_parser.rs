//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        AddInsuranceFundStake as AddInsuranceFundStakeIxAccounts,
        AddInsuranceFundStakeInstructionArgs as AddInsuranceFundStakeIxData,
        AddPerpLpShares as AddPerpLpSharesIxAccounts,
        AddPerpLpSharesInstructionArgs as AddPerpLpSharesIxData,
        AdminDisableUpdatePerpBidAskTwap as AdminDisableUpdatePerpBidAskTwapIxAccounts,
        AdminDisableUpdatePerpBidAskTwapInstructionArgs as AdminDisableUpdatePerpBidAskTwapIxData,
        BeginSwap as BeginSwapIxAccounts, BeginSwapInstructionArgs as BeginSwapIxData,
        CancelOrder as CancelOrderIxAccounts, CancelOrderByUserId as CancelOrderByUserIdIxAccounts,
        CancelOrderByUserIdInstructionArgs as CancelOrderByUserIdIxData,
        CancelOrderInstructionArgs as CancelOrderIxData, CancelOrders as CancelOrdersIxAccounts,
        CancelOrdersByIds as CancelOrdersByIdsIxAccounts,
        CancelOrdersByIdsInstructionArgs as CancelOrdersByIdsIxData,
        CancelOrdersInstructionArgs as CancelOrdersIxData,
        CancelRequestRemoveInsuranceFundStake as CancelRequestRemoveInsuranceFundStakeIxAccounts,
        CancelRequestRemoveInsuranceFundStakeInstructionArgs as CancelRequestRemoveInsuranceFundStakeIxData,
        ChangeSignedMsgWsDelegateStatus as ChangeSignedMsgWsDelegateStatusIxAccounts,
        ChangeSignedMsgWsDelegateStatusInstructionArgs as ChangeSignedMsgWsDelegateStatusIxData,
        DeleteInitializedPerpMarket as DeleteInitializedPerpMarketIxAccounts,
        DeleteInitializedPerpMarketInstructionArgs as DeleteInitializedPerpMarketIxData,
        DeleteInitializedSpotMarket as DeleteInitializedSpotMarketIxAccounts,
        DeleteInitializedSpotMarketInstructionArgs as DeleteInitializedSpotMarketIxData,
        DeletePrelaunchOracle as DeletePrelaunchOracleIxAccounts,
        DeletePrelaunchOracleInstructionArgs as DeletePrelaunchOracleIxData,
        DeleteSignedMsgUserOrders as DeleteSignedMsgUserOrdersIxAccounts,
        DeleteUser as DeleteUserIxAccounts, Deposit as DepositIxAccounts,
        DepositInstructionArgs as DepositIxData,
        DepositIntoPerpMarketFeePool as DepositIntoPerpMarketFeePoolIxAccounts,
        DepositIntoPerpMarketFeePoolInstructionArgs as DepositIntoPerpMarketFeePoolIxData,
        DepositIntoSpotMarketRevenuePool as DepositIntoSpotMarketRevenuePoolIxAccounts,
        DepositIntoSpotMarketRevenuePoolInstructionArgs as DepositIntoSpotMarketRevenuePoolIxData,
        DepositIntoSpotMarketVault as DepositIntoSpotMarketVaultIxAccounts,
        DepositIntoSpotMarketVaultInstructionArgs as DepositIntoSpotMarketVaultIxData,
        DisableUserHighLeverageMode as DisableUserHighLeverageModeIxAccounts,
        EnableUserHighLeverageMode as EnableUserHighLeverageModeIxAccounts,
        EnableUserHighLeverageModeInstructionArgs as EnableUserHighLeverageModeIxData,
        EndSwap as EndSwapIxAccounts, EndSwapInstructionArgs as EndSwapIxData,
        FillPerpOrder as FillPerpOrderIxAccounts,
        FillPerpOrderInstructionArgs as FillPerpOrderIxData,
        FillSpotOrder as FillSpotOrderIxAccounts,
        FillSpotOrderInstructionArgs as FillSpotOrderIxData,
        ForceCancelOrders as ForceCancelOrdersIxAccounts,
        ForceDeleteUser as ForceDeleteUserIxAccounts, InitUserFuel as InitUserFuelIxAccounts,
        InitUserFuelInstructionArgs as InitUserFuelIxData, Initialize as InitializeIxAccounts,
        InitializeFuelOverflow as InitializeFuelOverflowIxAccounts,
        InitializeHighLeverageModeConfig as InitializeHighLeverageModeConfigIxAccounts,
        InitializeHighLeverageModeConfigInstructionArgs as InitializeHighLeverageModeConfigIxData,
        InitializeInsuranceFundStake as InitializeInsuranceFundStakeIxAccounts,
        InitializeInsuranceFundStakeInstructionArgs as InitializeInsuranceFundStakeIxData,
        InitializeOpenbookV2FulfillmentConfig as InitializeOpenbookV2FulfillmentConfigIxAccounts,
        InitializeOpenbookV2FulfillmentConfigInstructionArgs as InitializeOpenbookV2FulfillmentConfigIxData,
        InitializePerpMarket as InitializePerpMarketIxAccounts,
        InitializePerpMarketInstructionArgs as InitializePerpMarketIxData,
        InitializePhoenixFulfillmentConfig as InitializePhoenixFulfillmentConfigIxAccounts,
        InitializePhoenixFulfillmentConfigInstructionArgs as InitializePhoenixFulfillmentConfigIxData,
        InitializePredictionMarket as InitializePredictionMarketIxAccounts,
        InitializePrelaunchOracle as InitializePrelaunchOracleIxAccounts,
        InitializePrelaunchOracleInstructionArgs as InitializePrelaunchOracleIxData,
        InitializeProtectedMakerModeConfig as InitializeProtectedMakerModeConfigIxAccounts,
        InitializeProtectedMakerModeConfigInstructionArgs as InitializeProtectedMakerModeConfigIxData,
        InitializeProtocolIfSharesTransferConfig as InitializeProtocolIfSharesTransferConfigIxAccounts,
        InitializePythLazerOracle as InitializePythLazerOracleIxAccounts,
        InitializePythLazerOracleInstructionArgs as InitializePythLazerOracleIxData,
        InitializePythPullOracle as InitializePythPullOracleIxAccounts,
        InitializePythPullOracleInstructionArgs as InitializePythPullOracleIxData,
        InitializeReferrerName as InitializeReferrerNameIxAccounts,
        InitializeReferrerNameInstructionArgs as InitializeReferrerNameIxData,
        InitializeSerumFulfillmentConfig as InitializeSerumFulfillmentConfigIxAccounts,
        InitializeSerumFulfillmentConfigInstructionArgs as InitializeSerumFulfillmentConfigIxData,
        InitializeSignedMsgUserOrders as InitializeSignedMsgUserOrdersIxAccounts,
        InitializeSignedMsgUserOrdersInstructionArgs as InitializeSignedMsgUserOrdersIxData,
        InitializeSignedMsgWsDelegates as InitializeSignedMsgWsDelegatesIxAccounts,
        InitializeSignedMsgWsDelegatesInstructionArgs as InitializeSignedMsgWsDelegatesIxData,
        InitializeSpotMarket as InitializeSpotMarketIxAccounts,
        InitializeSpotMarketInstructionArgs as InitializeSpotMarketIxData,
        InitializeUser as InitializeUserIxAccounts,
        InitializeUserInstructionArgs as InitializeUserIxData,
        InitializeUserStats as InitializeUserStatsIxAccounts,
        LiquidateBorrowForPerpPnl as LiquidateBorrowForPerpPnlIxAccounts,
        LiquidateBorrowForPerpPnlInstructionArgs as LiquidateBorrowForPerpPnlIxData,
        LiquidatePerp as LiquidatePerpIxAccounts,
        LiquidatePerpInstructionArgs as LiquidatePerpIxData,
        LiquidatePerpPnlForDeposit as LiquidatePerpPnlForDepositIxAccounts,
        LiquidatePerpPnlForDepositInstructionArgs as LiquidatePerpPnlForDepositIxData,
        LiquidatePerpWithFill as LiquidatePerpWithFillIxAccounts,
        LiquidatePerpWithFillInstructionArgs as LiquidatePerpWithFillIxData,
        LiquidateSpot as LiquidateSpotIxAccounts,
        LiquidateSpotInstructionArgs as LiquidateSpotIxData,
        LiquidateSpotWithSwapBegin as LiquidateSpotWithSwapBeginIxAccounts,
        LiquidateSpotWithSwapBeginInstructionArgs as LiquidateSpotWithSwapBeginIxData,
        LiquidateSpotWithSwapEnd as LiquidateSpotWithSwapEndIxAccounts,
        LiquidateSpotWithSwapEndInstructionArgs as LiquidateSpotWithSwapEndIxData,
        LogUserBalances as LogUserBalancesIxAccounts, ModifyOrder as ModifyOrderIxAccounts,
        ModifyOrderByUserId as ModifyOrderByUserIdIxAccounts,
        ModifyOrderByUserIdInstructionArgs as ModifyOrderByUserIdIxData,
        ModifyOrderInstructionArgs as ModifyOrderIxData, MoveAmmPrice as MoveAmmPriceIxAccounts,
        MoveAmmPriceInstructionArgs as MoveAmmPriceIxData,
        OpenbookV2FulfillmentConfigStatus as OpenbookV2FulfillmentConfigStatusIxAccounts,
        OpenbookV2FulfillmentConfigStatusInstructionArgs as OpenbookV2FulfillmentConfigStatusIxData,
        PauseSpotMarketDepositWithdraw as PauseSpotMarketDepositWithdrawIxAccounts,
        PhoenixFulfillmentConfigStatus as PhoenixFulfillmentConfigStatusIxAccounts,
        PhoenixFulfillmentConfigStatusInstructionArgs as PhoenixFulfillmentConfigStatusIxData,
        PlaceAndMakePerpOrder as PlaceAndMakePerpOrderIxAccounts,
        PlaceAndMakePerpOrderInstructionArgs as PlaceAndMakePerpOrderIxData,
        PlaceAndMakeSignedMsgPerpOrder as PlaceAndMakeSignedMsgPerpOrderIxAccounts,
        PlaceAndMakeSignedMsgPerpOrderInstructionArgs as PlaceAndMakeSignedMsgPerpOrderIxData,
        PlaceAndMakeSpotOrder as PlaceAndMakeSpotOrderIxAccounts,
        PlaceAndMakeSpotOrderInstructionArgs as PlaceAndMakeSpotOrderIxData,
        PlaceAndTakePerpOrder as PlaceAndTakePerpOrderIxAccounts,
        PlaceAndTakePerpOrderInstructionArgs as PlaceAndTakePerpOrderIxData,
        PlaceAndTakeSpotOrder as PlaceAndTakeSpotOrderIxAccounts,
        PlaceAndTakeSpotOrderInstructionArgs as PlaceAndTakeSpotOrderIxData,
        PlaceOrders as PlaceOrdersIxAccounts, PlaceOrdersInstructionArgs as PlaceOrdersIxData,
        PlacePerpOrder as PlacePerpOrderIxAccounts,
        PlacePerpOrderInstructionArgs as PlacePerpOrderIxData,
        PlaceSignedMsgTakerOrder as PlaceSignedMsgTakerOrderIxAccounts,
        PlaceSignedMsgTakerOrderInstructionArgs as PlaceSignedMsgTakerOrderIxData,
        PlaceSpotOrder as PlaceSpotOrderIxAccounts,
        PlaceSpotOrderInstructionArgs as PlaceSpotOrderIxData,
        PostMultiPythPullOracleUpdatesAtomic as PostMultiPythPullOracleUpdatesAtomicIxAccounts,
        PostMultiPythPullOracleUpdatesAtomicInstructionArgs as PostMultiPythPullOracleUpdatesAtomicIxData,
        PostPythLazerOracleUpdate as PostPythLazerOracleUpdateIxAccounts,
        PostPythLazerOracleUpdateInstructionArgs as PostPythLazerOracleUpdateIxData,
        PostPythPullOracleUpdateAtomic as PostPythPullOracleUpdateAtomicIxAccounts,
        PostPythPullOracleUpdateAtomicInstructionArgs as PostPythPullOracleUpdateAtomicIxData,
        RecenterPerpMarketAmm as RecenterPerpMarketAmmIxAccounts,
        RecenterPerpMarketAmmInstructionArgs as RecenterPerpMarketAmmIxData,
        ReclaimRent as ReclaimRentIxAccounts,
        RemoveInsuranceFundStake as RemoveInsuranceFundStakeIxAccounts,
        RemoveInsuranceFundStakeInstructionArgs as RemoveInsuranceFundStakeIxData,
        RemovePerpLpShares as RemovePerpLpSharesIxAccounts,
        RemovePerpLpSharesInExpiringMarket as RemovePerpLpSharesInExpiringMarketIxAccounts,
        RemovePerpLpSharesInExpiringMarketInstructionArgs as RemovePerpLpSharesInExpiringMarketIxData,
        RemovePerpLpSharesInstructionArgs as RemovePerpLpSharesIxData,
        RepegAmmCurve as RepegAmmCurveIxAccounts,
        RepegAmmCurveInstructionArgs as RepegAmmCurveIxData,
        RequestRemoveInsuranceFundStake as RequestRemoveInsuranceFundStakeIxAccounts,
        RequestRemoveInsuranceFundStakeInstructionArgs as RequestRemoveInsuranceFundStakeIxData,
        ResetFuelSeason as ResetFuelSeasonIxAccounts,
        ResetPerpMarketAmmOracleTwap as ResetPerpMarketAmmOracleTwapIxAccounts,
        ResizeSignedMsgUserOrders as ResizeSignedMsgUserOrdersIxAccounts,
        ResizeSignedMsgUserOrdersInstructionArgs as ResizeSignedMsgUserOrdersIxData,
        ResolvePerpBankruptcy as ResolvePerpBankruptcyIxAccounts,
        ResolvePerpBankruptcyInstructionArgs as ResolvePerpBankruptcyIxData,
        ResolvePerpPnlDeficit as ResolvePerpPnlDeficitIxAccounts,
        ResolvePerpPnlDeficitInstructionArgs as ResolvePerpPnlDeficitIxData,
        ResolveSpotBankruptcy as ResolveSpotBankruptcyIxAccounts,
        ResolveSpotBankruptcyInstructionArgs as ResolveSpotBankruptcyIxData,
        RevertFill as RevertFillIxAccounts,
        SetUserStatusToBeingLiquidated as SetUserStatusToBeingLiquidatedIxAccounts,
        SettleExpiredMarket as SettleExpiredMarketIxAccounts,
        SettleExpiredMarketInstructionArgs as SettleExpiredMarketIxData,
        SettleExpiredMarketPoolsToRevenuePool as SettleExpiredMarketPoolsToRevenuePoolIxAccounts,
        SettleFundingPayment as SettleFundingPaymentIxAccounts, SettleLp as SettleLpIxAccounts,
        SettleLpInstructionArgs as SettleLpIxData,
        SettleMultiplePnls as SettleMultiplePnlsIxAccounts,
        SettleMultiplePnlsInstructionArgs as SettleMultiplePnlsIxData,
        SettlePnl as SettlePnlIxAccounts, SettlePnlInstructionArgs as SettlePnlIxData,
        SettleRevenueToInsuranceFund as SettleRevenueToInsuranceFundIxAccounts,
        SettleRevenueToInsuranceFundInstructionArgs as SettleRevenueToInsuranceFundIxData,
        SweepFuel as SweepFuelIxAccounts, TransferDeposit as TransferDepositIxAccounts,
        TransferDepositInstructionArgs as TransferDepositIxData,
        TransferPerpPosition as TransferPerpPositionIxAccounts,
        TransferPerpPositionInstructionArgs as TransferPerpPositionIxData,
        TransferPools as TransferPoolsIxAccounts,
        TransferPoolsInstructionArgs as TransferPoolsIxData,
        TransferProtocolIfShares as TransferProtocolIfSharesIxAccounts,
        TransferProtocolIfSharesInstructionArgs as TransferProtocolIfSharesIxData,
        TriggerOrder as TriggerOrderIxAccounts, TriggerOrderInstructionArgs as TriggerOrderIxData,
        UpdateAdmin as UpdateAdminIxAccounts, UpdateAdminInstructionArgs as UpdateAdminIxData,
        UpdateAmmJitIntensity as UpdateAmmJitIntensityIxAccounts,
        UpdateAmmJitIntensityInstructionArgs as UpdateAmmJitIntensityIxData,
        UpdateAmms as UpdateAmmsIxAccounts, UpdateAmmsInstructionArgs as UpdateAmmsIxData,
        UpdateDiscountMint as UpdateDiscountMintIxAccounts,
        UpdateDiscountMintInstructionArgs as UpdateDiscountMintIxData,
        UpdateExchangeStatus as UpdateExchangeStatusIxAccounts,
        UpdateExchangeStatusInstructionArgs as UpdateExchangeStatusIxData,
        UpdateFundingRate as UpdateFundingRateIxAccounts,
        UpdateFundingRateInstructionArgs as UpdateFundingRateIxData,
        UpdateHighLeverageModeConfig as UpdateHighLeverageModeConfigIxAccounts,
        UpdateHighLeverageModeConfigInstructionArgs as UpdateHighLeverageModeConfigIxData,
        UpdateInitialPctToLiquidate as UpdateInitialPctToLiquidateIxAccounts,
        UpdateInitialPctToLiquidateInstructionArgs as UpdateInitialPctToLiquidateIxData,
        UpdateInsuranceFundUnstakingPeriod as UpdateInsuranceFundUnstakingPeriodIxAccounts,
        UpdateInsuranceFundUnstakingPeriodInstructionArgs as UpdateInsuranceFundUnstakingPeriodIxData,
        UpdateK as UpdateKIxAccounts, UpdateKInstructionArgs as UpdateKIxData,
        UpdateLiquidationDuration as UpdateLiquidationDurationIxAccounts,
        UpdateLiquidationDurationInstructionArgs as UpdateLiquidationDurationIxData,
        UpdateLiquidationMarginBufferRatio as UpdateLiquidationMarginBufferRatioIxAccounts,
        UpdateLiquidationMarginBufferRatioInstructionArgs as UpdateLiquidationMarginBufferRatioIxData,
        UpdateLpCooldownTime as UpdateLpCooldownTimeIxAccounts,
        UpdateLpCooldownTimeInstructionArgs as UpdateLpCooldownTimeIxData,
        UpdateOracleGuardRails as UpdateOracleGuardRailsIxAccounts,
        UpdateOracleGuardRailsInstructionArgs as UpdateOracleGuardRailsIxData,
        UpdatePerpAuctionDuration as UpdatePerpAuctionDurationIxAccounts,
        UpdatePerpAuctionDurationInstructionArgs as UpdatePerpAuctionDurationIxData,
        UpdatePerpBidAskTwap as UpdatePerpBidAskTwapIxAccounts,
        UpdatePerpFeeStructure as UpdatePerpFeeStructureIxAccounts,
        UpdatePerpFeeStructureInstructionArgs as UpdatePerpFeeStructureIxData,
        UpdatePerpMarketAmmOracleTwap as UpdatePerpMarketAmmOracleTwapIxAccounts,
        UpdatePerpMarketAmmSummaryStats as UpdatePerpMarketAmmSummaryStatsIxAccounts,
        UpdatePerpMarketAmmSummaryStatsInstructionArgs as UpdatePerpMarketAmmSummaryStatsIxData,
        UpdatePerpMarketBaseSpread as UpdatePerpMarketBaseSpreadIxAccounts,
        UpdatePerpMarketBaseSpreadInstructionArgs as UpdatePerpMarketBaseSpreadIxData,
        UpdatePerpMarketConcentrationCoef as UpdatePerpMarketConcentrationCoefIxAccounts,
        UpdatePerpMarketConcentrationCoefInstructionArgs as UpdatePerpMarketConcentrationCoefIxData,
        UpdatePerpMarketContractTier as UpdatePerpMarketContractTierIxAccounts,
        UpdatePerpMarketContractTierInstructionArgs as UpdatePerpMarketContractTierIxData,
        UpdatePerpMarketCurveUpdateIntensity as UpdatePerpMarketCurveUpdateIntensityIxAccounts,
        UpdatePerpMarketCurveUpdateIntensityInstructionArgs as UpdatePerpMarketCurveUpdateIntensityIxData,
        UpdatePerpMarketExpiry as UpdatePerpMarketExpiryIxAccounts,
        UpdatePerpMarketExpiryInstructionArgs as UpdatePerpMarketExpiryIxData,
        UpdatePerpMarketFeeAdjustment as UpdatePerpMarketFeeAdjustmentIxAccounts,
        UpdatePerpMarketFeeAdjustmentInstructionArgs as UpdatePerpMarketFeeAdjustmentIxData,
        UpdatePerpMarketFuel as UpdatePerpMarketFuelIxAccounts,
        UpdatePerpMarketFuelInstructionArgs as UpdatePerpMarketFuelIxData,
        UpdatePerpMarketFundingPeriod as UpdatePerpMarketFundingPeriodIxAccounts,
        UpdatePerpMarketFundingPeriodInstructionArgs as UpdatePerpMarketFundingPeriodIxData,
        UpdatePerpMarketHighLeverageMarginRatio as UpdatePerpMarketHighLeverageMarginRatioIxAccounts,
        UpdatePerpMarketHighLeverageMarginRatioInstructionArgs as UpdatePerpMarketHighLeverageMarginRatioIxData,
        UpdatePerpMarketImfFactor as UpdatePerpMarketImfFactorIxAccounts,
        UpdatePerpMarketImfFactorInstructionArgs as UpdatePerpMarketImfFactorIxData,
        UpdatePerpMarketLiquidationFee as UpdatePerpMarketLiquidationFeeIxAccounts,
        UpdatePerpMarketLiquidationFeeInstructionArgs as UpdatePerpMarketLiquidationFeeIxData,
        UpdatePerpMarketMarginRatio as UpdatePerpMarketMarginRatioIxAccounts,
        UpdatePerpMarketMarginRatioInstructionArgs as UpdatePerpMarketMarginRatioIxData,
        UpdatePerpMarketMaxFillReserveFraction as UpdatePerpMarketMaxFillReserveFractionIxAccounts,
        UpdatePerpMarketMaxFillReserveFractionInstructionArgs as UpdatePerpMarketMaxFillReserveFractionIxData,
        UpdatePerpMarketMaxImbalances as UpdatePerpMarketMaxImbalancesIxAccounts,
        UpdatePerpMarketMaxImbalancesInstructionArgs as UpdatePerpMarketMaxImbalancesIxData,
        UpdatePerpMarketMaxOpenInterest as UpdatePerpMarketMaxOpenInterestIxAccounts,
        UpdatePerpMarketMaxOpenInterestInstructionArgs as UpdatePerpMarketMaxOpenInterestIxData,
        UpdatePerpMarketMaxSlippageRatio as UpdatePerpMarketMaxSlippageRatioIxAccounts,
        UpdatePerpMarketMaxSlippageRatioInstructionArgs as UpdatePerpMarketMaxSlippageRatioIxData,
        UpdatePerpMarketMaxSpread as UpdatePerpMarketMaxSpreadIxAccounts,
        UpdatePerpMarketMaxSpreadInstructionArgs as UpdatePerpMarketMaxSpreadIxData,
        UpdatePerpMarketMinOrderSize as UpdatePerpMarketMinOrderSizeIxAccounts,
        UpdatePerpMarketMinOrderSizeInstructionArgs as UpdatePerpMarketMinOrderSizeIxData,
        UpdatePerpMarketName as UpdatePerpMarketNameIxAccounts,
        UpdatePerpMarketNameInstructionArgs as UpdatePerpMarketNameIxData,
        UpdatePerpMarketNumberOfUsers as UpdatePerpMarketNumberOfUsersIxAccounts,
        UpdatePerpMarketNumberOfUsersInstructionArgs as UpdatePerpMarketNumberOfUsersIxData,
        UpdatePerpMarketOracle as UpdatePerpMarketOracleIxAccounts,
        UpdatePerpMarketOracleInstructionArgs as UpdatePerpMarketOracleIxData,
        UpdatePerpMarketPausedOperations as UpdatePerpMarketPausedOperationsIxAccounts,
        UpdatePerpMarketPausedOperationsInstructionArgs as UpdatePerpMarketPausedOperationsIxData,
        UpdatePerpMarketPerLpBase as UpdatePerpMarketPerLpBaseIxAccounts,
        UpdatePerpMarketPerLpBaseInstructionArgs as UpdatePerpMarketPerLpBaseIxData,
        UpdatePerpMarketStatus as UpdatePerpMarketStatusIxAccounts,
        UpdatePerpMarketStatusInstructionArgs as UpdatePerpMarketStatusIxData,
        UpdatePerpMarketStepSizeAndTickSize as UpdatePerpMarketStepSizeAndTickSizeIxAccounts,
        UpdatePerpMarketStepSizeAndTickSizeInstructionArgs as UpdatePerpMarketStepSizeAndTickSizeIxData,
        UpdatePerpMarketTargetBaseAssetAmountPerLp as UpdatePerpMarketTargetBaseAssetAmountPerLpIxAccounts,
        UpdatePerpMarketTargetBaseAssetAmountPerLpInstructionArgs as UpdatePerpMarketTargetBaseAssetAmountPerLpIxData,
        UpdatePerpMarketUnrealizedAssetWeight as UpdatePerpMarketUnrealizedAssetWeightIxAccounts,
        UpdatePerpMarketUnrealizedAssetWeightInstructionArgs as UpdatePerpMarketUnrealizedAssetWeightIxData,
        UpdatePrelaunchOracle as UpdatePrelaunchOracleIxAccounts,
        UpdatePrelaunchOracleParams as UpdatePrelaunchOracleParamsIxAccounts,
        UpdatePrelaunchOracleParamsInstructionArgs as UpdatePrelaunchOracleParamsIxData,
        UpdateProtectedMakerModeConfig as UpdateProtectedMakerModeConfigIxAccounts,
        UpdateProtectedMakerModeConfigInstructionArgs as UpdateProtectedMakerModeConfigIxData,
        UpdateProtocolIfSharesTransferConfig as UpdateProtocolIfSharesTransferConfigIxAccounts,
        UpdateProtocolIfSharesTransferConfigInstructionArgs as UpdateProtocolIfSharesTransferConfigIxData,
        UpdatePythPullOracle as UpdatePythPullOracleIxAccounts,
        UpdatePythPullOracleInstructionArgs as UpdatePythPullOracleIxData,
        UpdateSerumFulfillmentConfigStatus as UpdateSerumFulfillmentConfigStatusIxAccounts,
        UpdateSerumFulfillmentConfigStatusInstructionArgs as UpdateSerumFulfillmentConfigStatusIxData,
        UpdateSerumVault as UpdateSerumVaultIxAccounts,
        UpdateSpotAuctionDuration as UpdateSpotAuctionDurationIxAccounts,
        UpdateSpotAuctionDurationInstructionArgs as UpdateSpotAuctionDurationIxData,
        UpdateSpotFeeStructure as UpdateSpotFeeStructureIxAccounts,
        UpdateSpotFeeStructureInstructionArgs as UpdateSpotFeeStructureIxData,
        UpdateSpotMarketAssetTier as UpdateSpotMarketAssetTierIxAccounts,
        UpdateSpotMarketAssetTierInstructionArgs as UpdateSpotMarketAssetTierIxData,
        UpdateSpotMarketBorrowRate as UpdateSpotMarketBorrowRateIxAccounts,
        UpdateSpotMarketBorrowRateInstructionArgs as UpdateSpotMarketBorrowRateIxData,
        UpdateSpotMarketCumulativeInterest as UpdateSpotMarketCumulativeInterestIxAccounts,
        UpdateSpotMarketExpiry as UpdateSpotMarketExpiryIxAccounts,
        UpdateSpotMarketExpiryInstructionArgs as UpdateSpotMarketExpiryIxData,
        UpdateSpotMarketFeeAdjustment as UpdateSpotMarketFeeAdjustmentIxAccounts,
        UpdateSpotMarketFeeAdjustmentInstructionArgs as UpdateSpotMarketFeeAdjustmentIxData,
        UpdateSpotMarketFuel as UpdateSpotMarketFuelIxAccounts,
        UpdateSpotMarketFuelInstructionArgs as UpdateSpotMarketFuelIxData,
        UpdateSpotMarketIfFactor as UpdateSpotMarketIfFactorIxAccounts,
        UpdateSpotMarketIfFactorInstructionArgs as UpdateSpotMarketIfFactorIxData,
        UpdateSpotMarketIfPausedOperations as UpdateSpotMarketIfPausedOperationsIxAccounts,
        UpdateSpotMarketIfPausedOperationsInstructionArgs as UpdateSpotMarketIfPausedOperationsIxData,
        UpdateSpotMarketLiquidationFee as UpdateSpotMarketLiquidationFeeIxAccounts,
        UpdateSpotMarketLiquidationFeeInstructionArgs as UpdateSpotMarketLiquidationFeeIxData,
        UpdateSpotMarketMarginWeights as UpdateSpotMarketMarginWeightsIxAccounts,
        UpdateSpotMarketMarginWeightsInstructionArgs as UpdateSpotMarketMarginWeightsIxData,
        UpdateSpotMarketMaxTokenBorrows as UpdateSpotMarketMaxTokenBorrowsIxAccounts,
        UpdateSpotMarketMaxTokenBorrowsInstructionArgs as UpdateSpotMarketMaxTokenBorrowsIxData,
        UpdateSpotMarketMaxTokenDeposits as UpdateSpotMarketMaxTokenDepositsIxAccounts,
        UpdateSpotMarketMaxTokenDepositsInstructionArgs as UpdateSpotMarketMaxTokenDepositsIxData,
        UpdateSpotMarketMinOrderSize as UpdateSpotMarketMinOrderSizeIxAccounts,
        UpdateSpotMarketMinOrderSizeInstructionArgs as UpdateSpotMarketMinOrderSizeIxData,
        UpdateSpotMarketName as UpdateSpotMarketNameIxAccounts,
        UpdateSpotMarketNameInstructionArgs as UpdateSpotMarketNameIxData,
        UpdateSpotMarketOracle as UpdateSpotMarketOracleIxAccounts,
        UpdateSpotMarketOracleInstructionArgs as UpdateSpotMarketOracleIxData,
        UpdateSpotMarketOrdersEnabled as UpdateSpotMarketOrdersEnabledIxAccounts,
        UpdateSpotMarketOrdersEnabledInstructionArgs as UpdateSpotMarketOrdersEnabledIxData,
        UpdateSpotMarketPausedOperations as UpdateSpotMarketPausedOperationsIxAccounts,
        UpdateSpotMarketPausedOperationsInstructionArgs as UpdateSpotMarketPausedOperationsIxData,
        UpdateSpotMarketPoolId as UpdateSpotMarketPoolIdIxAccounts,
        UpdateSpotMarketPoolIdInstructionArgs as UpdateSpotMarketPoolIdIxData,
        UpdateSpotMarketRevenueSettlePeriod as UpdateSpotMarketRevenueSettlePeriodIxAccounts,
        UpdateSpotMarketRevenueSettlePeriodInstructionArgs as UpdateSpotMarketRevenueSettlePeriodIxData,
        UpdateSpotMarketScaleInitialAssetWeightStart as UpdateSpotMarketScaleInitialAssetWeightStartIxAccounts,
        UpdateSpotMarketScaleInitialAssetWeightStartInstructionArgs as UpdateSpotMarketScaleInitialAssetWeightStartIxData,
        UpdateSpotMarketStatus as UpdateSpotMarketStatusIxAccounts,
        UpdateSpotMarketStatusInstructionArgs as UpdateSpotMarketStatusIxData,
        UpdateSpotMarketStepSizeAndTickSize as UpdateSpotMarketStepSizeAndTickSizeIxAccounts,
        UpdateSpotMarketStepSizeAndTickSizeInstructionArgs as UpdateSpotMarketStepSizeAndTickSizeIxData,
        UpdateStateMaxInitializeUserFee as UpdateStateMaxInitializeUserFeeIxAccounts,
        UpdateStateMaxInitializeUserFeeInstructionArgs as UpdateStateMaxInitializeUserFeeIxData,
        UpdateStateMaxNumberOfSubAccounts as UpdateStateMaxNumberOfSubAccountsIxAccounts,
        UpdateStateMaxNumberOfSubAccountsInstructionArgs as UpdateStateMaxNumberOfSubAccountsIxData,
        UpdateStateSettlementDuration as UpdateStateSettlementDurationIxAccounts,
        UpdateStateSettlementDurationInstructionArgs as UpdateStateSettlementDurationIxData,
        UpdateUserAdvancedLp as UpdateUserAdvancedLpIxAccounts,
        UpdateUserAdvancedLpInstructionArgs as UpdateUserAdvancedLpIxData,
        UpdateUserCustomMarginRatio as UpdateUserCustomMarginRatioIxAccounts,
        UpdateUserCustomMarginRatioInstructionArgs as UpdateUserCustomMarginRatioIxData,
        UpdateUserDelegate as UpdateUserDelegateIxAccounts,
        UpdateUserDelegateInstructionArgs as UpdateUserDelegateIxData,
        UpdateUserFuelBonus as UpdateUserFuelBonusIxAccounts,
        UpdateUserGovTokenInsuranceStake as UpdateUserGovTokenInsuranceStakeIxAccounts,
        UpdateUserGovTokenInsuranceStakeDevnet as UpdateUserGovTokenInsuranceStakeDevnetIxAccounts,
        UpdateUserGovTokenInsuranceStakeDevnetInstructionArgs as UpdateUserGovTokenInsuranceStakeDevnetIxData,
        UpdateUserIdle as UpdateUserIdleIxAccounts,
        UpdateUserMarginTradingEnabled as UpdateUserMarginTradingEnabledIxAccounts,
        UpdateUserMarginTradingEnabledInstructionArgs as UpdateUserMarginTradingEnabledIxData,
        UpdateUserName as UpdateUserNameIxAccounts,
        UpdateUserNameInstructionArgs as UpdateUserNameIxData,
        UpdateUserOpenOrdersCount as UpdateUserOpenOrdersCountIxAccounts,
        UpdateUserPoolId as UpdateUserPoolIdIxAccounts,
        UpdateUserPoolIdInstructionArgs as UpdateUserPoolIdIxData,
        UpdateUserProtectedMakerOrders as UpdateUserProtectedMakerOrdersIxAccounts,
        UpdateUserProtectedMakerOrdersInstructionArgs as UpdateUserProtectedMakerOrdersIxData,
        UpdateUserQuoteAssetInsuranceStake as UpdateUserQuoteAssetInsuranceStakeIxAccounts,
        UpdateUserReduceOnly as UpdateUserReduceOnlyIxAccounts,
        UpdateUserReduceOnlyInstructionArgs as UpdateUserReduceOnlyIxData,
        UpdateUserStatsReferrerStatus as UpdateUserStatsReferrerStatusIxAccounts,
        UpdateWhitelistMint as UpdateWhitelistMintIxAccounts,
        UpdateWhitelistMintInstructionArgs as UpdateWhitelistMintIxData,
        UpdateWithdrawGuardThreshold as UpdateWithdrawGuardThresholdIxAccounts,
        UpdateWithdrawGuardThresholdInstructionArgs as UpdateWithdrawGuardThresholdIxData,
        Withdraw as WithdrawIxAccounts, WithdrawInstructionArgs as WithdrawIxData,
    },
    ID,
};

/// Drift Instructions
#[derive(Debug)]
pub enum DriftProgramIx {
    InitializeUser(InitializeUserIxAccounts, InitializeUserIxData),
    InitializeUserStats(InitializeUserStatsIxAccounts),
    InitializeSignedMsgUserOrders(
        InitializeSignedMsgUserOrdersIxAccounts,
        InitializeSignedMsgUserOrdersIxData,
    ),
    ResizeSignedMsgUserOrders(
        ResizeSignedMsgUserOrdersIxAccounts,
        ResizeSignedMsgUserOrdersIxData,
    ),
    InitializeSignedMsgWsDelegates(
        InitializeSignedMsgWsDelegatesIxAccounts,
        InitializeSignedMsgWsDelegatesIxData,
    ),
    ChangeSignedMsgWsDelegateStatus(
        ChangeSignedMsgWsDelegateStatusIxAccounts,
        ChangeSignedMsgWsDelegateStatusIxData,
    ),
    InitializeFuelOverflow(InitializeFuelOverflowIxAccounts),
    SweepFuel(SweepFuelIxAccounts),
    ResetFuelSeason(ResetFuelSeasonIxAccounts),
    InitializeReferrerName(
        InitializeReferrerNameIxAccounts,
        InitializeReferrerNameIxData,
    ),
    Deposit(DepositIxAccounts, DepositIxData),
    Withdraw(WithdrawIxAccounts, WithdrawIxData),
    TransferDeposit(TransferDepositIxAccounts, TransferDepositIxData),
    TransferPools(TransferPoolsIxAccounts, TransferPoolsIxData),
    TransferPerpPosition(TransferPerpPositionIxAccounts, TransferPerpPositionIxData),
    PlacePerpOrder(PlacePerpOrderIxAccounts, PlacePerpOrderIxData),
    CancelOrder(CancelOrderIxAccounts, CancelOrderIxData),
    CancelOrderByUserId(CancelOrderByUserIdIxAccounts, CancelOrderByUserIdIxData),
    CancelOrders(CancelOrdersIxAccounts, CancelOrdersIxData),
    CancelOrdersByIds(CancelOrdersByIdsIxAccounts, CancelOrdersByIdsIxData),
    ModifyOrder(ModifyOrderIxAccounts, ModifyOrderIxData),
    ModifyOrderByUserId(ModifyOrderByUserIdIxAccounts, ModifyOrderByUserIdIxData),
    PlaceAndTakePerpOrder(PlaceAndTakePerpOrderIxAccounts, PlaceAndTakePerpOrderIxData),
    PlaceAndMakePerpOrder(PlaceAndMakePerpOrderIxAccounts, PlaceAndMakePerpOrderIxData),
    PlaceAndMakeSignedMsgPerpOrder(
        PlaceAndMakeSignedMsgPerpOrderIxAccounts,
        PlaceAndMakeSignedMsgPerpOrderIxData,
    ),
    PlaceSignedMsgTakerOrder(
        PlaceSignedMsgTakerOrderIxAccounts,
        PlaceSignedMsgTakerOrderIxData,
    ),
    PlaceSpotOrder(PlaceSpotOrderIxAccounts, PlaceSpotOrderIxData),
    PlaceAndTakeSpotOrder(PlaceAndTakeSpotOrderIxAccounts, PlaceAndTakeSpotOrderIxData),
    PlaceAndMakeSpotOrder(PlaceAndMakeSpotOrderIxAccounts, PlaceAndMakeSpotOrderIxData),
    PlaceOrders(PlaceOrdersIxAccounts, PlaceOrdersIxData),
    BeginSwap(BeginSwapIxAccounts, BeginSwapIxData),
    EndSwap(EndSwapIxAccounts, EndSwapIxData),
    AddPerpLpShares(AddPerpLpSharesIxAccounts, AddPerpLpSharesIxData),
    RemovePerpLpShares(RemovePerpLpSharesIxAccounts, RemovePerpLpSharesIxData),
    RemovePerpLpSharesInExpiringMarket(
        RemovePerpLpSharesInExpiringMarketIxAccounts,
        RemovePerpLpSharesInExpiringMarketIxData,
    ),
    UpdateUserName(UpdateUserNameIxAccounts, UpdateUserNameIxData),
    UpdateUserCustomMarginRatio(
        UpdateUserCustomMarginRatioIxAccounts,
        UpdateUserCustomMarginRatioIxData,
    ),
    UpdateUserMarginTradingEnabled(
        UpdateUserMarginTradingEnabledIxAccounts,
        UpdateUserMarginTradingEnabledIxData,
    ),
    UpdateUserPoolId(UpdateUserPoolIdIxAccounts, UpdateUserPoolIdIxData),
    UpdateUserDelegate(UpdateUserDelegateIxAccounts, UpdateUserDelegateIxData),
    UpdateUserReduceOnly(UpdateUserReduceOnlyIxAccounts, UpdateUserReduceOnlyIxData),
    UpdateUserAdvancedLp(UpdateUserAdvancedLpIxAccounts, UpdateUserAdvancedLpIxData),
    UpdateUserProtectedMakerOrders(
        UpdateUserProtectedMakerOrdersIxAccounts,
        UpdateUserProtectedMakerOrdersIxData,
    ),
    DeleteUser(DeleteUserIxAccounts),
    ForceDeleteUser(ForceDeleteUserIxAccounts),
    DeleteSignedMsgUserOrders(DeleteSignedMsgUserOrdersIxAccounts),
    ReclaimRent(ReclaimRentIxAccounts),
    EnableUserHighLeverageMode(
        EnableUserHighLeverageModeIxAccounts,
        EnableUserHighLeverageModeIxData,
    ),
    FillPerpOrder(FillPerpOrderIxAccounts, FillPerpOrderIxData),
    RevertFill(RevertFillIxAccounts),
    FillSpotOrder(FillSpotOrderIxAccounts, FillSpotOrderIxData),
    TriggerOrder(TriggerOrderIxAccounts, TriggerOrderIxData),
    ForceCancelOrders(ForceCancelOrdersIxAccounts),
    UpdateUserIdle(UpdateUserIdleIxAccounts),
    LogUserBalances(LogUserBalancesIxAccounts),
    DisableUserHighLeverageMode(DisableUserHighLeverageModeIxAccounts),
    UpdateUserFuelBonus(UpdateUserFuelBonusIxAccounts),
    UpdateUserStatsReferrerStatus(UpdateUserStatsReferrerStatusIxAccounts),
    UpdateUserOpenOrdersCount(UpdateUserOpenOrdersCountIxAccounts),
    AdminDisableUpdatePerpBidAskTwap(
        AdminDisableUpdatePerpBidAskTwapIxAccounts,
        AdminDisableUpdatePerpBidAskTwapIxData,
    ),
    SettlePnl(SettlePnlIxAccounts, SettlePnlIxData),
    SettleMultiplePnls(SettleMultiplePnlsIxAccounts, SettleMultiplePnlsIxData),
    SettleFundingPayment(SettleFundingPaymentIxAccounts),
    SettleLp(SettleLpIxAccounts, SettleLpIxData),
    SettleExpiredMarket(SettleExpiredMarketIxAccounts, SettleExpiredMarketIxData),
    LiquidatePerp(LiquidatePerpIxAccounts, LiquidatePerpIxData),
    LiquidatePerpWithFill(LiquidatePerpWithFillIxAccounts, LiquidatePerpWithFillIxData),
    LiquidateSpot(LiquidateSpotIxAccounts, LiquidateSpotIxData),
    LiquidateSpotWithSwapBegin(
        LiquidateSpotWithSwapBeginIxAccounts,
        LiquidateSpotWithSwapBeginIxData,
    ),
    LiquidateSpotWithSwapEnd(
        LiquidateSpotWithSwapEndIxAccounts,
        LiquidateSpotWithSwapEndIxData,
    ),
    LiquidateBorrowForPerpPnl(
        LiquidateBorrowForPerpPnlIxAccounts,
        LiquidateBorrowForPerpPnlIxData,
    ),
    LiquidatePerpPnlForDeposit(
        LiquidatePerpPnlForDepositIxAccounts,
        LiquidatePerpPnlForDepositIxData,
    ),
    SetUserStatusToBeingLiquidated(SetUserStatusToBeingLiquidatedIxAccounts),
    ResolvePerpPnlDeficit(ResolvePerpPnlDeficitIxAccounts, ResolvePerpPnlDeficitIxData),
    ResolvePerpBankruptcy(ResolvePerpBankruptcyIxAccounts, ResolvePerpBankruptcyIxData),
    ResolveSpotBankruptcy(ResolveSpotBankruptcyIxAccounts, ResolveSpotBankruptcyIxData),
    SettleRevenueToInsuranceFund(
        SettleRevenueToInsuranceFundIxAccounts,
        SettleRevenueToInsuranceFundIxData,
    ),
    UpdateFundingRate(UpdateFundingRateIxAccounts, UpdateFundingRateIxData),
    UpdatePrelaunchOracle(UpdatePrelaunchOracleIxAccounts),
    UpdatePerpBidAskTwap(UpdatePerpBidAskTwapIxAccounts),
    UpdateSpotMarketCumulativeInterest(UpdateSpotMarketCumulativeInterestIxAccounts),
    UpdateAmms(UpdateAmmsIxAccounts, UpdateAmmsIxData),
    UpdateSpotMarketExpiry(
        UpdateSpotMarketExpiryIxAccounts,
        UpdateSpotMarketExpiryIxData,
    ),
    UpdateUserQuoteAssetInsuranceStake(UpdateUserQuoteAssetInsuranceStakeIxAccounts),
    UpdateUserGovTokenInsuranceStake(UpdateUserGovTokenInsuranceStakeIxAccounts),
    UpdateUserGovTokenInsuranceStakeDevnet(
        UpdateUserGovTokenInsuranceStakeDevnetIxAccounts,
        UpdateUserGovTokenInsuranceStakeDevnetIxData,
    ),
    InitializeInsuranceFundStake(
        InitializeInsuranceFundStakeIxAccounts,
        InitializeInsuranceFundStakeIxData,
    ),
    AddInsuranceFundStake(AddInsuranceFundStakeIxAccounts, AddInsuranceFundStakeIxData),
    RequestRemoveInsuranceFundStake(
        RequestRemoveInsuranceFundStakeIxAccounts,
        RequestRemoveInsuranceFundStakeIxData,
    ),
    CancelRequestRemoveInsuranceFundStake(
        CancelRequestRemoveInsuranceFundStakeIxAccounts,
        CancelRequestRemoveInsuranceFundStakeIxData,
    ),
    RemoveInsuranceFundStake(
        RemoveInsuranceFundStakeIxAccounts,
        RemoveInsuranceFundStakeIxData,
    ),
    TransferProtocolIfShares(
        TransferProtocolIfSharesIxAccounts,
        TransferProtocolIfSharesIxData,
    ),
    UpdatePythPullOracle(UpdatePythPullOracleIxAccounts, UpdatePythPullOracleIxData),
    PostPythPullOracleUpdateAtomic(
        PostPythPullOracleUpdateAtomicIxAccounts,
        PostPythPullOracleUpdateAtomicIxData,
    ),
    PostMultiPythPullOracleUpdatesAtomic(
        PostMultiPythPullOracleUpdatesAtomicIxAccounts,
        PostMultiPythPullOracleUpdatesAtomicIxData,
    ),
    PauseSpotMarketDepositWithdraw(PauseSpotMarketDepositWithdrawIxAccounts),
    Initialize(InitializeIxAccounts),
    InitializeSpotMarket(InitializeSpotMarketIxAccounts, InitializeSpotMarketIxData),
    DeleteInitializedSpotMarket(
        DeleteInitializedSpotMarketIxAccounts,
        DeleteInitializedSpotMarketIxData,
    ),
    InitializeSerumFulfillmentConfig(
        InitializeSerumFulfillmentConfigIxAccounts,
        InitializeSerumFulfillmentConfigIxData,
    ),
    UpdateSerumFulfillmentConfigStatus(
        UpdateSerumFulfillmentConfigStatusIxAccounts,
        UpdateSerumFulfillmentConfigStatusIxData,
    ),
    InitializeOpenbookV2FulfillmentConfig(
        InitializeOpenbookV2FulfillmentConfigIxAccounts,
        InitializeOpenbookV2FulfillmentConfigIxData,
    ),
    OpenbookV2FulfillmentConfigStatus(
        OpenbookV2FulfillmentConfigStatusIxAccounts,
        OpenbookV2FulfillmentConfigStatusIxData,
    ),
    InitializePhoenixFulfillmentConfig(
        InitializePhoenixFulfillmentConfigIxAccounts,
        InitializePhoenixFulfillmentConfigIxData,
    ),
    PhoenixFulfillmentConfigStatus(
        PhoenixFulfillmentConfigStatusIxAccounts,
        PhoenixFulfillmentConfigStatusIxData,
    ),
    UpdateSerumVault(UpdateSerumVaultIxAccounts),
    InitializePerpMarket(InitializePerpMarketIxAccounts, InitializePerpMarketIxData),
    InitializePredictionMarket(InitializePredictionMarketIxAccounts),
    DeleteInitializedPerpMarket(
        DeleteInitializedPerpMarketIxAccounts,
        DeleteInitializedPerpMarketIxData,
    ),
    MoveAmmPrice(MoveAmmPriceIxAccounts, MoveAmmPriceIxData),
    RecenterPerpMarketAmm(RecenterPerpMarketAmmIxAccounts, RecenterPerpMarketAmmIxData),
    UpdatePerpMarketAmmSummaryStats(
        UpdatePerpMarketAmmSummaryStatsIxAccounts,
        UpdatePerpMarketAmmSummaryStatsIxData,
    ),
    UpdatePerpMarketExpiry(
        UpdatePerpMarketExpiryIxAccounts,
        UpdatePerpMarketExpiryIxData,
    ),
    SettleExpiredMarketPoolsToRevenuePool(SettleExpiredMarketPoolsToRevenuePoolIxAccounts),
    DepositIntoPerpMarketFeePool(
        DepositIntoPerpMarketFeePoolIxAccounts,
        DepositIntoPerpMarketFeePoolIxData,
    ),
    DepositIntoSpotMarketVault(
        DepositIntoSpotMarketVaultIxAccounts,
        DepositIntoSpotMarketVaultIxData,
    ),
    DepositIntoSpotMarketRevenuePool(
        DepositIntoSpotMarketRevenuePoolIxAccounts,
        DepositIntoSpotMarketRevenuePoolIxData,
    ),
    RepegAmmCurve(RepegAmmCurveIxAccounts, RepegAmmCurveIxData),
    UpdatePerpMarketAmmOracleTwap(UpdatePerpMarketAmmOracleTwapIxAccounts),
    ResetPerpMarketAmmOracleTwap(ResetPerpMarketAmmOracleTwapIxAccounts),
    UpdateK(UpdateKIxAccounts, UpdateKIxData),
    UpdatePerpMarketMarginRatio(
        UpdatePerpMarketMarginRatioIxAccounts,
        UpdatePerpMarketMarginRatioIxData,
    ),
    UpdatePerpMarketHighLeverageMarginRatio(
        UpdatePerpMarketHighLeverageMarginRatioIxAccounts,
        UpdatePerpMarketHighLeverageMarginRatioIxData,
    ),
    UpdatePerpMarketFundingPeriod(
        UpdatePerpMarketFundingPeriodIxAccounts,
        UpdatePerpMarketFundingPeriodIxData,
    ),
    UpdatePerpMarketMaxImbalances(
        UpdatePerpMarketMaxImbalancesIxAccounts,
        UpdatePerpMarketMaxImbalancesIxData,
    ),
    UpdatePerpMarketLiquidationFee(
        UpdatePerpMarketLiquidationFeeIxAccounts,
        UpdatePerpMarketLiquidationFeeIxData,
    ),
    UpdateInsuranceFundUnstakingPeriod(
        UpdateInsuranceFundUnstakingPeriodIxAccounts,
        UpdateInsuranceFundUnstakingPeriodIxData,
    ),
    UpdateSpotMarketPoolId(
        UpdateSpotMarketPoolIdIxAccounts,
        UpdateSpotMarketPoolIdIxData,
    ),
    UpdateSpotMarketLiquidationFee(
        UpdateSpotMarketLiquidationFeeIxAccounts,
        UpdateSpotMarketLiquidationFeeIxData,
    ),
    UpdateWithdrawGuardThreshold(
        UpdateWithdrawGuardThresholdIxAccounts,
        UpdateWithdrawGuardThresholdIxData,
    ),
    UpdateSpotMarketIfFactor(
        UpdateSpotMarketIfFactorIxAccounts,
        UpdateSpotMarketIfFactorIxData,
    ),
    UpdateSpotMarketRevenueSettlePeriod(
        UpdateSpotMarketRevenueSettlePeriodIxAccounts,
        UpdateSpotMarketRevenueSettlePeriodIxData,
    ),
    UpdateSpotMarketStatus(
        UpdateSpotMarketStatusIxAccounts,
        UpdateSpotMarketStatusIxData,
    ),
    UpdateSpotMarketPausedOperations(
        UpdateSpotMarketPausedOperationsIxAccounts,
        UpdateSpotMarketPausedOperationsIxData,
    ),
    UpdateSpotMarketAssetTier(
        UpdateSpotMarketAssetTierIxAccounts,
        UpdateSpotMarketAssetTierIxData,
    ),
    UpdateSpotMarketMarginWeights(
        UpdateSpotMarketMarginWeightsIxAccounts,
        UpdateSpotMarketMarginWeightsIxData,
    ),
    UpdateSpotMarketBorrowRate(
        UpdateSpotMarketBorrowRateIxAccounts,
        UpdateSpotMarketBorrowRateIxData,
    ),
    UpdateSpotMarketMaxTokenDeposits(
        UpdateSpotMarketMaxTokenDepositsIxAccounts,
        UpdateSpotMarketMaxTokenDepositsIxData,
    ),
    UpdateSpotMarketMaxTokenBorrows(
        UpdateSpotMarketMaxTokenBorrowsIxAccounts,
        UpdateSpotMarketMaxTokenBorrowsIxData,
    ),
    UpdateSpotMarketScaleInitialAssetWeightStart(
        UpdateSpotMarketScaleInitialAssetWeightStartIxAccounts,
        UpdateSpotMarketScaleInitialAssetWeightStartIxData,
    ),
    UpdateSpotMarketOracle(
        UpdateSpotMarketOracleIxAccounts,
        UpdateSpotMarketOracleIxData,
    ),
    UpdateSpotMarketStepSizeAndTickSize(
        UpdateSpotMarketStepSizeAndTickSizeIxAccounts,
        UpdateSpotMarketStepSizeAndTickSizeIxData,
    ),
    UpdateSpotMarketMinOrderSize(
        UpdateSpotMarketMinOrderSizeIxAccounts,
        UpdateSpotMarketMinOrderSizeIxData,
    ),
    UpdateSpotMarketOrdersEnabled(
        UpdateSpotMarketOrdersEnabledIxAccounts,
        UpdateSpotMarketOrdersEnabledIxData,
    ),
    UpdateSpotMarketIfPausedOperations(
        UpdateSpotMarketIfPausedOperationsIxAccounts,
        UpdateSpotMarketIfPausedOperationsIxData,
    ),
    UpdateSpotMarketName(UpdateSpotMarketNameIxAccounts, UpdateSpotMarketNameIxData),
    UpdatePerpMarketStatus(
        UpdatePerpMarketStatusIxAccounts,
        UpdatePerpMarketStatusIxData,
    ),
    UpdatePerpMarketPausedOperations(
        UpdatePerpMarketPausedOperationsIxAccounts,
        UpdatePerpMarketPausedOperationsIxData,
    ),
    UpdatePerpMarketContractTier(
        UpdatePerpMarketContractTierIxAccounts,
        UpdatePerpMarketContractTierIxData,
    ),
    UpdatePerpMarketImfFactor(
        UpdatePerpMarketImfFactorIxAccounts,
        UpdatePerpMarketImfFactorIxData,
    ),
    UpdatePerpMarketUnrealizedAssetWeight(
        UpdatePerpMarketUnrealizedAssetWeightIxAccounts,
        UpdatePerpMarketUnrealizedAssetWeightIxData,
    ),
    UpdatePerpMarketConcentrationCoef(
        UpdatePerpMarketConcentrationCoefIxAccounts,
        UpdatePerpMarketConcentrationCoefIxData,
    ),
    UpdatePerpMarketCurveUpdateIntensity(
        UpdatePerpMarketCurveUpdateIntensityIxAccounts,
        UpdatePerpMarketCurveUpdateIntensityIxData,
    ),
    UpdatePerpMarketTargetBaseAssetAmountPerLp(
        UpdatePerpMarketTargetBaseAssetAmountPerLpIxAccounts,
        UpdatePerpMarketTargetBaseAssetAmountPerLpIxData,
    ),
    UpdatePerpMarketPerLpBase(
        UpdatePerpMarketPerLpBaseIxAccounts,
        UpdatePerpMarketPerLpBaseIxData,
    ),
    UpdateLpCooldownTime(UpdateLpCooldownTimeIxAccounts, UpdateLpCooldownTimeIxData),
    UpdatePerpFeeStructure(
        UpdatePerpFeeStructureIxAccounts,
        UpdatePerpFeeStructureIxData,
    ),
    UpdateSpotFeeStructure(
        UpdateSpotFeeStructureIxAccounts,
        UpdateSpotFeeStructureIxData,
    ),
    UpdateInitialPctToLiquidate(
        UpdateInitialPctToLiquidateIxAccounts,
        UpdateInitialPctToLiquidateIxData,
    ),
    UpdateLiquidationDuration(
        UpdateLiquidationDurationIxAccounts,
        UpdateLiquidationDurationIxData,
    ),
    UpdateLiquidationMarginBufferRatio(
        UpdateLiquidationMarginBufferRatioIxAccounts,
        UpdateLiquidationMarginBufferRatioIxData,
    ),
    UpdateOracleGuardRails(
        UpdateOracleGuardRailsIxAccounts,
        UpdateOracleGuardRailsIxData,
    ),
    UpdateStateSettlementDuration(
        UpdateStateSettlementDurationIxAccounts,
        UpdateStateSettlementDurationIxData,
    ),
    UpdateStateMaxNumberOfSubAccounts(
        UpdateStateMaxNumberOfSubAccountsIxAccounts,
        UpdateStateMaxNumberOfSubAccountsIxData,
    ),
    UpdateStateMaxInitializeUserFee(
        UpdateStateMaxInitializeUserFeeIxAccounts,
        UpdateStateMaxInitializeUserFeeIxData,
    ),
    UpdatePerpMarketOracle(
        UpdatePerpMarketOracleIxAccounts,
        UpdatePerpMarketOracleIxData,
    ),
    UpdatePerpMarketBaseSpread(
        UpdatePerpMarketBaseSpreadIxAccounts,
        UpdatePerpMarketBaseSpreadIxData,
    ),
    UpdateAmmJitIntensity(UpdateAmmJitIntensityIxAccounts, UpdateAmmJitIntensityIxData),
    UpdatePerpMarketMaxSpread(
        UpdatePerpMarketMaxSpreadIxAccounts,
        UpdatePerpMarketMaxSpreadIxData,
    ),
    UpdatePerpMarketStepSizeAndTickSize(
        UpdatePerpMarketStepSizeAndTickSizeIxAccounts,
        UpdatePerpMarketStepSizeAndTickSizeIxData,
    ),
    UpdatePerpMarketName(UpdatePerpMarketNameIxAccounts, UpdatePerpMarketNameIxData),
    UpdatePerpMarketMinOrderSize(
        UpdatePerpMarketMinOrderSizeIxAccounts,
        UpdatePerpMarketMinOrderSizeIxData,
    ),
    UpdatePerpMarketMaxSlippageRatio(
        UpdatePerpMarketMaxSlippageRatioIxAccounts,
        UpdatePerpMarketMaxSlippageRatioIxData,
    ),
    UpdatePerpMarketMaxFillReserveFraction(
        UpdatePerpMarketMaxFillReserveFractionIxAccounts,
        UpdatePerpMarketMaxFillReserveFractionIxData,
    ),
    UpdatePerpMarketMaxOpenInterest(
        UpdatePerpMarketMaxOpenInterestIxAccounts,
        UpdatePerpMarketMaxOpenInterestIxData,
    ),
    UpdatePerpMarketNumberOfUsers(
        UpdatePerpMarketNumberOfUsersIxAccounts,
        UpdatePerpMarketNumberOfUsersIxData,
    ),
    UpdatePerpMarketFeeAdjustment(
        UpdatePerpMarketFeeAdjustmentIxAccounts,
        UpdatePerpMarketFeeAdjustmentIxData,
    ),
    UpdateSpotMarketFeeAdjustment(
        UpdateSpotMarketFeeAdjustmentIxAccounts,
        UpdateSpotMarketFeeAdjustmentIxData,
    ),
    UpdatePerpMarketFuel(UpdatePerpMarketFuelIxAccounts, UpdatePerpMarketFuelIxData),
    UpdateSpotMarketFuel(UpdateSpotMarketFuelIxAccounts, UpdateSpotMarketFuelIxData),
    InitUserFuel(InitUserFuelIxAccounts, InitUserFuelIxData),
    UpdateAdmin(UpdateAdminIxAccounts, UpdateAdminIxData),
    UpdateWhitelistMint(UpdateWhitelistMintIxAccounts, UpdateWhitelistMintIxData),
    UpdateDiscountMint(UpdateDiscountMintIxAccounts, UpdateDiscountMintIxData),
    UpdateExchangeStatus(UpdateExchangeStatusIxAccounts, UpdateExchangeStatusIxData),
    UpdatePerpAuctionDuration(
        UpdatePerpAuctionDurationIxAccounts,
        UpdatePerpAuctionDurationIxData,
    ),
    UpdateSpotAuctionDuration(
        UpdateSpotAuctionDurationIxAccounts,
        UpdateSpotAuctionDurationIxData,
    ),
    InitializeProtocolIfSharesTransferConfig(InitializeProtocolIfSharesTransferConfigIxAccounts),
    UpdateProtocolIfSharesTransferConfig(
        UpdateProtocolIfSharesTransferConfigIxAccounts,
        UpdateProtocolIfSharesTransferConfigIxData,
    ),
    InitializePrelaunchOracle(
        InitializePrelaunchOracleIxAccounts,
        InitializePrelaunchOracleIxData,
    ),
    UpdatePrelaunchOracleParams(
        UpdatePrelaunchOracleParamsIxAccounts,
        UpdatePrelaunchOracleParamsIxData,
    ),
    DeletePrelaunchOracle(DeletePrelaunchOracleIxAccounts, DeletePrelaunchOracleIxData),
    InitializePythPullOracle(
        InitializePythPullOracleIxAccounts,
        InitializePythPullOracleIxData,
    ),
    InitializePythLazerOracle(
        InitializePythLazerOracleIxAccounts,
        InitializePythLazerOracleIxData,
    ),
    PostPythLazerOracleUpdate(
        PostPythLazerOracleUpdateIxAccounts,
        PostPythLazerOracleUpdateIxData,
    ),
    InitializeHighLeverageModeConfig(
        InitializeHighLeverageModeConfigIxAccounts,
        InitializeHighLeverageModeConfigIxData,
    ),
    UpdateHighLeverageModeConfig(
        UpdateHighLeverageModeConfigIxAccounts,
        UpdateHighLeverageModeConfigIxData,
    ),
    InitializeProtectedMakerModeConfig(
        InitializeProtectedMakerModeConfigIxAccounts,
        InitializeProtectedMakerModeConfigIxData,
    ),
    UpdateProtectedMakerModeConfig(
        UpdateProtectedMakerModeConfigIxAccounts,
        UpdateProtectedMakerModeConfigIxData,
    ),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = DriftProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "Drift::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<DriftProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        match ix_discriminator {
            [111, 17, 185, 250, 60, 122, 38, 254] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = InitializeUserIxAccounts {
                    user: ix.accounts[0].0.into(),
                    user_stats: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    payer: ix.accounts[4].0.into(),
                    rent: ix.accounts[5].0.into(),
                    system_program: ix.accounts[6].0.into(),
                };
                let de_ix_data: InitializeUserIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializeUser(ix_accounts, de_ix_data))
            },
            [254, 243, 72, 98, 251, 130, 168, 213] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = InitializeUserStatsIxAccounts {
                    user_stats: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                    payer: ix.accounts[3].0.into(),
                    rent: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                };
                Ok(DriftProgramIx::InitializeUserStats(ix_accounts))
            },
            [164, 99, 156, 126, 156, 57, 99, 180] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = InitializeSignedMsgUserOrdersIxAccounts {
                    signed_msg_user_orders: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    payer: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                };
                let de_ix_data: InitializeSignedMsgUserOrdersIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializeSignedMsgUserOrders(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [137, 10, 87, 150, 18, 115, 79, 168] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = ResizeSignedMsgUserOrdersIxAccounts {
                    signed_msg_user_orders: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    user: ix.accounts[2].0.into(),
                    payer: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                };
                let de_ix_data: ResizeSignedMsgUserOrdersIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::ResizeSignedMsgUserOrders(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [40, 132, 96, 219, 184, 193, 80, 8] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = InitializeSignedMsgWsDelegatesIxAccounts {
                    signed_msg_ws_delegates: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    rent: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                };
                let de_ix_data: InitializeSignedMsgWsDelegatesIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializeSignedMsgWsDelegates(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [252, 202, 252, 219, 179, 27, 84, 138] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = ChangeSignedMsgWsDelegateStatusIxAccounts {
                    signed_msg_ws_delegates: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                };
                let de_ix_data: ChangeSignedMsgWsDelegateStatusIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::ChangeSignedMsgWsDelegateStatus(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [88, 223, 132, 161, 208, 88, 142, 42] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = InitializeFuelOverflowIxAccounts {
                    fuel_overflow: ix.accounts[0].0.into(),
                    user_stats: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                    payer: ix.accounts[3].0.into(),
                    rent: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                };
                Ok(DriftProgramIx::InitializeFuelOverflow(ix_accounts))
            },
            [175, 107, 19, 56, 165, 241, 43, 69] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = SweepFuelIxAccounts {
                    fuel_overflow: ix.accounts[0].0.into(),
                    user_stats: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                    signer: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::SweepFuel(ix_accounts))
            },
            [199, 122, 192, 255, 32, 99, 63, 200] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = ResetFuelSeasonIxAccounts {
                    user_stats: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    admin: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::ResetFuelSeason(ix_accounts))
            },
            [235, 126, 231, 10, 42, 164, 26, 61] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = InitializeReferrerNameIxAccounts {
                    referrer_name: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    payer: ix.accounts[4].0.into(),
                    rent: ix.accounts[5].0.into(),
                    system_program: ix.accounts[6].0.into(),
                };
                let de_ix_data: InitializeReferrerNameIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializeReferrerName(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [242, 35, 198, 137, 82, 225, 242, 182] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = DepositIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    spot_market_vault: ix.accounts[4].0.into(),
                    user_token_account: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                };
                let de_ix_data: DepositIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::Deposit(ix_accounts, de_ix_data))
            },
            [183, 18, 70, 156, 148, 109, 161, 34] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = WithdrawIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    spot_market_vault: ix.accounts[4].0.into(),
                    drift_signer: ix.accounts[5].0.into(),
                    user_token_account: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                };
                let de_ix_data: WithdrawIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::Withdraw(ix_accounts, de_ix_data))
            },
            [20, 20, 147, 223, 41, 63, 204, 111] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = TransferDepositIxAccounts {
                    from_user: ix.accounts[0].0.into(),
                    to_user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    state: ix.accounts[4].0.into(),
                    spot_market_vault: ix.accounts[5].0.into(),
                };
                let de_ix_data: TransferDepositIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::TransferDeposit(ix_accounts, de_ix_data))
            },
            [197, 103, 154, 25, 107, 90, 60, 94] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = TransferPoolsIxAccounts {
                    from_user: ix.accounts[0].0.into(),
                    to_user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    state: ix.accounts[4].0.into(),
                    deposit_from_spot_market_vault: ix.accounts[5].0.into(),
                    deposit_to_spot_market_vault: ix.accounts[6].0.into(),
                    borrow_from_spot_market_vault: ix.accounts[7].0.into(),
                    borrow_to_spot_market_vault: ix.accounts[8].0.into(),
                    drift_signer: ix.accounts[9].0.into(),
                };
                let de_ix_data: TransferPoolsIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::TransferPools(ix_accounts, de_ix_data))
            },
            [23, 172, 188, 168, 134, 210, 3, 108] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = TransferPerpPositionIxAccounts {
                    from_user: ix.accounts[0].0.into(),
                    to_user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    state: ix.accounts[4].0.into(),
                };
                let de_ix_data: TransferPerpPositionIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::TransferPerpPosition(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [69, 161, 93, 202, 120, 126, 76, 185] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = PlacePerpOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: PlacePerpOrderIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PlacePerpOrder(ix_accounts, de_ix_data))
            },
            [95, 129, 237, 240, 8, 49, 223, 132] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = CancelOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: CancelOrderIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::CancelOrder(ix_accounts, de_ix_data))
            },
            [107, 211, 250, 133, 18, 37, 57, 100] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = CancelOrderByUserIdIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: CancelOrderByUserIdIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::CancelOrderByUserId(ix_accounts, de_ix_data))
            },
            [238, 225, 95, 158, 227, 103, 8, 194] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = CancelOrdersIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: CancelOrdersIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::CancelOrders(ix_accounts, de_ix_data))
            },
            [134, 19, 144, 165, 94, 240, 210, 94] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = CancelOrdersByIdsIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: CancelOrdersByIdsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::CancelOrdersByIds(ix_accounts, de_ix_data))
            },
            [47, 124, 117, 255, 201, 197, 130, 94] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = ModifyOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: ModifyOrderIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::ModifyOrder(ix_accounts, de_ix_data))
            },
            [158, 77, 4, 253, 252, 194, 161, 179] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = ModifyOrderByUserIdIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: ModifyOrderByUserIdIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::ModifyOrderByUserId(ix_accounts, de_ix_data))
            },
            [213, 51, 1, 187, 108, 220, 230, 224] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = PlaceAndTakePerpOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                };
                let de_ix_data: PlaceAndTakePerpOrderIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PlaceAndTakePerpOrder(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [149, 117, 11, 237, 47, 95, 89, 237] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = PlaceAndMakePerpOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    taker: ix.accounts[3].0.into(),
                    taker_stats: ix.accounts[4].0.into(),
                    authority: ix.accounts[5].0.into(),
                };
                let de_ix_data: PlaceAndMakePerpOrderIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PlaceAndMakePerpOrder(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [16, 26, 123, 131, 94, 29, 175, 98] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = PlaceAndMakeSignedMsgPerpOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    taker: ix.accounts[3].0.into(),
                    taker_stats: ix.accounts[4].0.into(),
                    taker_signed_msg_user_orders: ix.accounts[5].0.into(),
                    authority: ix.accounts[6].0.into(),
                };
                let de_ix_data: PlaceAndMakeSignedMsgPerpOrderIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PlaceAndMakeSignedMsgPerpOrder(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [32, 79, 101, 139, 25, 6, 98, 15] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = PlaceSignedMsgTakerOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    signed_msg_user_orders: ix.accounts[3].0.into(),
                    authority: ix.accounts[4].0.into(),
                    ix_sysvar: ix.accounts[5].0.into(),
                };
                let de_ix_data: PlaceSignedMsgTakerOrderIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PlaceSignedMsgTakerOrder(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [45, 79, 81, 160, 248, 90, 91, 220] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = PlaceSpotOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: PlaceSpotOrderIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PlaceSpotOrder(ix_accounts, de_ix_data))
            },
            [191, 3, 138, 71, 114, 198, 202, 100] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = PlaceAndTakeSpotOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                };
                let de_ix_data: PlaceAndTakeSpotOrderIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PlaceAndTakeSpotOrder(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [149, 158, 85, 66, 239, 9, 243, 98] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = PlaceAndMakeSpotOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    taker: ix.accounts[3].0.into(),
                    taker_stats: ix.accounts[4].0.into(),
                    authority: ix.accounts[5].0.into(),
                };
                let de_ix_data: PlaceAndMakeSpotOrderIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PlaceAndMakeSpotOrder(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [60, 63, 50, 123, 12, 197, 60, 190] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = PlaceOrdersIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: PlaceOrdersIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PlaceOrders(ix_accounts, de_ix_data))
            },
            [174, 109, 228, 1, 242, 105, 232, 105] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = BeginSwapIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    out_spot_market_vault: ix.accounts[4].0.into(),
                    in_spot_market_vault: ix.accounts[5].0.into(),
                    out_token_account: ix.accounts[6].0.into(),
                    in_token_account: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    drift_signer: ix.accounts[9].0.into(),
                    instructions: ix.accounts[10].0.into(),
                };
                let de_ix_data: BeginSwapIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::BeginSwap(ix_accounts, de_ix_data))
            },
            [177, 184, 27, 193, 34, 13, 210, 145] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = EndSwapIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    out_spot_market_vault: ix.accounts[4].0.into(),
                    in_spot_market_vault: ix.accounts[5].0.into(),
                    out_token_account: ix.accounts[6].0.into(),
                    in_token_account: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    drift_signer: ix.accounts[9].0.into(),
                    instructions: ix.accounts[10].0.into(),
                };
                let de_ix_data: EndSwapIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::EndSwap(ix_accounts, de_ix_data))
            },
            [56, 209, 56, 197, 119, 254, 188, 117] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = AddPerpLpSharesIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: AddPerpLpSharesIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::AddPerpLpShares(ix_accounts, de_ix_data))
            },
            [213, 89, 217, 18, 160, 55, 53, 141] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = RemovePerpLpSharesIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                let de_ix_data: RemovePerpLpSharesIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::RemovePerpLpShares(ix_accounts, de_ix_data))
            },
            [83, 254, 253, 137, 59, 122, 68, 156] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = RemovePerpLpSharesInExpiringMarketIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                };
                let de_ix_data: RemovePerpLpSharesInExpiringMarketIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::RemovePerpLpSharesInExpiringMarket(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [135, 25, 185, 56, 165, 53, 34, 136] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateUserNameIxAccounts {
                    user: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateUserNameIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateUserName(ix_accounts, de_ix_data))
            },
            [21, 221, 140, 187, 32, 129, 11, 123] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateUserCustomMarginRatioIxAccounts {
                    user: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateUserCustomMarginRatioIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateUserCustomMarginRatio(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [194, 92, 204, 223, 246, 188, 31, 203] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateUserMarginTradingEnabledIxAccounts {
                    user: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateUserMarginTradingEnabledIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateUserMarginTradingEnabled(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [219, 86, 73, 106, 56, 218, 128, 109] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateUserPoolIdIxAccounts {
                    user: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateUserPoolIdIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateUserPoolId(ix_accounts, de_ix_data))
            },
            [139, 205, 141, 141, 113, 36, 94, 187] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateUserDelegateIxAccounts {
                    user: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateUserDelegateIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateUserDelegate(ix_accounts, de_ix_data))
            },
            [199, 71, 42, 67, 144, 19, 86, 109] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateUserReduceOnlyIxAccounts {
                    user: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateUserReduceOnlyIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateUserReduceOnly(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [66, 80, 107, 186, 27, 242, 66, 95] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateUserAdvancedLpIxAccounts {
                    user: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateUserAdvancedLpIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateUserAdvancedLp(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [114, 39, 123, 198, 187, 25, 90, 219] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateUserProtectedMakerOrdersIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                    protected_maker_mode_config: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdateUserProtectedMakerOrdersIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateUserProtectedMakerOrders(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [186, 85, 17, 249, 219, 231, 98, 251] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = DeleteUserIxAccounts {
                    user: ix.accounts[0].0.into(),
                    user_stats: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::DeleteUser(ix_accounts))
            },
            [2, 241, 195, 172, 227, 24, 254, 158] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = ForceDeleteUserIxAccounts {
                    user: ix.accounts[0].0.into(),
                    user_stats: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    keeper: ix.accounts[4].0.into(),
                    drift_signer: ix.accounts[5].0.into(),
                };
                Ok(DriftProgramIx::ForceDeleteUser(ix_accounts))
            },
            [221, 247, 128, 253, 212, 254, 46, 153] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = DeleteSignedMsgUserOrdersIxAccounts {
                    signed_msg_user_orders: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                Ok(DriftProgramIx::DeleteSignedMsgUserOrders(ix_accounts))
            },
            [218, 200, 19, 197, 227, 89, 192, 22] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = ReclaimRentIxAccounts {
                    user: ix.accounts[0].0.into(),
                    user_stats: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    rent: ix.accounts[4].0.into(),
                };
                Ok(DriftProgramIx::ReclaimRent(ix_accounts))
            },
            [231, 24, 230, 112, 201, 173, 73, 184] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = EnableUserHighLeverageModeIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                    high_leverage_mode_config: ix.accounts[3].0.into(),
                };
                let de_ix_data: EnableUserHighLeverageModeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::EnableUserHighLeverageMode(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [13, 188, 248, 103, 134, 217, 106, 240] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = FillPerpOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    filler: ix.accounts[2].0.into(),
                    filler_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                };
                let de_ix_data: FillPerpOrderIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::FillPerpOrder(ix_accounts, de_ix_data))
            },
            [236, 238, 176, 69, 239, 10, 181, 193] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = RevertFillIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    filler: ix.accounts[2].0.into(),
                    filler_stats: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::RevertFill(ix_accounts))
            },
            [212, 206, 130, 173, 21, 34, 199, 40] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = FillSpotOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    filler: ix.accounts[2].0.into(),
                    filler_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                };
                let de_ix_data: FillSpotOrderIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::FillSpotOrder(ix_accounts, de_ix_data))
            },
            [63, 112, 51, 233, 232, 47, 240, 199] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = TriggerOrderIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    filler: ix.accounts[2].0.into(),
                    user: ix.accounts[3].0.into(),
                };
                let de_ix_data: TriggerOrderIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::TriggerOrder(ix_accounts, de_ix_data))
            },
            [64, 181, 196, 63, 222, 72, 64, 232] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = ForceCancelOrdersIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    filler: ix.accounts[2].0.into(),
                    user: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::ForceCancelOrders(ix_accounts))
            },
            [253, 133, 67, 22, 103, 161, 20, 100] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateUserIdleIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    filler: ix.accounts[2].0.into(),
                    user: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::UpdateUserIdle(ix_accounts))
            },
            [162, 21, 35, 251, 32, 57, 161, 210] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = LogUserBalancesIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    user: ix.accounts[2].0.into(),
                };
                Ok(DriftProgramIx::LogUserBalances(ix_accounts))
            },
            [183, 155, 45, 0, 226, 85, 213, 69] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = DisableUserHighLeverageModeIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    user: ix.accounts[2].0.into(),
                    high_leverage_mode_config: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::DisableUserHighLeverageMode(ix_accounts))
            },
            [88, 175, 201, 190, 222, 100, 143, 57] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateUserFuelBonusIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    user: ix.accounts[2].0.into(),
                    user_stats: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::UpdateUserFuelBonus(ix_accounts))
            },
            [174, 154, 72, 42, 191, 148, 145, 205] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateUserStatsReferrerStatusIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                };
                Ok(DriftProgramIx::UpdateUserStatsReferrerStatus(ix_accounts))
            },
            [104, 39, 65, 210, 250, 163, 100, 134] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateUserOpenOrdersCountIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    filler: ix.accounts[2].0.into(),
                    user: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::UpdateUserOpenOrdersCount(ix_accounts))
            },
            [17, 164, 82, 45, 183, 86, 191, 199] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = AdminDisableUpdatePerpBidAskTwapIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                };
                let de_ix_data: AdminDisableUpdatePerpBidAskTwapIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::AdminDisableUpdatePerpBidAskTwap(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [43, 61, 234, 45, 15, 95, 152, 153] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = SettlePnlIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                    spot_market_vault: ix.accounts[3].0.into(),
                };
                let de_ix_data: SettlePnlIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::SettlePnl(ix_accounts, de_ix_data))
            },
            [127, 66, 117, 57, 40, 50, 152, 127] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = SettleMultiplePnlsIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                    spot_market_vault: ix.accounts[3].0.into(),
                };
                let de_ix_data: SettleMultiplePnlsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::SettleMultiplePnls(ix_accounts, de_ix_data))
            },
            [222, 90, 202, 94, 28, 45, 115, 183] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SettleFundingPaymentIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                };
                Ok(DriftProgramIx::SettleFundingPayment(ix_accounts))
            },
            [155, 231, 116, 113, 97, 229, 139, 141] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SettleLpIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                };
                let de_ix_data: SettleLpIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::SettleLp(ix_accounts, de_ix_data))
            },
            [120, 89, 11, 25, 122, 77, 72, 193] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = SettleExpiredMarketIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: SettleExpiredMarketIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::SettleExpiredMarket(ix_accounts, de_ix_data))
            },
            [75, 35, 119, 247, 191, 18, 139, 2] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = LiquidatePerpIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    liquidator: ix.accounts[2].0.into(),
                    liquidator_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                };
                let de_ix_data: LiquidatePerpIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::LiquidatePerp(ix_accounts, de_ix_data))
            },
            [95, 111, 124, 105, 86, 169, 187, 34] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = LiquidatePerpWithFillIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    liquidator: ix.accounts[2].0.into(),
                    liquidator_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                };
                let de_ix_data: LiquidatePerpWithFillIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::LiquidatePerpWithFill(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [107, 0, 128, 41, 35, 229, 251, 18] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = LiquidateSpotIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    liquidator: ix.accounts[2].0.into(),
                    liquidator_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                };
                let de_ix_data: LiquidateSpotIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::LiquidateSpot(ix_accounts, de_ix_data))
            },
            [12, 43, 176, 83, 156, 251, 117, 13] => {
                check_min_accounts_req(accounts_len, 13)?;
                let ix_accounts = LiquidateSpotWithSwapBeginIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    liquidator: ix.accounts[2].0.into(),
                    liquidator_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                    liability_spot_market_vault: ix.accounts[6].0.into(),
                    asset_spot_market_vault: ix.accounts[7].0.into(),
                    liability_token_account: ix.accounts[8].0.into(),
                    asset_token_account: ix.accounts[9].0.into(),
                    token_program: ix.accounts[10].0.into(),
                    drift_signer: ix.accounts[11].0.into(),
                    instructions: ix.accounts[12].0.into(),
                };
                let de_ix_data: LiquidateSpotWithSwapBeginIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::LiquidateSpotWithSwapBegin(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [142, 88, 163, 160, 223, 75, 55, 225] => {
                check_min_accounts_req(accounts_len, 13)?;
                let ix_accounts = LiquidateSpotWithSwapEndIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    liquidator: ix.accounts[2].0.into(),
                    liquidator_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                    liability_spot_market_vault: ix.accounts[6].0.into(),
                    asset_spot_market_vault: ix.accounts[7].0.into(),
                    liability_token_account: ix.accounts[8].0.into(),
                    asset_token_account: ix.accounts[9].0.into(),
                    token_program: ix.accounts[10].0.into(),
                    drift_signer: ix.accounts[11].0.into(),
                    instructions: ix.accounts[12].0.into(),
                };
                let de_ix_data: LiquidateSpotWithSwapEndIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::LiquidateSpotWithSwapEnd(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [169, 17, 32, 90, 207, 148, 209, 27] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = LiquidateBorrowForPerpPnlIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    liquidator: ix.accounts[2].0.into(),
                    liquidator_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                };
                let de_ix_data: LiquidateBorrowForPerpPnlIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::LiquidateBorrowForPerpPnl(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [237, 75, 198, 235, 233, 186, 75, 35] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = LiquidatePerpPnlForDepositIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    liquidator: ix.accounts[2].0.into(),
                    liquidator_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                };
                let de_ix_data: LiquidatePerpPnlForDepositIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::LiquidatePerpPnlForDeposit(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [106, 133, 160, 206, 193, 171, 192, 194] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = SetUserStatusToBeingLiquidatedIxAccounts {
                    state: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                };
                Ok(DriftProgramIx::SetUserStatusToBeingLiquidated(ix_accounts))
            },
            [168, 204, 68, 150, 159, 126, 95, 148] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = ResolvePerpPnlDeficitIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    spot_market_vault: ix.accounts[2].0.into(),
                    insurance_fund_vault: ix.accounts[3].0.into(),
                    drift_signer: ix.accounts[4].0.into(),
                    token_program: ix.accounts[5].0.into(),
                };
                let de_ix_data: ResolvePerpPnlDeficitIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::ResolvePerpPnlDeficit(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [224, 16, 176, 214, 162, 213, 183, 222] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = ResolvePerpBankruptcyIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    liquidator: ix.accounts[2].0.into(),
                    liquidator_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                    spot_market_vault: ix.accounts[6].0.into(),
                    insurance_fund_vault: ix.accounts[7].0.into(),
                    drift_signer: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: ResolvePerpBankruptcyIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::ResolvePerpBankruptcy(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [124, 194, 240, 254, 198, 213, 52, 122] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = ResolveSpotBankruptcyIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    liquidator: ix.accounts[2].0.into(),
                    liquidator_stats: ix.accounts[3].0.into(),
                    user: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                    spot_market_vault: ix.accounts[6].0.into(),
                    insurance_fund_vault: ix.accounts[7].0.into(),
                    drift_signer: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: ResolveSpotBankruptcyIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::ResolveSpotBankruptcy(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [200, 120, 93, 136, 69, 38, 199, 159] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = SettleRevenueToInsuranceFundIxAccounts {
                    state: ix.accounts[0].0.into(),
                    spot_market: ix.accounts[1].0.into(),
                    spot_market_vault: ix.accounts[2].0.into(),
                    drift_signer: ix.accounts[3].0.into(),
                    insurance_fund_vault: ix.accounts[4].0.into(),
                    token_program: ix.accounts[5].0.into(),
                };
                let de_ix_data: SettleRevenueToInsuranceFundIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::SettleRevenueToInsuranceFund(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [201, 178, 116, 212, 166, 144, 72, 238] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateFundingRateIxAccounts {
                    state: ix.accounts[0].0.into(),
                    perp_market: ix.accounts[1].0.into(),
                    oracle: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateFundingRateIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateFundingRate(ix_accounts, de_ix_data))
            },
            [220, 132, 27, 27, 233, 220, 61, 219] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePrelaunchOracleIxAccounts {
                    state: ix.accounts[0].0.into(),
                    perp_market: ix.accounts[1].0.into(),
                    oracle: ix.accounts[2].0.into(),
                };
                Ok(DriftProgramIx::UpdatePrelaunchOracle(ix_accounts))
            },
            [247, 23, 255, 65, 212, 90, 221, 194] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = UpdatePerpBidAskTwapIxAccounts {
                    state: ix.accounts[0].0.into(),
                    perp_market: ix.accounts[1].0.into(),
                    oracle: ix.accounts[2].0.into(),
                    keeper_stats: ix.accounts[3].0.into(),
                    authority: ix.accounts[4].0.into(),
                };
                Ok(DriftProgramIx::UpdatePerpBidAskTwap(ix_accounts))
            },
            [39, 166, 139, 243, 158, 165, 155, 225] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateSpotMarketCumulativeInterestIxAccounts {
                    state: ix.accounts[0].0.into(),
                    spot_market: ix.accounts[1].0.into(),
                    oracle: ix.accounts[2].0.into(),
                    spot_market_vault: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::UpdateSpotMarketCumulativeInterest(
                    ix_accounts,
                ))
            },
            [201, 106, 217, 253, 4, 175, 228, 97] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateAmmsIxAccounts {
                    state: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateAmmsIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateAmms(ix_accounts, de_ix_data))
            },
            [208, 11, 211, 159, 226, 24, 11, 247] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketExpiryIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketExpiryIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketExpiry(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [251, 101, 156, 7, 2, 63, 30, 23] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = UpdateUserQuoteAssetInsuranceStakeIxAccounts {
                    state: ix.accounts[0].0.into(),
                    spot_market: ix.accounts[1].0.into(),
                    insurance_fund_stake: ix.accounts[2].0.into(),
                    user_stats: ix.accounts[3].0.into(),
                    signer: ix.accounts[4].0.into(),
                    insurance_fund_vault: ix.accounts[5].0.into(),
                };
                Ok(DriftProgramIx::UpdateUserQuoteAssetInsuranceStake(
                    ix_accounts,
                ))
            },
            [143, 99, 235, 187, 20, 159, 184, 84] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = UpdateUserGovTokenInsuranceStakeIxAccounts {
                    state: ix.accounts[0].0.into(),
                    spot_market: ix.accounts[1].0.into(),
                    insurance_fund_stake: ix.accounts[2].0.into(),
                    user_stats: ix.accounts[3].0.into(),
                    signer: ix.accounts[4].0.into(),
                    insurance_fund_vault: ix.accounts[5].0.into(),
                };
                Ok(DriftProgramIx::UpdateUserGovTokenInsuranceStake(
                    ix_accounts,
                ))
            },
            [129, 185, 243, 183, 228, 111, 64, 175] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateUserGovTokenInsuranceStakeDevnetIxAccounts {
                    user_stats: ix.accounts[0].0.into(),
                    signer: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateUserGovTokenInsuranceStakeDevnetIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateUserGovTokenInsuranceStakeDevnet(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [187, 179, 243, 70, 248, 90, 92, 147] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = InitializeInsuranceFundStakeIxAccounts {
                    spot_market: ix.accounts[0].0.into(),
                    insurance_fund_stake: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    state: ix.accounts[3].0.into(),
                    authority: ix.accounts[4].0.into(),
                    payer: ix.accounts[5].0.into(),
                    rent: ix.accounts[6].0.into(),
                    system_program: ix.accounts[7].0.into(),
                };
                let de_ix_data: InitializeInsuranceFundStakeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializeInsuranceFundStake(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [251, 144, 115, 11, 222, 47, 62, 236] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = AddInsuranceFundStakeIxAccounts {
                    state: ix.accounts[0].0.into(),
                    spot_market: ix.accounts[1].0.into(),
                    insurance_fund_stake: ix.accounts[2].0.into(),
                    user_stats: ix.accounts[3].0.into(),
                    authority: ix.accounts[4].0.into(),
                    spot_market_vault: ix.accounts[5].0.into(),
                    insurance_fund_vault: ix.accounts[6].0.into(),
                    drift_signer: ix.accounts[7].0.into(),
                    user_token_account: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: AddInsuranceFundStakeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::AddInsuranceFundStake(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [142, 70, 204, 92, 73, 106, 180, 52] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = RequestRemoveInsuranceFundStakeIxAccounts {
                    spot_market: ix.accounts[0].0.into(),
                    insurance_fund_stake: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    insurance_fund_vault: ix.accounts[4].0.into(),
                };
                let de_ix_data: RequestRemoveInsuranceFundStakeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::RequestRemoveInsuranceFundStake(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [97, 235, 78, 62, 212, 42, 241, 127] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = CancelRequestRemoveInsuranceFundStakeIxAccounts {
                    spot_market: ix.accounts[0].0.into(),
                    insurance_fund_stake: ix.accounts[1].0.into(),
                    user_stats: ix.accounts[2].0.into(),
                    authority: ix.accounts[3].0.into(),
                    insurance_fund_vault: ix.accounts[4].0.into(),
                };
                let de_ix_data: CancelRequestRemoveInsuranceFundStakeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::CancelRequestRemoveInsuranceFundStake(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [128, 166, 142, 9, 254, 187, 143, 174] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = RemoveInsuranceFundStakeIxAccounts {
                    state: ix.accounts[0].0.into(),
                    spot_market: ix.accounts[1].0.into(),
                    insurance_fund_stake: ix.accounts[2].0.into(),
                    user_stats: ix.accounts[3].0.into(),
                    authority: ix.accounts[4].0.into(),
                    insurance_fund_vault: ix.accounts[5].0.into(),
                    drift_signer: ix.accounts[6].0.into(),
                    user_token_account: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                };
                let de_ix_data: RemoveInsuranceFundStakeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::RemoveInsuranceFundStake(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [94, 93, 226, 240, 195, 201, 184, 109] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = TransferProtocolIfSharesIxAccounts {
                    signer: ix.accounts[0].0.into(),
                    transfer_config: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    spot_market: ix.accounts[3].0.into(),
                    insurance_fund_stake: ix.accounts[4].0.into(),
                    user_stats: ix.accounts[5].0.into(),
                    authority: ix.accounts[6].0.into(),
                    insurance_fund_vault: ix.accounts[7].0.into(),
                };
                let de_ix_data: TransferProtocolIfSharesIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::TransferProtocolIfShares(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [230, 191, 189, 94, 108, 59, 74, 197] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdatePythPullOracleIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    pyth_solana_receiver: ix.accounts[1].0.into(),
                    encoded_vaa: ix.accounts[2].0.into(),
                    price_feed: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdatePythPullOracleIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePythPullOracle(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [116, 122, 137, 158, 224, 195, 173, 119] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = PostPythPullOracleUpdateAtomicIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    pyth_solana_receiver: ix.accounts[1].0.into(),
                    guardian_set: ix.accounts[2].0.into(),
                    price_feed: ix.accounts[3].0.into(),
                };
                let de_ix_data: PostPythPullOracleUpdateAtomicIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PostPythPullOracleUpdateAtomic(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [243, 79, 204, 228, 227, 208, 100, 244] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = PostMultiPythPullOracleUpdatesAtomicIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    pyth_solana_receiver: ix.accounts[1].0.into(),
                    guardian_set: ix.accounts[2].0.into(),
                };
                let de_ix_data: PostMultiPythPullOracleUpdatesAtomicIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PostMultiPythPullOracleUpdatesAtomic(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [183, 119, 59, 170, 137, 35, 242, 86] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = PauseSpotMarketDepositWithdrawIxAccounts {
                    state: ix.accounts[0].0.into(),
                    keeper: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                    spot_market_vault: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::PauseSpotMarketDepositWithdraw(ix_accounts))
            },
            [175, 175, 109, 31, 13, 152, 155, 237] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = InitializeIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    quote_asset_mint: ix.accounts[2].0.into(),
                    drift_signer: ix.accounts[3].0.into(),
                    rent: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                };
                Ok(DriftProgramIx::Initialize(ix_accounts))
            },
            [234, 196, 128, 44, 94, 15, 48, 201] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = InitializeSpotMarketIxAccounts {
                    spot_market: ix.accounts[0].0.into(),
                    spot_market_mint: ix.accounts[1].0.into(),
                    spot_market_vault: ix.accounts[2].0.into(),
                    insurance_fund_vault: ix.accounts[3].0.into(),
                    drift_signer: ix.accounts[4].0.into(),
                    state: ix.accounts[5].0.into(),
                    oracle: ix.accounts[6].0.into(),
                    admin: ix.accounts[7].0.into(),
                    rent: ix.accounts[8].0.into(),
                    system_program: ix.accounts[9].0.into(),
                    token_program: ix.accounts[10].0.into(),
                };
                let de_ix_data: InitializeSpotMarketIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializeSpotMarket(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [31, 140, 67, 191, 189, 20, 101, 221] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = DeleteInitializedSpotMarketIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                    spot_market_vault: ix.accounts[3].0.into(),
                    insurance_fund_vault: ix.accounts[4].0.into(),
                    drift_signer: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                };
                let de_ix_data: DeleteInitializedSpotMarketIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::DeleteInitializedSpotMarket(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [193, 211, 132, 172, 70, 171, 7, 94] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = InitializeSerumFulfillmentConfigIxAccounts {
                    base_spot_market: ix.accounts[0].0.into(),
                    quote_spot_market: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    serum_program: ix.accounts[3].0.into(),
                    serum_market: ix.accounts[4].0.into(),
                    serum_open_orders: ix.accounts[5].0.into(),
                    drift_signer: ix.accounts[6].0.into(),
                    serum_fulfillment_config: ix.accounts[7].0.into(),
                    admin: ix.accounts[8].0.into(),
                    rent: ix.accounts[9].0.into(),
                    system_program: ix.accounts[10].0.into(),
                };
                let de_ix_data: InitializeSerumFulfillmentConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializeSerumFulfillmentConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [171, 109, 240, 251, 95, 1, 149, 89] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSerumFulfillmentConfigStatusIxAccounts {
                    state: ix.accounts[0].0.into(),
                    serum_fulfillment_config: ix.accounts[1].0.into(),
                    admin: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSerumFulfillmentConfigStatusIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSerumFulfillmentConfigStatus(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [7, 221, 103, 153, 107, 57, 27, 197] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = InitializeOpenbookV2FulfillmentConfigIxAccounts {
                    base_spot_market: ix.accounts[0].0.into(),
                    quote_spot_market: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    openbook_v2_program: ix.accounts[3].0.into(),
                    openbook_v2_market: ix.accounts[4].0.into(),
                    drift_signer: ix.accounts[5].0.into(),
                    openbook_v2_fulfillment_config: ix.accounts[6].0.into(),
                    admin: ix.accounts[7].0.into(),
                    rent: ix.accounts[8].0.into(),
                    system_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: InitializeOpenbookV2FulfillmentConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializeOpenbookV2FulfillmentConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [25, 173, 19, 189, 4, 211, 64, 238] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = OpenbookV2FulfillmentConfigStatusIxAccounts {
                    state: ix.accounts[0].0.into(),
                    openbook_v2_fulfillment_config: ix.accounts[1].0.into(),
                    admin: ix.accounts[2].0.into(),
                };
                let de_ix_data: OpenbookV2FulfillmentConfigStatusIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::OpenbookV2FulfillmentConfigStatus(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [135, 132, 110, 107, 185, 160, 169, 154] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = InitializePhoenixFulfillmentConfigIxAccounts {
                    base_spot_market: ix.accounts[0].0.into(),
                    quote_spot_market: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    phoenix_program: ix.accounts[3].0.into(),
                    phoenix_market: ix.accounts[4].0.into(),
                    drift_signer: ix.accounts[5].0.into(),
                    phoenix_fulfillment_config: ix.accounts[6].0.into(),
                    admin: ix.accounts[7].0.into(),
                    rent: ix.accounts[8].0.into(),
                    system_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: InitializePhoenixFulfillmentConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializePhoenixFulfillmentConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [96, 31, 113, 32, 12, 203, 7, 154] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = PhoenixFulfillmentConfigStatusIxAccounts {
                    state: ix.accounts[0].0.into(),
                    phoenix_fulfillment_config: ix.accounts[1].0.into(),
                    admin: ix.accounts[2].0.into(),
                };
                let de_ix_data: PhoenixFulfillmentConfigStatusIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PhoenixFulfillmentConfigStatus(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [219, 8, 246, 96, 169, 121, 91, 110] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSerumVaultIxAccounts {
                    state: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    srm_vault: ix.accounts[2].0.into(),
                };
                Ok(DriftProgramIx::UpdateSerumVault(ix_accounts))
            },
            [132, 9, 229, 118, 117, 118, 117, 62] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = InitializePerpMarketIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                    oracle: ix.accounts[3].0.into(),
                    rent: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                };
                let de_ix_data: InitializePerpMarketIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializePerpMarket(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [248, 70, 198, 224, 224, 105, 125, 195] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = InitializePredictionMarketIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                Ok(DriftProgramIx::InitializePredictionMarket(ix_accounts))
            },
            [91, 154, 24, 87, 106, 59, 190, 66] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = DeleteInitializedPerpMarketIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: DeleteInitializedPerpMarketIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::DeleteInitializedPerpMarket(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [235, 109, 2, 82, 219, 118, 6, 159] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = MoveAmmPriceIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: MoveAmmPriceIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::MoveAmmPrice(ix_accounts, de_ix_data))
            },
            [24, 87, 10, 115, 165, 190, 80, 139] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = RecenterPerpMarketAmmIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: RecenterPerpMarketAmmIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::RecenterPerpMarketAmm(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [122, 101, 249, 238, 209, 9, 241, 245] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = UpdatePerpMarketAmmSummaryStatsIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                    spot_market: ix.accounts[3].0.into(),
                    oracle: ix.accounts[4].0.into(),
                };
                let de_ix_data: UpdatePerpMarketAmmSummaryStatsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketAmmSummaryStats(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [44, 221, 227, 151, 131, 140, 22, 110] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketExpiryIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketExpiryIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketExpiry(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [55, 19, 238, 169, 227, 90, 200, 184] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = SettleExpiredMarketPoolsToRevenuePoolIxAccounts {
                    state: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                    perp_market: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::SettleExpiredMarketPoolsToRevenuePool(
                    ix_accounts,
                ))
            },
            [34, 58, 57, 68, 97, 80, 244, 6] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = DepositIntoPerpMarketFeePoolIxAccounts {
                    state: ix.accounts[0].0.into(),
                    perp_market: ix.accounts[1].0.into(),
                    admin: ix.accounts[2].0.into(),
                    source_vault: ix.accounts[3].0.into(),
                    drift_signer: ix.accounts[4].0.into(),
                    quote_spot_market: ix.accounts[5].0.into(),
                    spot_market_vault: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                };
                let de_ix_data: DepositIntoPerpMarketFeePoolIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::DepositIntoPerpMarketFeePool(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [48, 252, 119, 73, 255, 205, 174, 247] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = DepositIntoSpotMarketVaultIxAccounts {
                    state: ix.accounts[0].0.into(),
                    spot_market: ix.accounts[1].0.into(),
                    admin: ix.accounts[2].0.into(),
                    source_vault: ix.accounts[3].0.into(),
                    spot_market_vault: ix.accounts[4].0.into(),
                    token_program: ix.accounts[5].0.into(),
                };
                let de_ix_data: DepositIntoSpotMarketVaultIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::DepositIntoSpotMarketVault(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [92, 40, 151, 42, 122, 254, 139, 246] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = DepositIntoSpotMarketRevenuePoolIxAccounts {
                    state: ix.accounts[0].0.into(),
                    spot_market: ix.accounts[1].0.into(),
                    authority: ix.accounts[2].0.into(),
                    spot_market_vault: ix.accounts[3].0.into(),
                    user_token_account: ix.accounts[4].0.into(),
                    token_program: ix.accounts[5].0.into(),
                };
                let de_ix_data: DepositIntoSpotMarketRevenuePoolIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::DepositIntoSpotMarketRevenuePool(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [3, 36, 102, 89, 180, 128, 120, 213] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = RepegAmmCurveIxAccounts {
                    state: ix.accounts[0].0.into(),
                    perp_market: ix.accounts[1].0.into(),
                    oracle: ix.accounts[2].0.into(),
                    admin: ix.accounts[3].0.into(),
                };
                let de_ix_data: RepegAmmCurveIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::RepegAmmCurve(ix_accounts, de_ix_data))
            },
            [241, 74, 114, 123, 206, 153, 24, 202] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdatePerpMarketAmmOracleTwapIxAccounts {
                    state: ix.accounts[0].0.into(),
                    perp_market: ix.accounts[1].0.into(),
                    oracle: ix.accounts[2].0.into(),
                    admin: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::UpdatePerpMarketAmmOracleTwap(ix_accounts))
            },
            [127, 10, 55, 164, 123, 226, 47, 24] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = ResetPerpMarketAmmOracleTwapIxAccounts {
                    state: ix.accounts[0].0.into(),
                    perp_market: ix.accounts[1].0.into(),
                    oracle: ix.accounts[2].0.into(),
                    admin: ix.accounts[3].0.into(),
                };
                Ok(DriftProgramIx::ResetPerpMarketAmmOracleTwap(ix_accounts))
            },
            [72, 98, 9, 139, 129, 229, 172, 56] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateKIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                    oracle: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdateKIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateK(ix_accounts, de_ix_data))
            },
            [130, 173, 107, 45, 119, 105, 26, 113] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketMarginRatioIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketMarginRatioIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketMarginRatio(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [88, 112, 86, 49, 24, 116, 74, 157] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketHighLeverageMarginRatioIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketHighLeverageMarginRatioIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketHighLeverageMarginRatio(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [171, 161, 69, 91, 129, 139, 161, 28] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketFundingPeriodIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketFundingPeriodIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketFundingPeriod(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [15, 206, 73, 133, 60, 8, 86, 89] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketMaxImbalancesIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketMaxImbalancesIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketMaxImbalances(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [90, 137, 9, 145, 41, 8, 148, 117] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketLiquidationFeeIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketLiquidationFeeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketLiquidationFee(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [44, 69, 43, 226, 204, 223, 202, 52] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateInsuranceFundUnstakingPeriodIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateInsuranceFundUnstakingPeriodIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateInsuranceFundUnstakingPeriod(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [22, 213, 197, 160, 139, 193, 81, 149] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketPoolIdIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketPoolIdIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketPoolId(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [11, 13, 255, 53, 56, 136, 104, 177] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketLiquidationFeeIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketLiquidationFeeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketLiquidationFee(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [56, 18, 39, 61, 155, 211, 44, 133] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateWithdrawGuardThresholdIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateWithdrawGuardThresholdIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateWithdrawGuardThreshold(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [147, 30, 224, 34, 18, 230, 105, 4] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketIfFactorIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketIfFactorIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketIfFactor(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [81, 92, 126, 41, 250, 225, 156, 219] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketRevenueSettlePeriodIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketRevenueSettlePeriodIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketRevenueSettlePeriod(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [78, 94, 16, 188, 193, 110, 231, 31] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketStatusIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketStatusIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketStatus(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [100, 61, 153, 81, 180, 12, 6, 248] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketPausedOperationsIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketPausedOperationsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketPausedOperations(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [253, 209, 231, 14, 242, 208, 243, 130] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketAssetTierIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketAssetTierIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketAssetTier(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [109, 33, 87, 195, 255, 36, 6, 81] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketMarginWeightsIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketMarginWeightsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketMarginWeights(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [71, 239, 236, 153, 210, 62, 254, 76] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketBorrowRateIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketBorrowRateIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketBorrowRate(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [56, 191, 79, 18, 26, 121, 80, 208] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketMaxTokenDepositsIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketMaxTokenDepositsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketMaxTokenDeposits(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [57, 102, 204, 212, 253, 95, 13, 199] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketMaxTokenBorrowsIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketMaxTokenBorrowsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketMaxTokenBorrows(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [217, 204, 204, 118, 204, 130, 225, 147] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketScaleInitialAssetWeightStartIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketScaleInitialAssetWeightStartIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(
                    DriftProgramIx::UpdateSpotMarketScaleInitialAssetWeightStart(
                        ix_accounts,
                        de_ix_data,
                    ),
                )
            },
            [114, 184, 102, 37, 246, 186, 180, 99] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = UpdateSpotMarketOracleIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                    oracle: ix.accounts[3].0.into(),
                    old_oracle: ix.accounts[4].0.into(),
                };
                let de_ix_data: UpdateSpotMarketOracleIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketOracle(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [238, 153, 137, 80, 206, 59, 250, 61] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketStepSizeAndTickSizeIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketStepSizeAndTickSizeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketStepSizeAndTickSize(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [93, 128, 11, 119, 26, 20, 181, 50] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketMinOrderSizeIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketMinOrderSizeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketMinOrderSize(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [190, 79, 206, 15, 26, 229, 229, 43] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketOrdersEnabledIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketOrdersEnabledIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketOrdersEnabled(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [101, 215, 79, 74, 59, 41, 79, 12] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketIfPausedOperationsIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketIfPausedOperationsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketIfPausedOperations(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [17, 208, 1, 1, 162, 211, 188, 224] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketNameIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketNameIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketName(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [71, 201, 175, 122, 255, 207, 196, 207] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketStatusIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketStatusIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketStatus(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [53, 16, 136, 132, 30, 220, 121, 85] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketPausedOperationsIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketPausedOperationsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketPausedOperations(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [236, 128, 15, 95, 203, 214, 68, 117] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketContractTierIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketContractTierIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketContractTier(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [207, 194, 56, 132, 35, 67, 71, 244] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketImfFactorIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketImfFactorIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketImfFactor(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [135, 132, 205, 165, 109, 150, 166, 106] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketUnrealizedAssetWeightIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketUnrealizedAssetWeightIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketUnrealizedAssetWeight(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [24, 78, 232, 126, 169, 176, 230, 16] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketConcentrationCoefIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketConcentrationCoefIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketConcentrationCoef(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [50, 131, 6, 156, 226, 231, 189, 72] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketCurveUpdateIntensityIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketCurveUpdateIntensityIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketCurveUpdateIntensity(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [62, 87, 68, 115, 29, 150, 150, 165] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketTargetBaseAssetAmountPerLpIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketTargetBaseAssetAmountPerLpIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketTargetBaseAssetAmountPerLp(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [103, 152, 103, 102, 89, 144, 193, 71] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketPerLpBaseIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketPerLpBaseIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketPerLpBase(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [198, 133, 88, 41, 241, 119, 61, 14] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateLpCooldownTimeIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateLpCooldownTimeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateLpCooldownTime(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [23, 178, 111, 203, 73, 22, 140, 75] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdatePerpFeeStructureIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdatePerpFeeStructureIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpFeeStructure(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [97, 216, 105, 131, 113, 246, 142, 141] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateSpotFeeStructureIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateSpotFeeStructureIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotFeeStructure(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [210, 133, 225, 128, 194, 50, 13, 109] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateInitialPctToLiquidateIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateInitialPctToLiquidateIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateInitialPctToLiquidate(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [28, 154, 20, 249, 102, 192, 73, 71] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateLiquidationDurationIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateLiquidationDurationIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateLiquidationDuration(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [132, 224, 243, 160, 154, 82, 97, 215] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateLiquidationMarginBufferRatioIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateLiquidationMarginBufferRatioIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateLiquidationMarginBufferRatio(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [131, 112, 10, 59, 32, 54, 40, 164] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateOracleGuardRailsIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateOracleGuardRailsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateOracleGuardRails(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [97, 68, 199, 235, 131, 80, 61, 173] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateStateSettlementDurationIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateStateSettlementDurationIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateStateSettlementDuration(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [155, 123, 214, 2, 221, 166, 204, 85] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateStateMaxNumberOfSubAccountsIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateStateMaxNumberOfSubAccountsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateStateMaxNumberOfSubAccounts(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [237, 225, 25, 237, 193, 45, 77, 97] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateStateMaxInitializeUserFeeIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateStateMaxInitializeUserFeeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateStateMaxInitializeUserFee(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [182, 113, 111, 160, 67, 174, 89, 191] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = UpdatePerpMarketOracleIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                    oracle: ix.accounts[3].0.into(),
                    old_oracle: ix.accounts[4].0.into(),
                };
                let de_ix_data: UpdatePerpMarketOracleIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketOracle(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [71, 95, 84, 168, 9, 157, 198, 65] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketBaseSpreadIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketBaseSpreadIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketBaseSpread(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [181, 191, 53, 109, 166, 249, 55, 142] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateAmmJitIntensityIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateAmmJitIntensityIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateAmmJitIntensity(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [80, 252, 122, 62, 40, 218, 91, 100] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketMaxSpreadIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketMaxSpreadIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketMaxSpread(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [231, 255, 97, 25, 146, 139, 174, 4] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketStepSizeAndTickSizeIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketStepSizeAndTickSizeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketStepSizeAndTickSize(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [211, 31, 21, 210, 64, 108, 66, 201] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketNameIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketNameIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketName(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [226, 74, 5, 89, 108, 223, 46, 141] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketMinOrderSizeIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketMinOrderSizeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketMinOrderSize(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [235, 37, 40, 196, 70, 146, 54, 201] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketMaxSlippageRatioIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketMaxSlippageRatioIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketMaxSlippageRatio(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [19, 172, 114, 154, 42, 135, 161, 133] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketMaxFillReserveFractionIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketMaxFillReserveFractionIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketMaxFillReserveFraction(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [194, 79, 149, 224, 246, 102, 186, 140] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketMaxOpenInterestIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketMaxOpenInterestIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketMaxOpenInterest(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [35, 62, 144, 177, 180, 62, 215, 196] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketNumberOfUsersIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketNumberOfUsersIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketNumberOfUsers(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [194, 174, 87, 102, 43, 148, 32, 112] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketFeeAdjustmentIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketFeeAdjustmentIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketFeeAdjustment(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [148, 182, 3, 126, 157, 114, 220, 99] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketFeeAdjustmentIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketFeeAdjustmentIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketFeeAdjustment(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [252, 141, 110, 101, 27, 99, 182, 21] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdatePerpMarketFuelIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdatePerpMarketFuelIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpMarketFuel(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [226, 253, 76, 71, 17, 2, 171, 169] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateSpotMarketFuelIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    spot_market: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateSpotMarketFuelIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotMarketFuel(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [132, 191, 228, 141, 201, 138, 60, 48] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = InitUserFuelIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                    user: ix.accounts[2].0.into(),
                    user_stats: ix.accounts[3].0.into(),
                };
                let de_ix_data: InitUserFuelIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitUserFuel(ix_accounts, de_ix_data))
            },
            [161, 176, 40, 213, 60, 184, 179, 228] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateAdminIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateAdminIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateAdmin(ix_accounts, de_ix_data))
            },
            [161, 15, 162, 19, 148, 120, 144, 151] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateWhitelistMintIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateWhitelistMintIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateWhitelistMint(ix_accounts, de_ix_data))
            },
            [32, 252, 122, 211, 66, 31, 47, 241] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateDiscountMintIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateDiscountMintIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateDiscountMint(ix_accounts, de_ix_data))
            },
            [83, 160, 252, 250, 129, 116, 49, 223] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateExchangeStatusIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateExchangeStatusIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateExchangeStatus(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [126, 110, 52, 174, 30, 206, 215, 90] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdatePerpAuctionDurationIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdatePerpAuctionDurationIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePerpAuctionDuration(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [182, 178, 203, 72, 187, 143, 157, 107] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateSpotAuctionDurationIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    state: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateSpotAuctionDurationIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateSpotAuctionDuration(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [89, 131, 239, 200, 178, 141, 106, 194] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = InitializeProtocolIfSharesTransferConfigIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    protocol_if_shares_transfer_config: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                };
                Ok(DriftProgramIx::InitializeProtocolIfSharesTransferConfig(
                    ix_accounts,
                ))
            },
            [34, 135, 47, 91, 220, 24, 212, 53] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateProtocolIfSharesTransferConfigIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    protocol_if_shares_transfer_config: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateProtocolIfSharesTransferConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateProtocolIfSharesTransferConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [169, 178, 84, 25, 175, 62, 29, 247] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = InitializePrelaunchOracleIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    prelaunch_oracle: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                };
                let de_ix_data: InitializePrelaunchOracleIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializePrelaunchOracle(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [98, 205, 147, 243, 18, 75, 83, 207] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdatePrelaunchOracleParamsIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    prelaunch_oracle: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                    state: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdatePrelaunchOracleParamsIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdatePrelaunchOracleParams(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [59, 169, 100, 49, 69, 17, 173, 253] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = DeletePrelaunchOracleIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    prelaunch_oracle: ix.accounts[1].0.into(),
                    perp_market: ix.accounts[2].0.into(),
                    state: ix.accounts[3].0.into(),
                };
                let de_ix_data: DeletePrelaunchOracleIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::DeletePrelaunchOracle(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [249, 140, 253, 243, 248, 74, 240, 238] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = InitializePythPullOracleIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    pyth_solana_receiver: ix.accounts[1].0.into(),
                    price_feed: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                    state: ix.accounts[4].0.into(),
                };
                let de_ix_data: InitializePythPullOracleIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializePythPullOracle(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [140, 107, 33, 214, 235, 219, 103, 20] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = InitializePythLazerOracleIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    lazer_oracle: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                };
                let de_ix_data: InitializePythLazerOracleIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializePythLazerOracle(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [218, 237, 170, 245, 39, 143, 166, 33] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = PostPythLazerOracleUpdateIxAccounts {
                    keeper: ix.accounts[0].0.into(),
                    pyth_lazer_storage: ix.accounts[1].0.into(),
                    ix_sysvar: ix.accounts[2].0.into(),
                };
                let de_ix_data: PostPythLazerOracleUpdateIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::PostPythLazerOracleUpdate(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [213, 167, 93, 246, 208, 130, 90, 248] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = InitializeHighLeverageModeConfigIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    high_leverage_mode_config: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                };
                let de_ix_data: InitializeHighLeverageModeConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializeHighLeverageModeConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [64, 122, 212, 93, 141, 217, 202, 55] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateHighLeverageModeConfigIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    high_leverage_mode_config: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateHighLeverageModeConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateHighLeverageModeConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [67, 103, 220, 67, 88, 32, 252, 8] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = InitializeProtectedMakerModeConfigIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    protected_maker_mode_config: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                };
                let de_ix_data: InitializeProtectedMakerModeConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::InitializeProtectedMakerModeConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [86, 166, 235, 253, 67, 202, 223, 17] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateProtectedMakerModeConfigIxAccounts {
                    admin: ix.accounts[0].0.into(),
                    protected_maker_mode_config: ix.accounts[1].0.into(),
                    state: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateProtectedMakerModeConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(DriftProgramIx::UpdateProtectedMakerModeConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
