//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{
        FuelOverflow, HighLeverageModeConfig, InsuranceFundStake, OpenbookV2FulfillmentConfig,
        PerpMarket, PhoenixV1FulfillmentConfig, PrelaunchOracle, ProtectedMakerModeConfig,
        ProtocolIfSharesTransferConfig, PythLazerOracle, ReferrerName, SerumV3FulfillmentConfig,
        SignedMsgUserOrders, SignedMsgWsDelegates, SpotMarket, State, User, UserStats,
    },
    ID,
};

/// Drift Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
pub enum DriftProgramState {
    OpenbookV2FulfillmentConfig(OpenbookV2FulfillmentConfig),
    PhoenixV1FulfillmentConfig(PhoenixV1FulfillmentConfig),
    SerumV3FulfillmentConfig(SerumV3FulfillmentConfig),
    HighLeverageModeConfig(HighLeverageModeConfig),
    InsuranceFundStake(InsuranceFundStake),
    ProtocolIfSharesTransferConfig(ProtocolIfSharesTransferConfig),
    PrelaunchOracle(PrelaunchOracle),
    PerpMarket(PerpMarket),
    ProtectedMakerModeConfig(ProtectedMakerModeConfig),
    PythLazerOracle(PythLazerOracle),
    SignedMsgUserOrders(SignedMsgUserOrders),
    SignedMsgWsDelegates(SignedMsgWsDelegates),
    SpotMarket(SpotMarket),
    State(State),
    User(User),
    UserStats(UserStats),
    ReferrerName(ReferrerName),
    FuelOverflow(FuelOverflow),
}

impl DriftProgramState {
    #[allow(unreachable_patterns)]
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let data_len = data_bytes.len();
        const SIGNEDMSGUSERORDERS_LEN: usize = std::mem::size_of::<SignedMsgUserOrders>();
        const SIGNEDMSGWSDELEGATES_LEN: usize = std::mem::size_of::<SignedMsgWsDelegates>();
        match data_len {
            OpenbookV2FulfillmentConfig::LEN => Ok(DriftProgramState::OpenbookV2FulfillmentConfig(
                OpenbookV2FulfillmentConfig::from_bytes(data_bytes)?,
            )),
            PhoenixV1FulfillmentConfig::LEN => Ok(DriftProgramState::PhoenixV1FulfillmentConfig(
                PhoenixV1FulfillmentConfig::from_bytes(data_bytes)?,
            )),
            SerumV3FulfillmentConfig::LEN => Ok(DriftProgramState::SerumV3FulfillmentConfig(
                SerumV3FulfillmentConfig::from_bytes(data_bytes)?,
            )),
            HighLeverageModeConfig::LEN => Ok(DriftProgramState::HighLeverageModeConfig(
                HighLeverageModeConfig::from_bytes(data_bytes)?,
            )),
            InsuranceFundStake::LEN => Ok(DriftProgramState::InsuranceFundStake(
                InsuranceFundStake::from_bytes(data_bytes)?,
            )),
            ProtocolIfSharesTransferConfig::LEN => {
                Ok(DriftProgramState::ProtocolIfSharesTransferConfig(
                    ProtocolIfSharesTransferConfig::from_bytes(data_bytes)?,
                ))
            },
            PrelaunchOracle::LEN => Ok(DriftProgramState::PrelaunchOracle(
                PrelaunchOracle::from_bytes(data_bytes)?,
            )),
            PerpMarket::LEN => Ok(DriftProgramState::PerpMarket(PerpMarket::from_bytes(
                data_bytes,
            )?)),
            ProtectedMakerModeConfig::LEN => Ok(DriftProgramState::ProtectedMakerModeConfig(
                ProtectedMakerModeConfig::from_bytes(data_bytes)?,
            )),
            PythLazerOracle::LEN => Ok(DriftProgramState::PythLazerOracle(
                PythLazerOracle::from_bytes(data_bytes)?,
            )),
            SIGNEDMSGUSERORDERS_LEN => Ok(DriftProgramState::SignedMsgUserOrders(
                SignedMsgUserOrders::from_bytes(data_bytes)?,
            )),
            SIGNEDMSGWSDELEGATES_LEN => Ok(DriftProgramState::SignedMsgWsDelegates(
                SignedMsgWsDelegates::from_bytes(data_bytes)?,
            )),
            SpotMarket::LEN => Ok(DriftProgramState::SpotMarket(SpotMarket::from_bytes(
                data_bytes,
            )?)),
            State::LEN => Ok(DriftProgramState::State(State::from_bytes(data_bytes)?)),
            User::LEN => Ok(DriftProgramState::User(User::from_bytes(data_bytes)?)),
            UserStats::LEN => Ok(DriftProgramState::UserStats(UserStats::from_bytes(
                data_bytes,
            )?)),
            ReferrerName::LEN => Ok(DriftProgramState::ReferrerName(ReferrerName::from_bytes(
                data_bytes,
            )?)),
            FuelOverflow::LEN => Ok(DriftProgramState::FuelOverflow(FuelOverflow::from_bytes(
                data_bytes,
            )?)),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account data length".to_owned(),
            )),
        }
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = DriftProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "drift::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        DriftProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}
