//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct RequestRemoveInsuranceFundStake {
    pub spot_market: solana_program::pubkey::Pubkey,

    pub insurance_fund_stake: solana_program::pubkey::Pubkey,

    pub user_stats: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub insurance_fund_vault: solana_program::pubkey::Pubkey,
}

impl RequestRemoveInsuranceFundStake {
    pub fn instruction(
        &self,
        args: RequestRemoveInsuranceFundStakeInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: RequestRemoveInsuranceFundStakeInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.spot_market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.insurance_fund_stake,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_stats,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.insurance_fund_vault,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data =
            borsh::to_vec(&RequestRemoveInsuranceFundStakeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RequestRemoveInsuranceFundStakeInstructionData {
    discriminator: [u8; 8],
}

impl RequestRemoveInsuranceFundStakeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [142, 70, 204, 92, 73, 106, 180, 52],
        }
    }
}

impl Default for RequestRemoveInsuranceFundStakeInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RequestRemoveInsuranceFundStakeInstructionArgs {
    pub market_index: u16,
    pub amount: u64,
}

/// Instruction builder for `RequestRemoveInsuranceFundStake`.
///
/// ### Accounts:
///
///   0. `[writable]` spot_market
///   1. `[writable]` insurance_fund_stake
///   2. `[writable]` user_stats
///   3. `[signer]` authority
///   4. `[writable]` insurance_fund_vault
#[derive(Clone, Debug, Default)]
pub struct RequestRemoveInsuranceFundStakeBuilder {
    spot_market: Option<solana_program::pubkey::Pubkey>,
    insurance_fund_stake: Option<solana_program::pubkey::Pubkey>,
    user_stats: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    insurance_fund_vault: Option<solana_program::pubkey::Pubkey>,
    market_index: Option<u16>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl RequestRemoveInsuranceFundStakeBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn spot_market(&mut self, spot_market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.spot_market = Some(spot_market);
        self
    }

    #[inline(always)]
    pub fn insurance_fund_stake(
        &mut self,
        insurance_fund_stake: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.insurance_fund_stake = Some(insurance_fund_stake);
        self
    }

    #[inline(always)]
    pub fn user_stats(&mut self, user_stats: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_stats = Some(user_stats);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn insurance_fund_vault(
        &mut self,
        insurance_fund_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.insurance_fund_vault = Some(insurance_fund_vault);
        self
    }

    #[inline(always)]
    pub fn market_index(&mut self, market_index: u16) -> &mut Self {
        self.market_index = Some(market_index);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = RequestRemoveInsuranceFundStake {
            spot_market: self.spot_market.expect("spot_market is not set"),
            insurance_fund_stake: self
                .insurance_fund_stake
                .expect("insurance_fund_stake is not set"),
            user_stats: self.user_stats.expect("user_stats is not set"),
            authority: self.authority.expect("authority is not set"),
            insurance_fund_vault: self
                .insurance_fund_vault
                .expect("insurance_fund_vault is not set"),
        };
        let args = RequestRemoveInsuranceFundStakeInstructionArgs {
            market_index: self.market_index.clone().expect("market_index is not set"),
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `request_remove_insurance_fund_stake` CPI accounts.
pub struct RequestRemoveInsuranceFundStakeCpiAccounts<'a, 'b> {
    pub spot_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_fund_stake: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_stats: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_fund_vault: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `request_remove_insurance_fund_stake` CPI instruction.
pub struct RequestRemoveInsuranceFundStakeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub spot_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_fund_stake: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_stats: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_fund_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: RequestRemoveInsuranceFundStakeInstructionArgs,
}

impl<'a, 'b> RequestRemoveInsuranceFundStakeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: RequestRemoveInsuranceFundStakeCpiAccounts<'a, 'b>,
        args: RequestRemoveInsuranceFundStakeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            spot_market: accounts.spot_market,
            insurance_fund_stake: accounts.insurance_fund_stake,
            user_stats: accounts.user_stats,
            authority: accounts.authority,
            insurance_fund_vault: accounts.insurance_fund_vault,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.spot_market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.insurance_fund_stake.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_stats.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.insurance_fund_vault.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data =
            borsh::to_vec(&RequestRemoveInsuranceFundStakeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.spot_market.clone());
        account_infos.push(self.insurance_fund_stake.clone());
        account_infos.push(self.user_stats.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.insurance_fund_vault.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `RequestRemoveInsuranceFundStake` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` spot_market
///   1. `[writable]` insurance_fund_stake
///   2. `[writable]` user_stats
///   3. `[signer]` authority
///   4. `[writable]` insurance_fund_vault
#[derive(Clone, Debug)]
pub struct RequestRemoveInsuranceFundStakeCpiBuilder<'a, 'b> {
    instruction: Box<RequestRemoveInsuranceFundStakeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RequestRemoveInsuranceFundStakeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RequestRemoveInsuranceFundStakeCpiBuilderInstruction {
            __program: program,
            spot_market: None,
            insurance_fund_stake: None,
            user_stats: None,
            authority: None,
            insurance_fund_vault: None,
            market_index: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn spot_market(
        &mut self,
        spot_market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.spot_market = Some(spot_market);
        self
    }

    #[inline(always)]
    pub fn insurance_fund_stake(
        &mut self,
        insurance_fund_stake: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.insurance_fund_stake = Some(insurance_fund_stake);
        self
    }

    #[inline(always)]
    pub fn user_stats(
        &mut self,
        user_stats: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_stats = Some(user_stats);
        self
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn insurance_fund_vault(
        &mut self,
        insurance_fund_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.insurance_fund_vault = Some(insurance_fund_vault);
        self
    }

    #[inline(always)]
    pub fn market_index(&mut self, market_index: u16) -> &mut Self {
        self.instruction.market_index = Some(market_index);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = RequestRemoveInsuranceFundStakeInstructionArgs {
            market_index: self
                .instruction
                .market_index
                .clone()
                .expect("market_index is not set"),
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = RequestRemoveInsuranceFundStakeCpi {
            __program: self.instruction.__program,

            spot_market: self
                .instruction
                .spot_market
                .expect("spot_market is not set"),

            insurance_fund_stake: self
                .instruction
                .insurance_fund_stake
                .expect("insurance_fund_stake is not set"),

            user_stats: self.instruction.user_stats.expect("user_stats is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            insurance_fund_vault: self
                .instruction
                .insurance_fund_vault
                .expect("insurance_fund_vault is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct RequestRemoveInsuranceFundStakeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    spot_market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    insurance_fund_stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_stats: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    insurance_fund_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_index: Option<u16>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
