//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::{ContractTier, OracleSource};

/// Accounts.
#[derive(Debug)]
pub struct InitializePerpMarket {
    pub admin: solana_program::pubkey::Pubkey,

    pub state: solana_program::pubkey::Pubkey,

    pub perp_market: solana_program::pubkey::Pubkey,

    pub oracle: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl InitializePerpMarket {
    pub fn instruction(
        &self,
        args: InitializePerpMarketInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializePerpMarketInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.perp_market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializePerpMarketInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePerpMarketInstructionData {
    discriminator: [u8; 8],
}

impl InitializePerpMarketInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [132, 9, 229, 118, 117, 118, 117, 62],
        }
    }
}

impl Default for InitializePerpMarketInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePerpMarketInstructionArgs {
    pub market_index: u16,
    pub amm_base_asset_reserve: u128,
    pub amm_quote_asset_reserve: u128,
    pub amm_periodicity: i64,
    pub amm_peg_multiplier: u128,
    pub oracle_source: OracleSource,
    pub contract_tier: ContractTier,
    pub margin_ratio_initial: u32,
    pub margin_ratio_maintenance: u32,
    pub liquidator_fee: u32,
    pub if_liquidation_fee: u32,
    pub imf_factor: u32,
    pub active_status: bool,
    pub base_spread: u32,
    pub max_spread: u32,
    pub max_open_interest: u128,
    pub max_revenue_withdraw_per_period: u64,
    pub quote_max_insurance: u64,
    pub order_step_size: u64,
    pub order_tick_size: u64,
    pub min_order_size: u64,
    pub concentration_coef_scale: u128,
    pub curve_update_intensity: u8,
    pub amm_jit_intensity: u8,
    pub name: [u8; 32],
}

/// Instruction builder for `InitializePerpMarket`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` admin
///   1. `[writable]` state
///   2. `[writable]` perp_market
///   3. `[]` oracle
///   4. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializePerpMarketBuilder {
    admin: Option<solana_program::pubkey::Pubkey>,
    state: Option<solana_program::pubkey::Pubkey>,
    perp_market: Option<solana_program::pubkey::Pubkey>,
    oracle: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    market_index: Option<u16>,
    amm_base_asset_reserve: Option<u128>,
    amm_quote_asset_reserve: Option<u128>,
    amm_periodicity: Option<i64>,
    amm_peg_multiplier: Option<u128>,
    oracle_source: Option<OracleSource>,
    contract_tier: Option<ContractTier>,
    margin_ratio_initial: Option<u32>,
    margin_ratio_maintenance: Option<u32>,
    liquidator_fee: Option<u32>,
    if_liquidation_fee: Option<u32>,
    imf_factor: Option<u32>,
    active_status: Option<bool>,
    base_spread: Option<u32>,
    max_spread: Option<u32>,
    max_open_interest: Option<u128>,
    max_revenue_withdraw_per_period: Option<u64>,
    quote_max_insurance: Option<u64>,
    order_step_size: Option<u64>,
    order_tick_size: Option<u64>,
    min_order_size: Option<u64>,
    concentration_coef_scale: Option<u128>,
    curve_update_intensity: Option<u8>,
    amm_jit_intensity: Option<u8>,
    name: Option<[u8; 32]>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializePerpMarketBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn perp_market(&mut self, perp_market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.perp_market = Some(perp_market);
        self
    }

    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_program::pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn market_index(&mut self, market_index: u16) -> &mut Self {
        self.market_index = Some(market_index);
        self
    }

    #[inline(always)]
    pub fn amm_base_asset_reserve(&mut self, amm_base_asset_reserve: u128) -> &mut Self {
        self.amm_base_asset_reserve = Some(amm_base_asset_reserve);
        self
    }

    #[inline(always)]
    pub fn amm_quote_asset_reserve(&mut self, amm_quote_asset_reserve: u128) -> &mut Self {
        self.amm_quote_asset_reserve = Some(amm_quote_asset_reserve);
        self
    }

    #[inline(always)]
    pub fn amm_periodicity(&mut self, amm_periodicity: i64) -> &mut Self {
        self.amm_periodicity = Some(amm_periodicity);
        self
    }

    #[inline(always)]
    pub fn amm_peg_multiplier(&mut self, amm_peg_multiplier: u128) -> &mut Self {
        self.amm_peg_multiplier = Some(amm_peg_multiplier);
        self
    }

    #[inline(always)]
    pub fn oracle_source(&mut self, oracle_source: OracleSource) -> &mut Self {
        self.oracle_source = Some(oracle_source);
        self
    }

    #[inline(always)]
    pub fn contract_tier(&mut self, contract_tier: ContractTier) -> &mut Self {
        self.contract_tier = Some(contract_tier);
        self
    }

    #[inline(always)]
    pub fn margin_ratio_initial(&mut self, margin_ratio_initial: u32) -> &mut Self {
        self.margin_ratio_initial = Some(margin_ratio_initial);
        self
    }

    #[inline(always)]
    pub fn margin_ratio_maintenance(&mut self, margin_ratio_maintenance: u32) -> &mut Self {
        self.margin_ratio_maintenance = Some(margin_ratio_maintenance);
        self
    }

    #[inline(always)]
    pub fn liquidator_fee(&mut self, liquidator_fee: u32) -> &mut Self {
        self.liquidator_fee = Some(liquidator_fee);
        self
    }

    #[inline(always)]
    pub fn if_liquidation_fee(&mut self, if_liquidation_fee: u32) -> &mut Self {
        self.if_liquidation_fee = Some(if_liquidation_fee);
        self
    }

    #[inline(always)]
    pub fn imf_factor(&mut self, imf_factor: u32) -> &mut Self {
        self.imf_factor = Some(imf_factor);
        self
    }

    #[inline(always)]
    pub fn active_status(&mut self, active_status: bool) -> &mut Self {
        self.active_status = Some(active_status);
        self
    }

    #[inline(always)]
    pub fn base_spread(&mut self, base_spread: u32) -> &mut Self {
        self.base_spread = Some(base_spread);
        self
    }

    #[inline(always)]
    pub fn max_spread(&mut self, max_spread: u32) -> &mut Self {
        self.max_spread = Some(max_spread);
        self
    }

    #[inline(always)]
    pub fn max_open_interest(&mut self, max_open_interest: u128) -> &mut Self {
        self.max_open_interest = Some(max_open_interest);
        self
    }

    #[inline(always)]
    pub fn max_revenue_withdraw_per_period(
        &mut self,
        max_revenue_withdraw_per_period: u64,
    ) -> &mut Self {
        self.max_revenue_withdraw_per_period = Some(max_revenue_withdraw_per_period);
        self
    }

    #[inline(always)]
    pub fn quote_max_insurance(&mut self, quote_max_insurance: u64) -> &mut Self {
        self.quote_max_insurance = Some(quote_max_insurance);
        self
    }

    #[inline(always)]
    pub fn order_step_size(&mut self, order_step_size: u64) -> &mut Self {
        self.order_step_size = Some(order_step_size);
        self
    }

    #[inline(always)]
    pub fn order_tick_size(&mut self, order_tick_size: u64) -> &mut Self {
        self.order_tick_size = Some(order_tick_size);
        self
    }

    #[inline(always)]
    pub fn min_order_size(&mut self, min_order_size: u64) -> &mut Self {
        self.min_order_size = Some(min_order_size);
        self
    }

    #[inline(always)]
    pub fn concentration_coef_scale(&mut self, concentration_coef_scale: u128) -> &mut Self {
        self.concentration_coef_scale = Some(concentration_coef_scale);
        self
    }

    #[inline(always)]
    pub fn curve_update_intensity(&mut self, curve_update_intensity: u8) -> &mut Self {
        self.curve_update_intensity = Some(curve_update_intensity);
        self
    }

    #[inline(always)]
    pub fn amm_jit_intensity(&mut self, amm_jit_intensity: u8) -> &mut Self {
        self.amm_jit_intensity = Some(amm_jit_intensity);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: [u8; 32]) -> &mut Self {
        self.name = Some(name);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializePerpMarket {
            admin: self.admin.expect("admin is not set"),
            state: self.state.expect("state is not set"),
            perp_market: self.perp_market.expect("perp_market is not set"),
            oracle: self.oracle.expect("oracle is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = InitializePerpMarketInstructionArgs {
            market_index: self.market_index.clone().expect("market_index is not set"),
            amm_base_asset_reserve: self
                .amm_base_asset_reserve
                .clone()
                .expect("amm_base_asset_reserve is not set"),
            amm_quote_asset_reserve: self
                .amm_quote_asset_reserve
                .clone()
                .expect("amm_quote_asset_reserve is not set"),
            amm_periodicity: self
                .amm_periodicity
                .clone()
                .expect("amm_periodicity is not set"),
            amm_peg_multiplier: self
                .amm_peg_multiplier
                .clone()
                .expect("amm_peg_multiplier is not set"),
            oracle_source: self
                .oracle_source
                .clone()
                .expect("oracle_source is not set"),
            contract_tier: self
                .contract_tier
                .clone()
                .expect("contract_tier is not set"),
            margin_ratio_initial: self
                .margin_ratio_initial
                .clone()
                .expect("margin_ratio_initial is not set"),
            margin_ratio_maintenance: self
                .margin_ratio_maintenance
                .clone()
                .expect("margin_ratio_maintenance is not set"),
            liquidator_fee: self
                .liquidator_fee
                .clone()
                .expect("liquidator_fee is not set"),
            if_liquidation_fee: self
                .if_liquidation_fee
                .clone()
                .expect("if_liquidation_fee is not set"),
            imf_factor: self.imf_factor.clone().expect("imf_factor is not set"),
            active_status: self
                .active_status
                .clone()
                .expect("active_status is not set"),
            base_spread: self.base_spread.clone().expect("base_spread is not set"),
            max_spread: self.max_spread.clone().expect("max_spread is not set"),
            max_open_interest: self
                .max_open_interest
                .clone()
                .expect("max_open_interest is not set"),
            max_revenue_withdraw_per_period: self
                .max_revenue_withdraw_per_period
                .clone()
                .expect("max_revenue_withdraw_per_period is not set"),
            quote_max_insurance: self
                .quote_max_insurance
                .clone()
                .expect("quote_max_insurance is not set"),
            order_step_size: self
                .order_step_size
                .clone()
                .expect("order_step_size is not set"),
            order_tick_size: self
                .order_tick_size
                .clone()
                .expect("order_tick_size is not set"),
            min_order_size: self
                .min_order_size
                .clone()
                .expect("min_order_size is not set"),
            concentration_coef_scale: self
                .concentration_coef_scale
                .clone()
                .expect("concentration_coef_scale is not set"),
            curve_update_intensity: self
                .curve_update_intensity
                .clone()
                .expect("curve_update_intensity is not set"),
            amm_jit_intensity: self
                .amm_jit_intensity
                .clone()
                .expect("amm_jit_intensity is not set"),
            name: self.name.clone().expect("name is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_perp_market` CPI accounts.
pub struct InitializePerpMarketCpiAccounts<'a, 'b> {
    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub perp_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_perp_market` CPI instruction.
pub struct InitializePerpMarketCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub perp_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializePerpMarketInstructionArgs,
}

impl<'a, 'b> InitializePerpMarketCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializePerpMarketCpiAccounts<'a, 'b>,
        args: InitializePerpMarketInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            admin: accounts.admin,
            state: accounts.state,
            perp_market: accounts.perp_market,
            oracle: accounts.oracle,
            rent: accounts.rent,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.perp_market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializePerpMarketInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.perp_market.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializePerpMarket` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` admin
///   1. `[writable]` state
///   2. `[writable]` perp_market
///   3. `[]` oracle
///   4. `[]` rent
///   5. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializePerpMarketCpiBuilder<'a, 'b> {
    instruction: Box<InitializePerpMarketCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializePerpMarketCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializePerpMarketCpiBuilderInstruction {
            __program: program,
            admin: None,
            state: None,
            perp_market: None,
            oracle: None,
            rent: None,
            system_program: None,
            market_index: None,
            amm_base_asset_reserve: None,
            amm_quote_asset_reserve: None,
            amm_periodicity: None,
            amm_peg_multiplier: None,
            oracle_source: None,
            contract_tier: None,
            margin_ratio_initial: None,
            margin_ratio_maintenance: None,
            liquidator_fee: None,
            if_liquidation_fee: None,
            imf_factor: None,
            active_status: None,
            base_spread: None,
            max_spread: None,
            max_open_interest: None,
            max_revenue_withdraw_per_period: None,
            quote_max_insurance: None,
            order_step_size: None,
            order_tick_size: None,
            min_order_size: None,
            concentration_coef_scale: None,
            curve_update_intensity: None,
            amm_jit_intensity: None,
            name: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn perp_market(
        &mut self,
        perp_market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.perp_market = Some(perp_market);
        self
    }

    #[inline(always)]
    pub fn oracle(
        &mut self,
        oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn market_index(&mut self, market_index: u16) -> &mut Self {
        self.instruction.market_index = Some(market_index);
        self
    }

    #[inline(always)]
    pub fn amm_base_asset_reserve(&mut self, amm_base_asset_reserve: u128) -> &mut Self {
        self.instruction.amm_base_asset_reserve = Some(amm_base_asset_reserve);
        self
    }

    #[inline(always)]
    pub fn amm_quote_asset_reserve(&mut self, amm_quote_asset_reserve: u128) -> &mut Self {
        self.instruction.amm_quote_asset_reserve = Some(amm_quote_asset_reserve);
        self
    }

    #[inline(always)]
    pub fn amm_periodicity(&mut self, amm_periodicity: i64) -> &mut Self {
        self.instruction.amm_periodicity = Some(amm_periodicity);
        self
    }

    #[inline(always)]
    pub fn amm_peg_multiplier(&mut self, amm_peg_multiplier: u128) -> &mut Self {
        self.instruction.amm_peg_multiplier = Some(amm_peg_multiplier);
        self
    }

    #[inline(always)]
    pub fn oracle_source(&mut self, oracle_source: OracleSource) -> &mut Self {
        self.instruction.oracle_source = Some(oracle_source);
        self
    }

    #[inline(always)]
    pub fn contract_tier(&mut self, contract_tier: ContractTier) -> &mut Self {
        self.instruction.contract_tier = Some(contract_tier);
        self
    }

    #[inline(always)]
    pub fn margin_ratio_initial(&mut self, margin_ratio_initial: u32) -> &mut Self {
        self.instruction.margin_ratio_initial = Some(margin_ratio_initial);
        self
    }

    #[inline(always)]
    pub fn margin_ratio_maintenance(&mut self, margin_ratio_maintenance: u32) -> &mut Self {
        self.instruction.margin_ratio_maintenance = Some(margin_ratio_maintenance);
        self
    }

    #[inline(always)]
    pub fn liquidator_fee(&mut self, liquidator_fee: u32) -> &mut Self {
        self.instruction.liquidator_fee = Some(liquidator_fee);
        self
    }

    #[inline(always)]
    pub fn if_liquidation_fee(&mut self, if_liquidation_fee: u32) -> &mut Self {
        self.instruction.if_liquidation_fee = Some(if_liquidation_fee);
        self
    }

    #[inline(always)]
    pub fn imf_factor(&mut self, imf_factor: u32) -> &mut Self {
        self.instruction.imf_factor = Some(imf_factor);
        self
    }

    #[inline(always)]
    pub fn active_status(&mut self, active_status: bool) -> &mut Self {
        self.instruction.active_status = Some(active_status);
        self
    }

    #[inline(always)]
    pub fn base_spread(&mut self, base_spread: u32) -> &mut Self {
        self.instruction.base_spread = Some(base_spread);
        self
    }

    #[inline(always)]
    pub fn max_spread(&mut self, max_spread: u32) -> &mut Self {
        self.instruction.max_spread = Some(max_spread);
        self
    }

    #[inline(always)]
    pub fn max_open_interest(&mut self, max_open_interest: u128) -> &mut Self {
        self.instruction.max_open_interest = Some(max_open_interest);
        self
    }

    #[inline(always)]
    pub fn max_revenue_withdraw_per_period(
        &mut self,
        max_revenue_withdraw_per_period: u64,
    ) -> &mut Self {
        self.instruction.max_revenue_withdraw_per_period = Some(max_revenue_withdraw_per_period);
        self
    }

    #[inline(always)]
    pub fn quote_max_insurance(&mut self, quote_max_insurance: u64) -> &mut Self {
        self.instruction.quote_max_insurance = Some(quote_max_insurance);
        self
    }

    #[inline(always)]
    pub fn order_step_size(&mut self, order_step_size: u64) -> &mut Self {
        self.instruction.order_step_size = Some(order_step_size);
        self
    }

    #[inline(always)]
    pub fn order_tick_size(&mut self, order_tick_size: u64) -> &mut Self {
        self.instruction.order_tick_size = Some(order_tick_size);
        self
    }

    #[inline(always)]
    pub fn min_order_size(&mut self, min_order_size: u64) -> &mut Self {
        self.instruction.min_order_size = Some(min_order_size);
        self
    }

    #[inline(always)]
    pub fn concentration_coef_scale(&mut self, concentration_coef_scale: u128) -> &mut Self {
        self.instruction.concentration_coef_scale = Some(concentration_coef_scale);
        self
    }

    #[inline(always)]
    pub fn curve_update_intensity(&mut self, curve_update_intensity: u8) -> &mut Self {
        self.instruction.curve_update_intensity = Some(curve_update_intensity);
        self
    }

    #[inline(always)]
    pub fn amm_jit_intensity(&mut self, amm_jit_intensity: u8) -> &mut Self {
        self.instruction.amm_jit_intensity = Some(amm_jit_intensity);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: [u8; 32]) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializePerpMarketInstructionArgs {
            market_index: self
                .instruction
                .market_index
                .clone()
                .expect("market_index is not set"),
            amm_base_asset_reserve: self
                .instruction
                .amm_base_asset_reserve
                .clone()
                .expect("amm_base_asset_reserve is not set"),
            amm_quote_asset_reserve: self
                .instruction
                .amm_quote_asset_reserve
                .clone()
                .expect("amm_quote_asset_reserve is not set"),
            amm_periodicity: self
                .instruction
                .amm_periodicity
                .clone()
                .expect("amm_periodicity is not set"),
            amm_peg_multiplier: self
                .instruction
                .amm_peg_multiplier
                .clone()
                .expect("amm_peg_multiplier is not set"),
            oracle_source: self
                .instruction
                .oracle_source
                .clone()
                .expect("oracle_source is not set"),
            contract_tier: self
                .instruction
                .contract_tier
                .clone()
                .expect("contract_tier is not set"),
            margin_ratio_initial: self
                .instruction
                .margin_ratio_initial
                .clone()
                .expect("margin_ratio_initial is not set"),
            margin_ratio_maintenance: self
                .instruction
                .margin_ratio_maintenance
                .clone()
                .expect("margin_ratio_maintenance is not set"),
            liquidator_fee: self
                .instruction
                .liquidator_fee
                .clone()
                .expect("liquidator_fee is not set"),
            if_liquidation_fee: self
                .instruction
                .if_liquidation_fee
                .clone()
                .expect("if_liquidation_fee is not set"),
            imf_factor: self
                .instruction
                .imf_factor
                .clone()
                .expect("imf_factor is not set"),
            active_status: self
                .instruction
                .active_status
                .clone()
                .expect("active_status is not set"),
            base_spread: self
                .instruction
                .base_spread
                .clone()
                .expect("base_spread is not set"),
            max_spread: self
                .instruction
                .max_spread
                .clone()
                .expect("max_spread is not set"),
            max_open_interest: self
                .instruction
                .max_open_interest
                .clone()
                .expect("max_open_interest is not set"),
            max_revenue_withdraw_per_period: self
                .instruction
                .max_revenue_withdraw_per_period
                .clone()
                .expect("max_revenue_withdraw_per_period is not set"),
            quote_max_insurance: self
                .instruction
                .quote_max_insurance
                .clone()
                .expect("quote_max_insurance is not set"),
            order_step_size: self
                .instruction
                .order_step_size
                .clone()
                .expect("order_step_size is not set"),
            order_tick_size: self
                .instruction
                .order_tick_size
                .clone()
                .expect("order_tick_size is not set"),
            min_order_size: self
                .instruction
                .min_order_size
                .clone()
                .expect("min_order_size is not set"),
            concentration_coef_scale: self
                .instruction
                .concentration_coef_scale
                .clone()
                .expect("concentration_coef_scale is not set"),
            curve_update_intensity: self
                .instruction
                .curve_update_intensity
                .clone()
                .expect("curve_update_intensity is not set"),
            amm_jit_intensity: self
                .instruction
                .amm_jit_intensity
                .clone()
                .expect("amm_jit_intensity is not set"),
            name: self.instruction.name.clone().expect("name is not set"),
        };
        let instruction = InitializePerpMarketCpi {
            __program: self.instruction.__program,

            admin: self.instruction.admin.expect("admin is not set"),

            state: self.instruction.state.expect("state is not set"),

            perp_market: self
                .instruction
                .perp_market
                .expect("perp_market is not set"),

            oracle: self.instruction.oracle.expect("oracle is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializePerpMarketCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    perp_market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_index: Option<u16>,
    amm_base_asset_reserve: Option<u128>,
    amm_quote_asset_reserve: Option<u128>,
    amm_periodicity: Option<i64>,
    amm_peg_multiplier: Option<u128>,
    oracle_source: Option<OracleSource>,
    contract_tier: Option<ContractTier>,
    margin_ratio_initial: Option<u32>,
    margin_ratio_maintenance: Option<u32>,
    liquidator_fee: Option<u32>,
    if_liquidation_fee: Option<u32>,
    imf_factor: Option<u32>,
    active_status: Option<bool>,
    base_spread: Option<u32>,
    max_spread: Option<u32>,
    max_open_interest: Option<u128>,
    max_revenue_withdraw_per_period: Option<u64>,
    quote_max_insurance: Option<u64>,
    order_step_size: Option<u64>,
    order_tick_size: Option<u64>,
    min_order_size: Option<u64>,
    concentration_coef_scale: Option<u128>,
    curve_update_intensity: Option<u8>,
    amm_jit_intensity: Option<u8>,
    name: Option<[u8; 32]>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
