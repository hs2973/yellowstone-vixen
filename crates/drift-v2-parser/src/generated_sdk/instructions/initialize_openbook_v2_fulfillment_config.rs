//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct InitializeOpenbookV2FulfillmentConfig {
    pub base_spot_market: solana_program::pubkey::Pubkey,

    pub quote_spot_market: solana_program::pubkey::Pubkey,

    pub state: solana_program::pubkey::Pubkey,

    pub openbook_v2_program: solana_program::pubkey::Pubkey,

    pub openbook_v2_market: solana_program::pubkey::Pubkey,

    pub drift_signer: solana_program::pubkey::Pubkey,

    pub openbook_v2_fulfillment_config: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl InitializeOpenbookV2FulfillmentConfig {
    pub fn instruction(
        &self,
        args: InitializeOpenbookV2FulfillmentConfigInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeOpenbookV2FulfillmentConfigInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_spot_market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_spot_market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.openbook_v2_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.openbook_v2_market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.drift_signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.openbook_v2_fulfillment_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data =
            borsh::to_vec(&InitializeOpenbookV2FulfillmentConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeOpenbookV2FulfillmentConfigInstructionData {
    discriminator: [u8; 8],
}

impl InitializeOpenbookV2FulfillmentConfigInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [7, 221, 103, 153, 107, 57, 27, 197],
        }
    }
}

impl Default for InitializeOpenbookV2FulfillmentConfigInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeOpenbookV2FulfillmentConfigInstructionArgs {
    pub market_index: u16,
}

/// Instruction builder for `InitializeOpenbookV2FulfillmentConfig`.
///
/// ### Accounts:
///
///   0. `[]` base_spot_market
///   1. `[]` quote_spot_market
///   2. `[writable]` state
///   3. `[]` openbook_v2_program
///   4. `[]` openbook_v2_market
///   5. `[]` drift_signer
///   6. `[writable]` openbook_v2_fulfillment_config
///   7. `[writable, signer]` admin
///   8. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeOpenbookV2FulfillmentConfigBuilder {
    base_spot_market: Option<solana_program::pubkey::Pubkey>,
    quote_spot_market: Option<solana_program::pubkey::Pubkey>,
    state: Option<solana_program::pubkey::Pubkey>,
    openbook_v2_program: Option<solana_program::pubkey::Pubkey>,
    openbook_v2_market: Option<solana_program::pubkey::Pubkey>,
    drift_signer: Option<solana_program::pubkey::Pubkey>,
    openbook_v2_fulfillment_config: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    market_index: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeOpenbookV2FulfillmentConfigBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn base_spot_market(
        &mut self,
        base_spot_market: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_spot_market = Some(base_spot_market);
        self
    }

    #[inline(always)]
    pub fn quote_spot_market(
        &mut self,
        quote_spot_market: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.quote_spot_market = Some(quote_spot_market);
        self
    }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn openbook_v2_program(
        &mut self,
        openbook_v2_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.openbook_v2_program = Some(openbook_v2_program);
        self
    }

    #[inline(always)]
    pub fn openbook_v2_market(
        &mut self,
        openbook_v2_market: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.openbook_v2_market = Some(openbook_v2_market);
        self
    }

    #[inline(always)]
    pub fn drift_signer(&mut self, drift_signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.drift_signer = Some(drift_signer);
        self
    }

    #[inline(always)]
    pub fn openbook_v2_fulfillment_config(
        &mut self,
        openbook_v2_fulfillment_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.openbook_v2_fulfillment_config = Some(openbook_v2_fulfillment_config);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn market_index(&mut self, market_index: u16) -> &mut Self {
        self.market_index = Some(market_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeOpenbookV2FulfillmentConfig {
            base_spot_market: self.base_spot_market.expect("base_spot_market is not set"),
            quote_spot_market: self
                .quote_spot_market
                .expect("quote_spot_market is not set"),
            state: self.state.expect("state is not set"),
            openbook_v2_program: self
                .openbook_v2_program
                .expect("openbook_v2_program is not set"),
            openbook_v2_market: self
                .openbook_v2_market
                .expect("openbook_v2_market is not set"),
            drift_signer: self.drift_signer.expect("drift_signer is not set"),
            openbook_v2_fulfillment_config: self
                .openbook_v2_fulfillment_config
                .expect("openbook_v2_fulfillment_config is not set"),
            admin: self.admin.expect("admin is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = InitializeOpenbookV2FulfillmentConfigInstructionArgs {
            market_index: self.market_index.clone().expect("market_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_openbook_v2_fulfillment_config` CPI accounts.
pub struct InitializeOpenbookV2FulfillmentConfigCpiAccounts<'a, 'b> {
    pub base_spot_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_spot_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub openbook_v2_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub openbook_v2_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub drift_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub openbook_v2_fulfillment_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_openbook_v2_fulfillment_config` CPI instruction.
pub struct InitializeOpenbookV2FulfillmentConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_spot_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_spot_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub openbook_v2_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub openbook_v2_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub drift_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub openbook_v2_fulfillment_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeOpenbookV2FulfillmentConfigInstructionArgs,
}

impl<'a, 'b> InitializeOpenbookV2FulfillmentConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeOpenbookV2FulfillmentConfigCpiAccounts<'a, 'b>,
        args: InitializeOpenbookV2FulfillmentConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            base_spot_market: accounts.base_spot_market,
            quote_spot_market: accounts.quote_spot_market,
            state: accounts.state,
            openbook_v2_program: accounts.openbook_v2_program,
            openbook_v2_market: accounts.openbook_v2_market,
            drift_signer: accounts.drift_signer,
            openbook_v2_fulfillment_config: accounts.openbook_v2_fulfillment_config,
            admin: accounts.admin,
            rent: accounts.rent,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_spot_market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_spot_market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.openbook_v2_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.openbook_v2_market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.drift_signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.openbook_v2_fulfillment_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data =
            borsh::to_vec(&InitializeOpenbookV2FulfillmentConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.base_spot_market.clone());
        account_infos.push(self.quote_spot_market.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.openbook_v2_program.clone());
        account_infos.push(self.openbook_v2_market.clone());
        account_infos.push(self.drift_signer.clone());
        account_infos.push(self.openbook_v2_fulfillment_config.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeOpenbookV2FulfillmentConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[]` base_spot_market
///   1. `[]` quote_spot_market
///   2. `[writable]` state
///   3. `[]` openbook_v2_program
///   4. `[]` openbook_v2_market
///   5. `[]` drift_signer
///   6. `[writable]` openbook_v2_fulfillment_config
///   7. `[writable, signer]` admin
///   8. `[]` rent
///   9. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializeOpenbookV2FulfillmentConfigCpiBuilder<'a, 'b> {
    instruction: Box<InitializeOpenbookV2FulfillmentConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeOpenbookV2FulfillmentConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeOpenbookV2FulfillmentConfigCpiBuilderInstruction {
            __program: program,
            base_spot_market: None,
            quote_spot_market: None,
            state: None,
            openbook_v2_program: None,
            openbook_v2_market: None,
            drift_signer: None,
            openbook_v2_fulfillment_config: None,
            admin: None,
            rent: None,
            system_program: None,
            market_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn base_spot_market(
        &mut self,
        base_spot_market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_spot_market = Some(base_spot_market);
        self
    }

    #[inline(always)]
    pub fn quote_spot_market(
        &mut self,
        quote_spot_market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_spot_market = Some(quote_spot_market);
        self
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn openbook_v2_program(
        &mut self,
        openbook_v2_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.openbook_v2_program = Some(openbook_v2_program);
        self
    }

    #[inline(always)]
    pub fn openbook_v2_market(
        &mut self,
        openbook_v2_market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.openbook_v2_market = Some(openbook_v2_market);
        self
    }

    #[inline(always)]
    pub fn drift_signer(
        &mut self,
        drift_signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.drift_signer = Some(drift_signer);
        self
    }

    #[inline(always)]
    pub fn openbook_v2_fulfillment_config(
        &mut self,
        openbook_v2_fulfillment_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.openbook_v2_fulfillment_config = Some(openbook_v2_fulfillment_config);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn market_index(&mut self, market_index: u16) -> &mut Self {
        self.instruction.market_index = Some(market_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeOpenbookV2FulfillmentConfigInstructionArgs {
            market_index: self
                .instruction
                .market_index
                .clone()
                .expect("market_index is not set"),
        };
        let instruction = InitializeOpenbookV2FulfillmentConfigCpi {
            __program: self.instruction.__program,

            base_spot_market: self
                .instruction
                .base_spot_market
                .expect("base_spot_market is not set"),

            quote_spot_market: self
                .instruction
                .quote_spot_market
                .expect("quote_spot_market is not set"),

            state: self.instruction.state.expect("state is not set"),

            openbook_v2_program: self
                .instruction
                .openbook_v2_program
                .expect("openbook_v2_program is not set"),

            openbook_v2_market: self
                .instruction
                .openbook_v2_market
                .expect("openbook_v2_market is not set"),

            drift_signer: self
                .instruction
                .drift_signer
                .expect("drift_signer is not set"),

            openbook_v2_fulfillment_config: self
                .instruction
                .openbook_v2_fulfillment_config
                .expect("openbook_v2_fulfillment_config is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeOpenbookV2FulfillmentConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    base_spot_market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_spot_market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    openbook_v2_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    openbook_v2_market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    drift_signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    openbook_v2_fulfillment_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_index: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
