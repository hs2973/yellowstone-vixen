//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::SpotFulfillmentConfigStatus;

/// Accounts.
#[derive(Debug)]
pub struct OpenbookV2FulfillmentConfigStatus {
    pub state: solana_program::pubkey::Pubkey,

    pub openbook_v2_fulfillment_config: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,
}

impl OpenbookV2FulfillmentConfigStatus {
    pub fn instruction(
        &self,
        args: OpenbookV2FulfillmentConfigStatusInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: OpenbookV2FulfillmentConfigStatusInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.openbook_v2_fulfillment_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin, true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data =
            borsh::to_vec(&OpenbookV2FulfillmentConfigStatusInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OpenbookV2FulfillmentConfigStatusInstructionData {
    discriminator: [u8; 8],
}

impl OpenbookV2FulfillmentConfigStatusInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [25, 173, 19, 189, 4, 211, 64, 238],
        }
    }
}

impl Default for OpenbookV2FulfillmentConfigStatusInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OpenbookV2FulfillmentConfigStatusInstructionArgs {
    pub status: SpotFulfillmentConfigStatus,
}

/// Instruction builder for `OpenbookV2FulfillmentConfigStatus`.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[writable]` openbook_v2_fulfillment_config
///   2. `[writable, signer]` admin
#[derive(Clone, Debug, Default)]
pub struct OpenbookV2FulfillmentConfigStatusBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    openbook_v2_fulfillment_config: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    status: Option<SpotFulfillmentConfigStatus>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl OpenbookV2FulfillmentConfigStatusBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn openbook_v2_fulfillment_config(
        &mut self,
        openbook_v2_fulfillment_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.openbook_v2_fulfillment_config = Some(openbook_v2_fulfillment_config);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn status(&mut self, status: SpotFulfillmentConfigStatus) -> &mut Self {
        self.status = Some(status);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = OpenbookV2FulfillmentConfigStatus {
            state: self.state.expect("state is not set"),
            openbook_v2_fulfillment_config: self
                .openbook_v2_fulfillment_config
                .expect("openbook_v2_fulfillment_config is not set"),
            admin: self.admin.expect("admin is not set"),
        };
        let args = OpenbookV2FulfillmentConfigStatusInstructionArgs {
            status: self.status.clone().expect("status is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `openbook_v2_fulfillment_config_status` CPI accounts.
pub struct OpenbookV2FulfillmentConfigStatusCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub openbook_v2_fulfillment_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `openbook_v2_fulfillment_config_status` CPI instruction.
pub struct OpenbookV2FulfillmentConfigStatusCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub openbook_v2_fulfillment_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: OpenbookV2FulfillmentConfigStatusInstructionArgs,
}

impl<'a, 'b> OpenbookV2FulfillmentConfigStatusCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: OpenbookV2FulfillmentConfigStatusCpiAccounts<'a, 'b>,
        args: OpenbookV2FulfillmentConfigStatusInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            openbook_v2_fulfillment_config: accounts.openbook_v2_fulfillment_config,
            admin: accounts.admin,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.openbook_v2_fulfillment_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data =
            borsh::to_vec(&OpenbookV2FulfillmentConfigStatusInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.openbook_v2_fulfillment_config.clone());
        account_infos.push(self.admin.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `OpenbookV2FulfillmentConfigStatus` via CPI.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[writable]` openbook_v2_fulfillment_config
///   2. `[writable, signer]` admin
#[derive(Clone, Debug)]
pub struct OpenbookV2FulfillmentConfigStatusCpiBuilder<'a, 'b> {
    instruction: Box<OpenbookV2FulfillmentConfigStatusCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> OpenbookV2FulfillmentConfigStatusCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(OpenbookV2FulfillmentConfigStatusCpiBuilderInstruction {
            __program: program,
            state: None,
            openbook_v2_fulfillment_config: None,
            admin: None,
            status: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn openbook_v2_fulfillment_config(
        &mut self,
        openbook_v2_fulfillment_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.openbook_v2_fulfillment_config = Some(openbook_v2_fulfillment_config);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn status(&mut self, status: SpotFulfillmentConfigStatus) -> &mut Self {
        self.instruction.status = Some(status);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = OpenbookV2FulfillmentConfigStatusInstructionArgs {
            status: self.instruction.status.clone().expect("status is not set"),
        };
        let instruction = OpenbookV2FulfillmentConfigStatusCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            openbook_v2_fulfillment_config: self
                .instruction
                .openbook_v2_fulfillment_config
                .expect("openbook_v2_fulfillment_config is not set"),

            admin: self.instruction.admin.expect("admin is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct OpenbookV2FulfillmentConfigStatusCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    openbook_v2_fulfillment_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    status: Option<SpotFulfillmentConfigStatus>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
