//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::{AssetTier, OracleSource};

/// Accounts.
#[derive(Debug)]
pub struct InitializeSpotMarket {
    pub spot_market: solana_program::pubkey::Pubkey,

    pub spot_market_mint: solana_program::pubkey::Pubkey,

    pub spot_market_vault: solana_program::pubkey::Pubkey,

    pub insurance_fund_vault: solana_program::pubkey::Pubkey,

    pub drift_signer: solana_program::pubkey::Pubkey,

    pub state: solana_program::pubkey::Pubkey,

    pub oracle: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl InitializeSpotMarket {
    pub fn instruction(
        &self,
        args: InitializeSpotMarketInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeSpotMarketInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.spot_market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.spot_market_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.spot_market_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.insurance_fund_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.drift_signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeSpotMarketInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeSpotMarketInstructionData {
    discriminator: [u8; 8],
}

impl InitializeSpotMarketInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [234, 196, 128, 44, 94, 15, 48, 201],
        }
    }
}

impl Default for InitializeSpotMarketInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeSpotMarketInstructionArgs {
    pub optimal_utilization: u32,
    pub optimal_borrow_rate: u32,
    pub max_borrow_rate: u32,
    pub oracle_source: OracleSource,
    pub initial_asset_weight: u32,
    pub maintenance_asset_weight: u32,
    pub initial_liability_weight: u32,
    pub maintenance_liability_weight: u32,
    pub imf_factor: u32,
    pub liquidator_fee: u32,
    pub if_liquidation_fee: u32,
    pub active_status: bool,
    pub asset_tier: AssetTier,
    pub scale_initial_asset_weight_start: u64,
    pub withdraw_guard_threshold: u64,
    pub order_tick_size: u64,
    pub order_step_size: u64,
    pub if_total_factor: u32,
    pub name: [u8; 32],
}

/// Instruction builder for `InitializeSpotMarket`.
///
/// ### Accounts:
///
///   0. `[writable]` spot_market
///   1. `[]` spot_market_mint
///   2. `[writable]` spot_market_vault
///   3. `[writable]` insurance_fund_vault
///   4. `[]` drift_signer
///   5. `[writable]` state
///   6. `[]` oracle
///   7. `[writable, signer]` admin
///   8. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct InitializeSpotMarketBuilder {
    spot_market: Option<solana_program::pubkey::Pubkey>,
    spot_market_mint: Option<solana_program::pubkey::Pubkey>,
    spot_market_vault: Option<solana_program::pubkey::Pubkey>,
    insurance_fund_vault: Option<solana_program::pubkey::Pubkey>,
    drift_signer: Option<solana_program::pubkey::Pubkey>,
    state: Option<solana_program::pubkey::Pubkey>,
    oracle: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    optimal_utilization: Option<u32>,
    optimal_borrow_rate: Option<u32>,
    max_borrow_rate: Option<u32>,
    oracle_source: Option<OracleSource>,
    initial_asset_weight: Option<u32>,
    maintenance_asset_weight: Option<u32>,
    initial_liability_weight: Option<u32>,
    maintenance_liability_weight: Option<u32>,
    imf_factor: Option<u32>,
    liquidator_fee: Option<u32>,
    if_liquidation_fee: Option<u32>,
    active_status: Option<bool>,
    asset_tier: Option<AssetTier>,
    scale_initial_asset_weight_start: Option<u64>,
    withdraw_guard_threshold: Option<u64>,
    order_tick_size: Option<u64>,
    order_step_size: Option<u64>,
    if_total_factor: Option<u32>,
    name: Option<[u8; 32]>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeSpotMarketBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn spot_market(&mut self, spot_market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.spot_market = Some(spot_market);
        self
    }

    #[inline(always)]
    pub fn spot_market_mint(
        &mut self,
        spot_market_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.spot_market_mint = Some(spot_market_mint);
        self
    }

    #[inline(always)]
    pub fn spot_market_vault(
        &mut self,
        spot_market_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.spot_market_vault = Some(spot_market_vault);
        self
    }

    #[inline(always)]
    pub fn insurance_fund_vault(
        &mut self,
        insurance_fund_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.insurance_fund_vault = Some(insurance_fund_vault);
        self
    }

    #[inline(always)]
    pub fn drift_signer(&mut self, drift_signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.drift_signer = Some(drift_signer);
        self
    }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_program::pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn optimal_utilization(&mut self, optimal_utilization: u32) -> &mut Self {
        self.optimal_utilization = Some(optimal_utilization);
        self
    }

    #[inline(always)]
    pub fn optimal_borrow_rate(&mut self, optimal_borrow_rate: u32) -> &mut Self {
        self.optimal_borrow_rate = Some(optimal_borrow_rate);
        self
    }

    #[inline(always)]
    pub fn max_borrow_rate(&mut self, max_borrow_rate: u32) -> &mut Self {
        self.max_borrow_rate = Some(max_borrow_rate);
        self
    }

    #[inline(always)]
    pub fn oracle_source(&mut self, oracle_source: OracleSource) -> &mut Self {
        self.oracle_source = Some(oracle_source);
        self
    }

    #[inline(always)]
    pub fn initial_asset_weight(&mut self, initial_asset_weight: u32) -> &mut Self {
        self.initial_asset_weight = Some(initial_asset_weight);
        self
    }

    #[inline(always)]
    pub fn maintenance_asset_weight(&mut self, maintenance_asset_weight: u32) -> &mut Self {
        self.maintenance_asset_weight = Some(maintenance_asset_weight);
        self
    }

    #[inline(always)]
    pub fn initial_liability_weight(&mut self, initial_liability_weight: u32) -> &mut Self {
        self.initial_liability_weight = Some(initial_liability_weight);
        self
    }

    #[inline(always)]
    pub fn maintenance_liability_weight(&mut self, maintenance_liability_weight: u32) -> &mut Self {
        self.maintenance_liability_weight = Some(maintenance_liability_weight);
        self
    }

    #[inline(always)]
    pub fn imf_factor(&mut self, imf_factor: u32) -> &mut Self {
        self.imf_factor = Some(imf_factor);
        self
    }

    #[inline(always)]
    pub fn liquidator_fee(&mut self, liquidator_fee: u32) -> &mut Self {
        self.liquidator_fee = Some(liquidator_fee);
        self
    }

    #[inline(always)]
    pub fn if_liquidation_fee(&mut self, if_liquidation_fee: u32) -> &mut Self {
        self.if_liquidation_fee = Some(if_liquidation_fee);
        self
    }

    #[inline(always)]
    pub fn active_status(&mut self, active_status: bool) -> &mut Self {
        self.active_status = Some(active_status);
        self
    }

    #[inline(always)]
    pub fn asset_tier(&mut self, asset_tier: AssetTier) -> &mut Self {
        self.asset_tier = Some(asset_tier);
        self
    }

    #[inline(always)]
    pub fn scale_initial_asset_weight_start(
        &mut self,
        scale_initial_asset_weight_start: u64,
    ) -> &mut Self {
        self.scale_initial_asset_weight_start = Some(scale_initial_asset_weight_start);
        self
    }

    #[inline(always)]
    pub fn withdraw_guard_threshold(&mut self, withdraw_guard_threshold: u64) -> &mut Self {
        self.withdraw_guard_threshold = Some(withdraw_guard_threshold);
        self
    }

    #[inline(always)]
    pub fn order_tick_size(&mut self, order_tick_size: u64) -> &mut Self {
        self.order_tick_size = Some(order_tick_size);
        self
    }

    #[inline(always)]
    pub fn order_step_size(&mut self, order_step_size: u64) -> &mut Self {
        self.order_step_size = Some(order_step_size);
        self
    }

    #[inline(always)]
    pub fn if_total_factor(&mut self, if_total_factor: u32) -> &mut Self {
        self.if_total_factor = Some(if_total_factor);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: [u8; 32]) -> &mut Self {
        self.name = Some(name);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeSpotMarket {
            spot_market: self.spot_market.expect("spot_market is not set"),
            spot_market_mint: self.spot_market_mint.expect("spot_market_mint is not set"),
            spot_market_vault: self
                .spot_market_vault
                .expect("spot_market_vault is not set"),
            insurance_fund_vault: self
                .insurance_fund_vault
                .expect("insurance_fund_vault is not set"),
            drift_signer: self.drift_signer.expect("drift_signer is not set"),
            state: self.state.expect("state is not set"),
            oracle: self.oracle.expect("oracle is not set"),
            admin: self.admin.expect("admin is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = InitializeSpotMarketInstructionArgs {
            optimal_utilization: self
                .optimal_utilization
                .clone()
                .expect("optimal_utilization is not set"),
            optimal_borrow_rate: self
                .optimal_borrow_rate
                .clone()
                .expect("optimal_borrow_rate is not set"),
            max_borrow_rate: self
                .max_borrow_rate
                .clone()
                .expect("max_borrow_rate is not set"),
            oracle_source: self
                .oracle_source
                .clone()
                .expect("oracle_source is not set"),
            initial_asset_weight: self
                .initial_asset_weight
                .clone()
                .expect("initial_asset_weight is not set"),
            maintenance_asset_weight: self
                .maintenance_asset_weight
                .clone()
                .expect("maintenance_asset_weight is not set"),
            initial_liability_weight: self
                .initial_liability_weight
                .clone()
                .expect("initial_liability_weight is not set"),
            maintenance_liability_weight: self
                .maintenance_liability_weight
                .clone()
                .expect("maintenance_liability_weight is not set"),
            imf_factor: self.imf_factor.clone().expect("imf_factor is not set"),
            liquidator_fee: self
                .liquidator_fee
                .clone()
                .expect("liquidator_fee is not set"),
            if_liquidation_fee: self
                .if_liquidation_fee
                .clone()
                .expect("if_liquidation_fee is not set"),
            active_status: self
                .active_status
                .clone()
                .expect("active_status is not set"),
            asset_tier: self.asset_tier.clone().expect("asset_tier is not set"),
            scale_initial_asset_weight_start: self
                .scale_initial_asset_weight_start
                .clone()
                .expect("scale_initial_asset_weight_start is not set"),
            withdraw_guard_threshold: self
                .withdraw_guard_threshold
                .clone()
                .expect("withdraw_guard_threshold is not set"),
            order_tick_size: self
                .order_tick_size
                .clone()
                .expect("order_tick_size is not set"),
            order_step_size: self
                .order_step_size
                .clone()
                .expect("order_step_size is not set"),
            if_total_factor: self
                .if_total_factor
                .clone()
                .expect("if_total_factor is not set"),
            name: self.name.clone().expect("name is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_spot_market` CPI accounts.
pub struct InitializeSpotMarketCpiAccounts<'a, 'b> {
    pub spot_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub spot_market_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub spot_market_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_fund_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub drift_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_spot_market` CPI instruction.
pub struct InitializeSpotMarketCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub spot_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub spot_market_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub spot_market_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_fund_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub drift_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeSpotMarketInstructionArgs,
}

impl<'a, 'b> InitializeSpotMarketCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeSpotMarketCpiAccounts<'a, 'b>,
        args: InitializeSpotMarketInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            spot_market: accounts.spot_market,
            spot_market_mint: accounts.spot_market_mint,
            spot_market_vault: accounts.spot_market_vault,
            insurance_fund_vault: accounts.insurance_fund_vault,
            drift_signer: accounts.drift_signer,
            state: accounts.state,
            oracle: accounts.oracle,
            admin: accounts.admin,
            rent: accounts.rent,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.spot_market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.spot_market_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.spot_market_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.insurance_fund_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.drift_signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeSpotMarketInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.spot_market.clone());
        account_infos.push(self.spot_market_mint.clone());
        account_infos.push(self.spot_market_vault.clone());
        account_infos.push(self.insurance_fund_vault.clone());
        account_infos.push(self.drift_signer.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeSpotMarket` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` spot_market
///   1. `[]` spot_market_mint
///   2. `[writable]` spot_market_vault
///   3. `[writable]` insurance_fund_vault
///   4. `[]` drift_signer
///   5. `[writable]` state
///   6. `[]` oracle
///   7. `[writable, signer]` admin
///   8. `[]` rent
///   9. `[]` system_program
///   10. `[]` token_program
#[derive(Clone, Debug)]
pub struct InitializeSpotMarketCpiBuilder<'a, 'b> {
    instruction: Box<InitializeSpotMarketCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeSpotMarketCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeSpotMarketCpiBuilderInstruction {
            __program: program,
            spot_market: None,
            spot_market_mint: None,
            spot_market_vault: None,
            insurance_fund_vault: None,
            drift_signer: None,
            state: None,
            oracle: None,
            admin: None,
            rent: None,
            system_program: None,
            token_program: None,
            optimal_utilization: None,
            optimal_borrow_rate: None,
            max_borrow_rate: None,
            oracle_source: None,
            initial_asset_weight: None,
            maintenance_asset_weight: None,
            initial_liability_weight: None,
            maintenance_liability_weight: None,
            imf_factor: None,
            liquidator_fee: None,
            if_liquidation_fee: None,
            active_status: None,
            asset_tier: None,
            scale_initial_asset_weight_start: None,
            withdraw_guard_threshold: None,
            order_tick_size: None,
            order_step_size: None,
            if_total_factor: None,
            name: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn spot_market(
        &mut self,
        spot_market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.spot_market = Some(spot_market);
        self
    }

    #[inline(always)]
    pub fn spot_market_mint(
        &mut self,
        spot_market_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.spot_market_mint = Some(spot_market_mint);
        self
    }

    #[inline(always)]
    pub fn spot_market_vault(
        &mut self,
        spot_market_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.spot_market_vault = Some(spot_market_vault);
        self
    }

    #[inline(always)]
    pub fn insurance_fund_vault(
        &mut self,
        insurance_fund_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.insurance_fund_vault = Some(insurance_fund_vault);
        self
    }

    #[inline(always)]
    pub fn drift_signer(
        &mut self,
        drift_signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.drift_signer = Some(drift_signer);
        self
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn oracle(
        &mut self,
        oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn optimal_utilization(&mut self, optimal_utilization: u32) -> &mut Self {
        self.instruction.optimal_utilization = Some(optimal_utilization);
        self
    }

    #[inline(always)]
    pub fn optimal_borrow_rate(&mut self, optimal_borrow_rate: u32) -> &mut Self {
        self.instruction.optimal_borrow_rate = Some(optimal_borrow_rate);
        self
    }

    #[inline(always)]
    pub fn max_borrow_rate(&mut self, max_borrow_rate: u32) -> &mut Self {
        self.instruction.max_borrow_rate = Some(max_borrow_rate);
        self
    }

    #[inline(always)]
    pub fn oracle_source(&mut self, oracle_source: OracleSource) -> &mut Self {
        self.instruction.oracle_source = Some(oracle_source);
        self
    }

    #[inline(always)]
    pub fn initial_asset_weight(&mut self, initial_asset_weight: u32) -> &mut Self {
        self.instruction.initial_asset_weight = Some(initial_asset_weight);
        self
    }

    #[inline(always)]
    pub fn maintenance_asset_weight(&mut self, maintenance_asset_weight: u32) -> &mut Self {
        self.instruction.maintenance_asset_weight = Some(maintenance_asset_weight);
        self
    }

    #[inline(always)]
    pub fn initial_liability_weight(&mut self, initial_liability_weight: u32) -> &mut Self {
        self.instruction.initial_liability_weight = Some(initial_liability_weight);
        self
    }

    #[inline(always)]
    pub fn maintenance_liability_weight(&mut self, maintenance_liability_weight: u32) -> &mut Self {
        self.instruction.maintenance_liability_weight = Some(maintenance_liability_weight);
        self
    }

    #[inline(always)]
    pub fn imf_factor(&mut self, imf_factor: u32) -> &mut Self {
        self.instruction.imf_factor = Some(imf_factor);
        self
    }

    #[inline(always)]
    pub fn liquidator_fee(&mut self, liquidator_fee: u32) -> &mut Self {
        self.instruction.liquidator_fee = Some(liquidator_fee);
        self
    }

    #[inline(always)]
    pub fn if_liquidation_fee(&mut self, if_liquidation_fee: u32) -> &mut Self {
        self.instruction.if_liquidation_fee = Some(if_liquidation_fee);
        self
    }

    #[inline(always)]
    pub fn active_status(&mut self, active_status: bool) -> &mut Self {
        self.instruction.active_status = Some(active_status);
        self
    }

    #[inline(always)]
    pub fn asset_tier(&mut self, asset_tier: AssetTier) -> &mut Self {
        self.instruction.asset_tier = Some(asset_tier);
        self
    }

    #[inline(always)]
    pub fn scale_initial_asset_weight_start(
        &mut self,
        scale_initial_asset_weight_start: u64,
    ) -> &mut Self {
        self.instruction.scale_initial_asset_weight_start = Some(scale_initial_asset_weight_start);
        self
    }

    #[inline(always)]
    pub fn withdraw_guard_threshold(&mut self, withdraw_guard_threshold: u64) -> &mut Self {
        self.instruction.withdraw_guard_threshold = Some(withdraw_guard_threshold);
        self
    }

    #[inline(always)]
    pub fn order_tick_size(&mut self, order_tick_size: u64) -> &mut Self {
        self.instruction.order_tick_size = Some(order_tick_size);
        self
    }

    #[inline(always)]
    pub fn order_step_size(&mut self, order_step_size: u64) -> &mut Self {
        self.instruction.order_step_size = Some(order_step_size);
        self
    }

    #[inline(always)]
    pub fn if_total_factor(&mut self, if_total_factor: u32) -> &mut Self {
        self.instruction.if_total_factor = Some(if_total_factor);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: [u8; 32]) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeSpotMarketInstructionArgs {
            optimal_utilization: self
                .instruction
                .optimal_utilization
                .clone()
                .expect("optimal_utilization is not set"),
            optimal_borrow_rate: self
                .instruction
                .optimal_borrow_rate
                .clone()
                .expect("optimal_borrow_rate is not set"),
            max_borrow_rate: self
                .instruction
                .max_borrow_rate
                .clone()
                .expect("max_borrow_rate is not set"),
            oracle_source: self
                .instruction
                .oracle_source
                .clone()
                .expect("oracle_source is not set"),
            initial_asset_weight: self
                .instruction
                .initial_asset_weight
                .clone()
                .expect("initial_asset_weight is not set"),
            maintenance_asset_weight: self
                .instruction
                .maintenance_asset_weight
                .clone()
                .expect("maintenance_asset_weight is not set"),
            initial_liability_weight: self
                .instruction
                .initial_liability_weight
                .clone()
                .expect("initial_liability_weight is not set"),
            maintenance_liability_weight: self
                .instruction
                .maintenance_liability_weight
                .clone()
                .expect("maintenance_liability_weight is not set"),
            imf_factor: self
                .instruction
                .imf_factor
                .clone()
                .expect("imf_factor is not set"),
            liquidator_fee: self
                .instruction
                .liquidator_fee
                .clone()
                .expect("liquidator_fee is not set"),
            if_liquidation_fee: self
                .instruction
                .if_liquidation_fee
                .clone()
                .expect("if_liquidation_fee is not set"),
            active_status: self
                .instruction
                .active_status
                .clone()
                .expect("active_status is not set"),
            asset_tier: self
                .instruction
                .asset_tier
                .clone()
                .expect("asset_tier is not set"),
            scale_initial_asset_weight_start: self
                .instruction
                .scale_initial_asset_weight_start
                .clone()
                .expect("scale_initial_asset_weight_start is not set"),
            withdraw_guard_threshold: self
                .instruction
                .withdraw_guard_threshold
                .clone()
                .expect("withdraw_guard_threshold is not set"),
            order_tick_size: self
                .instruction
                .order_tick_size
                .clone()
                .expect("order_tick_size is not set"),
            order_step_size: self
                .instruction
                .order_step_size
                .clone()
                .expect("order_step_size is not set"),
            if_total_factor: self
                .instruction
                .if_total_factor
                .clone()
                .expect("if_total_factor is not set"),
            name: self.instruction.name.clone().expect("name is not set"),
        };
        let instruction = InitializeSpotMarketCpi {
            __program: self.instruction.__program,

            spot_market: self
                .instruction
                .spot_market
                .expect("spot_market is not set"),

            spot_market_mint: self
                .instruction
                .spot_market_mint
                .expect("spot_market_mint is not set"),

            spot_market_vault: self
                .instruction
                .spot_market_vault
                .expect("spot_market_vault is not set"),

            insurance_fund_vault: self
                .instruction
                .insurance_fund_vault
                .expect("insurance_fund_vault is not set"),

            drift_signer: self
                .instruction
                .drift_signer
                .expect("drift_signer is not set"),

            state: self.instruction.state.expect("state is not set"),

            oracle: self.instruction.oracle.expect("oracle is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeSpotMarketCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    spot_market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    spot_market_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    spot_market_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    insurance_fund_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    drift_signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    optimal_utilization: Option<u32>,
    optimal_borrow_rate: Option<u32>,
    max_borrow_rate: Option<u32>,
    oracle_source: Option<OracleSource>,
    initial_asset_weight: Option<u32>,
    maintenance_asset_weight: Option<u32>,
    initial_liability_weight: Option<u32>,
    maintenance_liability_weight: Option<u32>,
    imf_factor: Option<u32>,
    liquidator_fee: Option<u32>,
    if_liquidation_fee: Option<u32>,
    active_status: Option<bool>,
    asset_tier: Option<AssetTier>,
    scale_initial_asset_weight_start: Option<u64>,
    withdraw_guard_threshold: Option<u64>,
    order_tick_size: Option<u64>,
    order_step_size: Option<u64>,
    if_total_factor: Option<u32>,
    name: Option<[u8; 32]>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
