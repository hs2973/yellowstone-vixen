//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct LiquidatePerp {
    pub state: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub liquidator: solana_program::pubkey::Pubkey,

    pub liquidator_stats: solana_program::pubkey::Pubkey,

    pub user: solana_program::pubkey::Pubkey,

    pub user_stats: solana_program::pubkey::Pubkey,
}

impl LiquidatePerp {
    pub fn instruction(
        &self,
        args: LiquidatePerpInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: LiquidatePerpInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liquidator,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liquidator_stats,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_stats,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&LiquidatePerpInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LiquidatePerpInstructionData {
    discriminator: [u8; 8],
}

impl LiquidatePerpInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [75, 35, 119, 247, 191, 18, 139, 2],
        }
    }
}

impl Default for LiquidatePerpInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LiquidatePerpInstructionArgs {
    pub market_index: u16,
    pub liquidator_max_base_asset_amount: u64,
    pub limit_price: Option<u64>,
}

/// Instruction builder for `LiquidatePerp`.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[signer]` authority
///   2. `[writable]` liquidator
///   3. `[writable]` liquidator_stats
///   4. `[writable]` user
///   5. `[writable]` user_stats
#[derive(Clone, Debug, Default)]
pub struct LiquidatePerpBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    liquidator: Option<solana_program::pubkey::Pubkey>,
    liquidator_stats: Option<solana_program::pubkey::Pubkey>,
    user: Option<solana_program::pubkey::Pubkey>,
    user_stats: Option<solana_program::pubkey::Pubkey>,
    market_index: Option<u16>,
    liquidator_max_base_asset_amount: Option<u64>,
    limit_price: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl LiquidatePerpBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn liquidator(&mut self, liquidator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.liquidator = Some(liquidator);
        self
    }

    #[inline(always)]
    pub fn liquidator_stats(
        &mut self,
        liquidator_stats: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liquidator_stats = Some(liquidator_stats);
        self
    }

    #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user = Some(user);
        self
    }

    #[inline(always)]
    pub fn user_stats(&mut self, user_stats: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_stats = Some(user_stats);
        self
    }

    #[inline(always)]
    pub fn market_index(&mut self, market_index: u16) -> &mut Self {
        self.market_index = Some(market_index);
        self
    }

    #[inline(always)]
    pub fn liquidator_max_base_asset_amount(
        &mut self,
        liquidator_max_base_asset_amount: u64,
    ) -> &mut Self {
        self.liquidator_max_base_asset_amount = Some(liquidator_max_base_asset_amount);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn limit_price(&mut self, limit_price: u64) -> &mut Self {
        self.limit_price = Some(limit_price);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = LiquidatePerp {
            state: self.state.expect("state is not set"),
            authority: self.authority.expect("authority is not set"),
            liquidator: self.liquidator.expect("liquidator is not set"),
            liquidator_stats: self.liquidator_stats.expect("liquidator_stats is not set"),
            user: self.user.expect("user is not set"),
            user_stats: self.user_stats.expect("user_stats is not set"),
        };
        let args = LiquidatePerpInstructionArgs {
            market_index: self.market_index.clone().expect("market_index is not set"),
            liquidator_max_base_asset_amount: self
                .liquidator_max_base_asset_amount
                .clone()
                .expect("liquidator_max_base_asset_amount is not set"),
            limit_price: self.limit_price.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `liquidate_perp` CPI accounts.
pub struct LiquidatePerpCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidator: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidator_stats: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_stats: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `liquidate_perp` CPI instruction.
pub struct LiquidatePerpCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidator: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidator_stats: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_stats: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: LiquidatePerpInstructionArgs,
}

impl<'a, 'b> LiquidatePerpCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: LiquidatePerpCpiAccounts<'a, 'b>,
        args: LiquidatePerpInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            authority: accounts.authority,
            liquidator: accounts.liquidator,
            liquidator_stats: accounts.liquidator_stats,
            user: accounts.user,
            user_stats: accounts.user_stats,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liquidator.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liquidator_stats.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_stats.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&LiquidatePerpInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DRIFT_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.liquidator.clone());
        account_infos.push(self.liquidator_stats.clone());
        account_infos.push(self.user.clone());
        account_infos.push(self.user_stats.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `LiquidatePerp` via CPI.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[signer]` authority
///   2. `[writable]` liquidator
///   3. `[writable]` liquidator_stats
///   4. `[writable]` user
///   5. `[writable]` user_stats
#[derive(Clone, Debug)]
pub struct LiquidatePerpCpiBuilder<'a, 'b> {
    instruction: Box<LiquidatePerpCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LiquidatePerpCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(LiquidatePerpCpiBuilderInstruction {
            __program: program,
            state: None,
            authority: None,
            liquidator: None,
            liquidator_stats: None,
            user: None,
            user_stats: None,
            market_index: None,
            liquidator_max_base_asset_amount: None,
            limit_price: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn liquidator(
        &mut self,
        liquidator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liquidator = Some(liquidator);
        self
    }

    #[inline(always)]
    pub fn liquidator_stats(
        &mut self,
        liquidator_stats: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liquidator_stats = Some(liquidator_stats);
        self
    }

    #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.user = Some(user);
        self
    }

    #[inline(always)]
    pub fn user_stats(
        &mut self,
        user_stats: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_stats = Some(user_stats);
        self
    }

    #[inline(always)]
    pub fn market_index(&mut self, market_index: u16) -> &mut Self {
        self.instruction.market_index = Some(market_index);
        self
    }

    #[inline(always)]
    pub fn liquidator_max_base_asset_amount(
        &mut self,
        liquidator_max_base_asset_amount: u64,
    ) -> &mut Self {
        self.instruction.liquidator_max_base_asset_amount = Some(liquidator_max_base_asset_amount);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn limit_price(&mut self, limit_price: u64) -> &mut Self {
        self.instruction.limit_price = Some(limit_price);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = LiquidatePerpInstructionArgs {
            market_index: self
                .instruction
                .market_index
                .clone()
                .expect("market_index is not set"),
            liquidator_max_base_asset_amount: self
                .instruction
                .liquidator_max_base_asset_amount
                .clone()
                .expect("liquidator_max_base_asset_amount is not set"),
            limit_price: self.instruction.limit_price.clone(),
        };
        let instruction = LiquidatePerpCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            liquidator: self.instruction.liquidator.expect("liquidator is not set"),

            liquidator_stats: self
                .instruction
                .liquidator_stats
                .expect("liquidator_stats is not set"),

            user: self.instruction.user.expect("user is not set"),

            user_stats: self.instruction.user_stats.expect("user_stats is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct LiquidatePerpCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liquidator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liquidator_stats: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_stats: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_index: Option<u16>,
    liquidator_max_base_asset_amount: Option<u64>,
    limit_price: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
