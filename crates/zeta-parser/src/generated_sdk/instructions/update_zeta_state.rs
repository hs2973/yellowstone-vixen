//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct UpdateZetaState {
    pub state: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,
}

impl UpdateZetaState {
    pub fn instruction(
        &self,
        args: UpdateZetaStateInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateZetaStateInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.admin, true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&UpdateZetaStateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateZetaStateInstructionData {
    discriminator: [u8; 8],
}

impl UpdateZetaStateInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [104, 182, 20, 187, 3, 164, 60, 3],
        }
    }
}

impl Default for UpdateZetaStateInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateZetaStateInstructionArgs {
    pub strike_initialization_threshold_seconds: u32,
    pub pricing_frequency_seconds: u32,
    pub liquidator_liquidation_percentage: u32,
    pub insurance_vault_liquidation_percentage: u32,
    pub native_d1_trade_fee_percentage: u64,
    pub native_d1_underlying_fee_percentage: u64,
    pub native_option_trade_fee_percentage: u64,
    pub native_option_underlying_fee_percentage: u64,
    pub native_whitelist_underlying_fee_percentage: u64,
    pub native_deposit_limit: u64,
    pub expiration_threshold_seconds: u32,
    pub position_movement_fee_bps: u8,
    pub margin_concession_percentage: u8,
    pub max_perp_delta_age_seconds: u16,
    pub native_withdraw_limit: u64,
    pub withdraw_limit_epoch_seconds: u32,
    pub native_open_interest_limit: u64,
}

/// Instruction builder for `UpdateZetaState`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[signer]` admin
#[derive(Clone, Debug, Default)]
pub struct UpdateZetaStateBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    strike_initialization_threshold_seconds: Option<u32>,
    pricing_frequency_seconds: Option<u32>,
    liquidator_liquidation_percentage: Option<u32>,
    insurance_vault_liquidation_percentage: Option<u32>,
    native_d1_trade_fee_percentage: Option<u64>,
    native_d1_underlying_fee_percentage: Option<u64>,
    native_option_trade_fee_percentage: Option<u64>,
    native_option_underlying_fee_percentage: Option<u64>,
    native_whitelist_underlying_fee_percentage: Option<u64>,
    native_deposit_limit: Option<u64>,
    expiration_threshold_seconds: Option<u32>,
    position_movement_fee_bps: Option<u8>,
    margin_concession_percentage: Option<u8>,
    max_perp_delta_age_seconds: Option<u16>,
    native_withdraw_limit: Option<u64>,
    withdraw_limit_epoch_seconds: Option<u32>,
    native_open_interest_limit: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateZetaStateBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn strike_initialization_threshold_seconds(
        &mut self,
        strike_initialization_threshold_seconds: u32,
    ) -> &mut Self {
        self.strike_initialization_threshold_seconds =
            Some(strike_initialization_threshold_seconds);
        self
    }

    #[inline(always)]
    pub fn pricing_frequency_seconds(&mut self, pricing_frequency_seconds: u32) -> &mut Self {
        self.pricing_frequency_seconds = Some(pricing_frequency_seconds);
        self
    }

    #[inline(always)]
    pub fn liquidator_liquidation_percentage(
        &mut self,
        liquidator_liquidation_percentage: u32,
    ) -> &mut Self {
        self.liquidator_liquidation_percentage = Some(liquidator_liquidation_percentage);
        self
    }

    #[inline(always)]
    pub fn insurance_vault_liquidation_percentage(
        &mut self,
        insurance_vault_liquidation_percentage: u32,
    ) -> &mut Self {
        self.insurance_vault_liquidation_percentage = Some(insurance_vault_liquidation_percentage);
        self
    }

    #[inline(always)]
    pub fn native_d1_trade_fee_percentage(
        &mut self,
        native_d1_trade_fee_percentage: u64,
    ) -> &mut Self {
        self.native_d1_trade_fee_percentage = Some(native_d1_trade_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_d1_underlying_fee_percentage(
        &mut self,
        native_d1_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.native_d1_underlying_fee_percentage = Some(native_d1_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_option_trade_fee_percentage(
        &mut self,
        native_option_trade_fee_percentage: u64,
    ) -> &mut Self {
        self.native_option_trade_fee_percentage = Some(native_option_trade_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_option_underlying_fee_percentage(
        &mut self,
        native_option_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.native_option_underlying_fee_percentage =
            Some(native_option_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_whitelist_underlying_fee_percentage(
        &mut self,
        native_whitelist_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.native_whitelist_underlying_fee_percentage =
            Some(native_whitelist_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_deposit_limit(&mut self, native_deposit_limit: u64) -> &mut Self {
        self.native_deposit_limit = Some(native_deposit_limit);
        self
    }

    #[inline(always)]
    pub fn expiration_threshold_seconds(&mut self, expiration_threshold_seconds: u32) -> &mut Self {
        self.expiration_threshold_seconds = Some(expiration_threshold_seconds);
        self
    }

    #[inline(always)]
    pub fn position_movement_fee_bps(&mut self, position_movement_fee_bps: u8) -> &mut Self {
        self.position_movement_fee_bps = Some(position_movement_fee_bps);
        self
    }

    #[inline(always)]
    pub fn margin_concession_percentage(&mut self, margin_concession_percentage: u8) -> &mut Self {
        self.margin_concession_percentage = Some(margin_concession_percentage);
        self
    }

    #[inline(always)]
    pub fn max_perp_delta_age_seconds(&mut self, max_perp_delta_age_seconds: u16) -> &mut Self {
        self.max_perp_delta_age_seconds = Some(max_perp_delta_age_seconds);
        self
    }

    #[inline(always)]
    pub fn native_withdraw_limit(&mut self, native_withdraw_limit: u64) -> &mut Self {
        self.native_withdraw_limit = Some(native_withdraw_limit);
        self
    }

    #[inline(always)]
    pub fn withdraw_limit_epoch_seconds(&mut self, withdraw_limit_epoch_seconds: u32) -> &mut Self {
        self.withdraw_limit_epoch_seconds = Some(withdraw_limit_epoch_seconds);
        self
    }

    #[inline(always)]
    pub fn native_open_interest_limit(&mut self, native_open_interest_limit: u64) -> &mut Self {
        self.native_open_interest_limit = Some(native_open_interest_limit);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateZetaState {
            state: self.state.expect("state is not set"),
            admin: self.admin.expect("admin is not set"),
        };
        let args = UpdateZetaStateInstructionArgs {
            strike_initialization_threshold_seconds: self
                .strike_initialization_threshold_seconds
                .clone()
                .expect("strike_initialization_threshold_seconds is not set"),
            pricing_frequency_seconds: self
                .pricing_frequency_seconds
                .clone()
                .expect("pricing_frequency_seconds is not set"),
            liquidator_liquidation_percentage: self
                .liquidator_liquidation_percentage
                .clone()
                .expect("liquidator_liquidation_percentage is not set"),
            insurance_vault_liquidation_percentage: self
                .insurance_vault_liquidation_percentage
                .clone()
                .expect("insurance_vault_liquidation_percentage is not set"),
            native_d1_trade_fee_percentage: self
                .native_d1_trade_fee_percentage
                .clone()
                .expect("native_d1_trade_fee_percentage is not set"),
            native_d1_underlying_fee_percentage: self
                .native_d1_underlying_fee_percentage
                .clone()
                .expect("native_d1_underlying_fee_percentage is not set"),
            native_option_trade_fee_percentage: self
                .native_option_trade_fee_percentage
                .clone()
                .expect("native_option_trade_fee_percentage is not set"),
            native_option_underlying_fee_percentage: self
                .native_option_underlying_fee_percentage
                .clone()
                .expect("native_option_underlying_fee_percentage is not set"),
            native_whitelist_underlying_fee_percentage: self
                .native_whitelist_underlying_fee_percentage
                .clone()
                .expect("native_whitelist_underlying_fee_percentage is not set"),
            native_deposit_limit: self
                .native_deposit_limit
                .clone()
                .expect("native_deposit_limit is not set"),
            expiration_threshold_seconds: self
                .expiration_threshold_seconds
                .clone()
                .expect("expiration_threshold_seconds is not set"),
            position_movement_fee_bps: self
                .position_movement_fee_bps
                .clone()
                .expect("position_movement_fee_bps is not set"),
            margin_concession_percentage: self
                .margin_concession_percentage
                .clone()
                .expect("margin_concession_percentage is not set"),
            max_perp_delta_age_seconds: self
                .max_perp_delta_age_seconds
                .clone()
                .expect("max_perp_delta_age_seconds is not set"),
            native_withdraw_limit: self
                .native_withdraw_limit
                .clone()
                .expect("native_withdraw_limit is not set"),
            withdraw_limit_epoch_seconds: self
                .withdraw_limit_epoch_seconds
                .clone()
                .expect("withdraw_limit_epoch_seconds is not set"),
            native_open_interest_limit: self
                .native_open_interest_limit
                .clone()
                .expect("native_open_interest_limit is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_zeta_state` CPI accounts.
pub struct UpdateZetaStateCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_zeta_state` CPI instruction.
pub struct UpdateZetaStateCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UpdateZetaStateInstructionArgs,
}

impl<'a, 'b> UpdateZetaStateCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdateZetaStateCpiAccounts<'a, 'b>,
        args: UpdateZetaStateInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            admin: accounts.admin,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.admin.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&UpdateZetaStateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.admin.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateZetaState` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[signer]` admin
#[derive(Clone, Debug)]
pub struct UpdateZetaStateCpiBuilder<'a, 'b> {
    instruction: Box<UpdateZetaStateCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateZetaStateCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateZetaStateCpiBuilderInstruction {
            __program: program,
            state: None,
            admin: None,
            strike_initialization_threshold_seconds: None,
            pricing_frequency_seconds: None,
            liquidator_liquidation_percentage: None,
            insurance_vault_liquidation_percentage: None,
            native_d1_trade_fee_percentage: None,
            native_d1_underlying_fee_percentage: None,
            native_option_trade_fee_percentage: None,
            native_option_underlying_fee_percentage: None,
            native_whitelist_underlying_fee_percentage: None,
            native_deposit_limit: None,
            expiration_threshold_seconds: None,
            position_movement_fee_bps: None,
            margin_concession_percentage: None,
            max_perp_delta_age_seconds: None,
            native_withdraw_limit: None,
            withdraw_limit_epoch_seconds: None,
            native_open_interest_limit: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn strike_initialization_threshold_seconds(
        &mut self,
        strike_initialization_threshold_seconds: u32,
    ) -> &mut Self {
        self.instruction.strike_initialization_threshold_seconds =
            Some(strike_initialization_threshold_seconds);
        self
    }

    #[inline(always)]
    pub fn pricing_frequency_seconds(&mut self, pricing_frequency_seconds: u32) -> &mut Self {
        self.instruction.pricing_frequency_seconds = Some(pricing_frequency_seconds);
        self
    }

    #[inline(always)]
    pub fn liquidator_liquidation_percentage(
        &mut self,
        liquidator_liquidation_percentage: u32,
    ) -> &mut Self {
        self.instruction.liquidator_liquidation_percentage =
            Some(liquidator_liquidation_percentage);
        self
    }

    #[inline(always)]
    pub fn insurance_vault_liquidation_percentage(
        &mut self,
        insurance_vault_liquidation_percentage: u32,
    ) -> &mut Self {
        self.instruction.insurance_vault_liquidation_percentage =
            Some(insurance_vault_liquidation_percentage);
        self
    }

    #[inline(always)]
    pub fn native_d1_trade_fee_percentage(
        &mut self,
        native_d1_trade_fee_percentage: u64,
    ) -> &mut Self {
        self.instruction.native_d1_trade_fee_percentage = Some(native_d1_trade_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_d1_underlying_fee_percentage(
        &mut self,
        native_d1_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.instruction.native_d1_underlying_fee_percentage =
            Some(native_d1_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_option_trade_fee_percentage(
        &mut self,
        native_option_trade_fee_percentage: u64,
    ) -> &mut Self {
        self.instruction.native_option_trade_fee_percentage =
            Some(native_option_trade_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_option_underlying_fee_percentage(
        &mut self,
        native_option_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.instruction.native_option_underlying_fee_percentage =
            Some(native_option_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_whitelist_underlying_fee_percentage(
        &mut self,
        native_whitelist_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.instruction.native_whitelist_underlying_fee_percentage =
            Some(native_whitelist_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_deposit_limit(&mut self, native_deposit_limit: u64) -> &mut Self {
        self.instruction.native_deposit_limit = Some(native_deposit_limit);
        self
    }

    #[inline(always)]
    pub fn expiration_threshold_seconds(&mut self, expiration_threshold_seconds: u32) -> &mut Self {
        self.instruction.expiration_threshold_seconds = Some(expiration_threshold_seconds);
        self
    }

    #[inline(always)]
    pub fn position_movement_fee_bps(&mut self, position_movement_fee_bps: u8) -> &mut Self {
        self.instruction.position_movement_fee_bps = Some(position_movement_fee_bps);
        self
    }

    #[inline(always)]
    pub fn margin_concession_percentage(&mut self, margin_concession_percentage: u8) -> &mut Self {
        self.instruction.margin_concession_percentage = Some(margin_concession_percentage);
        self
    }

    #[inline(always)]
    pub fn max_perp_delta_age_seconds(&mut self, max_perp_delta_age_seconds: u16) -> &mut Self {
        self.instruction.max_perp_delta_age_seconds = Some(max_perp_delta_age_seconds);
        self
    }

    #[inline(always)]
    pub fn native_withdraw_limit(&mut self, native_withdraw_limit: u64) -> &mut Self {
        self.instruction.native_withdraw_limit = Some(native_withdraw_limit);
        self
    }

    #[inline(always)]
    pub fn withdraw_limit_epoch_seconds(&mut self, withdraw_limit_epoch_seconds: u32) -> &mut Self {
        self.instruction.withdraw_limit_epoch_seconds = Some(withdraw_limit_epoch_seconds);
        self
    }

    #[inline(always)]
    pub fn native_open_interest_limit(&mut self, native_open_interest_limit: u64) -> &mut Self {
        self.instruction.native_open_interest_limit = Some(native_open_interest_limit);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = UpdateZetaStateInstructionArgs {
            strike_initialization_threshold_seconds: self
                .instruction
                .strike_initialization_threshold_seconds
                .clone()
                .expect("strike_initialization_threshold_seconds is not set"),
            pricing_frequency_seconds: self
                .instruction
                .pricing_frequency_seconds
                .clone()
                .expect("pricing_frequency_seconds is not set"),
            liquidator_liquidation_percentage: self
                .instruction
                .liquidator_liquidation_percentage
                .clone()
                .expect("liquidator_liquidation_percentage is not set"),
            insurance_vault_liquidation_percentage: self
                .instruction
                .insurance_vault_liquidation_percentage
                .clone()
                .expect("insurance_vault_liquidation_percentage is not set"),
            native_d1_trade_fee_percentage: self
                .instruction
                .native_d1_trade_fee_percentage
                .clone()
                .expect("native_d1_trade_fee_percentage is not set"),
            native_d1_underlying_fee_percentage: self
                .instruction
                .native_d1_underlying_fee_percentage
                .clone()
                .expect("native_d1_underlying_fee_percentage is not set"),
            native_option_trade_fee_percentage: self
                .instruction
                .native_option_trade_fee_percentage
                .clone()
                .expect("native_option_trade_fee_percentage is not set"),
            native_option_underlying_fee_percentage: self
                .instruction
                .native_option_underlying_fee_percentage
                .clone()
                .expect("native_option_underlying_fee_percentage is not set"),
            native_whitelist_underlying_fee_percentage: self
                .instruction
                .native_whitelist_underlying_fee_percentage
                .clone()
                .expect("native_whitelist_underlying_fee_percentage is not set"),
            native_deposit_limit: self
                .instruction
                .native_deposit_limit
                .clone()
                .expect("native_deposit_limit is not set"),
            expiration_threshold_seconds: self
                .instruction
                .expiration_threshold_seconds
                .clone()
                .expect("expiration_threshold_seconds is not set"),
            position_movement_fee_bps: self
                .instruction
                .position_movement_fee_bps
                .clone()
                .expect("position_movement_fee_bps is not set"),
            margin_concession_percentage: self
                .instruction
                .margin_concession_percentage
                .clone()
                .expect("margin_concession_percentage is not set"),
            max_perp_delta_age_seconds: self
                .instruction
                .max_perp_delta_age_seconds
                .clone()
                .expect("max_perp_delta_age_seconds is not set"),
            native_withdraw_limit: self
                .instruction
                .native_withdraw_limit
                .clone()
                .expect("native_withdraw_limit is not set"),
            withdraw_limit_epoch_seconds: self
                .instruction
                .withdraw_limit_epoch_seconds
                .clone()
                .expect("withdraw_limit_epoch_seconds is not set"),
            native_open_interest_limit: self
                .instruction
                .native_open_interest_limit
                .clone()
                .expect("native_open_interest_limit is not set"),
        };
        let instruction = UpdateZetaStateCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            admin: self.instruction.admin.expect("admin is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdateZetaStateCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strike_initialization_threshold_seconds: Option<u32>,
    pricing_frequency_seconds: Option<u32>,
    liquidator_liquidation_percentage: Option<u32>,
    insurance_vault_liquidation_percentage: Option<u32>,
    native_d1_trade_fee_percentage: Option<u64>,
    native_d1_underlying_fee_percentage: Option<u64>,
    native_option_trade_fee_percentage: Option<u64>,
    native_option_underlying_fee_percentage: Option<u64>,
    native_whitelist_underlying_fee_percentage: Option<u64>,
    native_deposit_limit: Option<u64>,
    expiration_threshold_seconds: Option<u32>,
    position_movement_fee_bps: Option<u8>,
    margin_concession_percentage: Option<u8>,
    max_perp_delta_age_seconds: Option<u16>,
    native_withdraw_limit: Option<u64>,
    withdraw_limit_epoch_seconds: Option<u32>,
    native_open_interest_limit: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
