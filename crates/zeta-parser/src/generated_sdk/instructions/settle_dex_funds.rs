//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct SettleDexFunds {
    pub state: solana_program::pubkey::Pubkey,

    pub market: solana_program::pubkey::Pubkey,

    pub zeta_base_vault: solana_program::pubkey::Pubkey,

    pub zeta_quote_vault: solana_program::pubkey::Pubkey,

    pub dex_base_vault: solana_program::pubkey::Pubkey,

    pub dex_quote_vault: solana_program::pubkey::Pubkey,

    pub vault_owner: solana_program::pubkey::Pubkey,

    pub mint_authority: solana_program::pubkey::Pubkey,

    pub serum_authority: solana_program::pubkey::Pubkey,

    pub dex_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl SettleDexFunds {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.zeta_base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.zeta_quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.dex_base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.dex_quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_owner,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.serum_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.dex_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&SettleDexFundsInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SettleDexFundsInstructionData {
    discriminator: [u8; 8],
}

impl SettleDexFundsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [165, 103, 142, 38, 211, 166, 14, 226],
        }
    }
}

impl Default for SettleDexFundsInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `SettleDexFunds`.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[writable]` market
///   2. `[writable]` zeta_base_vault
///   3. `[writable]` zeta_quote_vault
///   4. `[writable]` dex_base_vault
///   5. `[writable]` dex_quote_vault
///   6. `[]` vault_owner
///   7. `[]` mint_authority
///   8. `[]` serum_authority
///   9. `[]` dex_program
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct SettleDexFundsBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    market: Option<solana_program::pubkey::Pubkey>,
    zeta_base_vault: Option<solana_program::pubkey::Pubkey>,
    zeta_quote_vault: Option<solana_program::pubkey::Pubkey>,
    dex_base_vault: Option<solana_program::pubkey::Pubkey>,
    dex_quote_vault: Option<solana_program::pubkey::Pubkey>,
    vault_owner: Option<solana_program::pubkey::Pubkey>,
    mint_authority: Option<solana_program::pubkey::Pubkey>,
    serum_authority: Option<solana_program::pubkey::Pubkey>,
    dex_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SettleDexFundsBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn zeta_base_vault(
        &mut self,
        zeta_base_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.zeta_base_vault = Some(zeta_base_vault);
        self
    }

    #[inline(always)]
    pub fn zeta_quote_vault(
        &mut self,
        zeta_quote_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.zeta_quote_vault = Some(zeta_quote_vault);
        self
    }

    #[inline(always)]
    pub fn dex_base_vault(&mut self, dex_base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.dex_base_vault = Some(dex_base_vault);
        self
    }

    #[inline(always)]
    pub fn dex_quote_vault(
        &mut self,
        dex_quote_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.dex_quote_vault = Some(dex_quote_vault);
        self
    }

    #[inline(always)]
    pub fn vault_owner(&mut self, vault_owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault_owner = Some(vault_owner);
        self
    }

    #[inline(always)]
    pub fn mint_authority(&mut self, mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_authority = Some(mint_authority);
        self
    }

    #[inline(always)]
    pub fn serum_authority(
        &mut self,
        serum_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.serum_authority = Some(serum_authority);
        self
    }

    #[inline(always)]
    pub fn dex_program(&mut self, dex_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.dex_program = Some(dex_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SettleDexFunds {
            state: self.state.expect("state is not set"),
            market: self.market.expect("market is not set"),
            zeta_base_vault: self.zeta_base_vault.expect("zeta_base_vault is not set"),
            zeta_quote_vault: self.zeta_quote_vault.expect("zeta_quote_vault is not set"),
            dex_base_vault: self.dex_base_vault.expect("dex_base_vault is not set"),
            dex_quote_vault: self.dex_quote_vault.expect("dex_quote_vault is not set"),
            vault_owner: self.vault_owner.expect("vault_owner is not set"),
            mint_authority: self.mint_authority.expect("mint_authority is not set"),
            serum_authority: self.serum_authority.expect("serum_authority is not set"),
            dex_program: self.dex_program.expect("dex_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `settle_dex_funds` CPI accounts.
pub struct SettleDexFundsCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `settle_dex_funds` CPI instruction.
pub struct SettleDexFundsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> SettleDexFundsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SettleDexFundsCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            market: accounts.market,
            zeta_base_vault: accounts.zeta_base_vault,
            zeta_quote_vault: accounts.zeta_quote_vault,
            dex_base_vault: accounts.dex_base_vault,
            dex_quote_vault: accounts.dex_quote_vault,
            vault_owner: accounts.vault_owner,
            mint_authority: accounts.mint_authority,
            serum_authority: accounts.serum_authority,
            dex_program: accounts.dex_program,
            token_program: accounts.token_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.zeta_base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.zeta_quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dex_base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dex_quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.serum_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.dex_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&SettleDexFundsInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.zeta_base_vault.clone());
        account_infos.push(self.zeta_quote_vault.clone());
        account_infos.push(self.dex_base_vault.clone());
        account_infos.push(self.dex_quote_vault.clone());
        account_infos.push(self.vault_owner.clone());
        account_infos.push(self.mint_authority.clone());
        account_infos.push(self.serum_authority.clone());
        account_infos.push(self.dex_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SettleDexFunds` via CPI.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[writable]` market
///   2. `[writable]` zeta_base_vault
///   3. `[writable]` zeta_quote_vault
///   4. `[writable]` dex_base_vault
///   5. `[writable]` dex_quote_vault
///   6. `[]` vault_owner
///   7. `[]` mint_authority
///   8. `[]` serum_authority
///   9. `[]` dex_program
///   10. `[]` token_program
#[derive(Clone, Debug)]
pub struct SettleDexFundsCpiBuilder<'a, 'b> {
    instruction: Box<SettleDexFundsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SettleDexFundsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SettleDexFundsCpiBuilderInstruction {
            __program: program,
            state: None,
            market: None,
            zeta_base_vault: None,
            zeta_quote_vault: None,
            dex_base_vault: None,
            dex_quote_vault: None,
            vault_owner: None,
            mint_authority: None,
            serum_authority: None,
            dex_program: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn zeta_base_vault(
        &mut self,
        zeta_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.zeta_base_vault = Some(zeta_base_vault);
        self
    }

    #[inline(always)]
    pub fn zeta_quote_vault(
        &mut self,
        zeta_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.zeta_quote_vault = Some(zeta_quote_vault);
        self
    }

    #[inline(always)]
    pub fn dex_base_vault(
        &mut self,
        dex_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dex_base_vault = Some(dex_base_vault);
        self
    }

    #[inline(always)]
    pub fn dex_quote_vault(
        &mut self,
        dex_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dex_quote_vault = Some(dex_quote_vault);
        self
    }

    #[inline(always)]
    pub fn vault_owner(
        &mut self,
        vault_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_owner = Some(vault_owner);
        self
    }

    #[inline(always)]
    pub fn mint_authority(
        &mut self,
        mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_authority = Some(mint_authority);
        self
    }

    #[inline(always)]
    pub fn serum_authority(
        &mut self,
        serum_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_authority = Some(serum_authority);
        self
    }

    #[inline(always)]
    pub fn dex_program(
        &mut self,
        dex_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dex_program = Some(dex_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = SettleDexFundsCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            market: self.instruction.market.expect("market is not set"),

            zeta_base_vault: self
                .instruction
                .zeta_base_vault
                .expect("zeta_base_vault is not set"),

            zeta_quote_vault: self
                .instruction
                .zeta_quote_vault
                .expect("zeta_quote_vault is not set"),

            dex_base_vault: self
                .instruction
                .dex_base_vault
                .expect("dex_base_vault is not set"),

            dex_quote_vault: self
                .instruction
                .dex_quote_vault
                .expect("dex_quote_vault is not set"),

            vault_owner: self
                .instruction
                .vault_owner
                .expect("vault_owner is not set"),

            mint_authority: self
                .instruction
                .mint_authority
                .expect("mint_authority is not set"),

            serum_authority: self
                .instruction
                .serum_authority
                .expect("serum_authority is not set"),

            dex_program: self
                .instruction
                .dex_program
                .expect("dex_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SettleDexFundsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    zeta_base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    zeta_quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dex_base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dex_quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dex_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
