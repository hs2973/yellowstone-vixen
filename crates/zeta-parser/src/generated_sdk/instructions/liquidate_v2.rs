//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::Asset;

/// Accounts.
#[derive(Debug)]
pub struct LiquidateV2 {
    pub state: solana_program::pubkey::Pubkey,

    pub liquidator: solana_program::pubkey::Pubkey,

    pub liquidator_account: solana_program::pubkey::Pubkey,

    pub pricing: solana_program::pubkey::Pubkey,

    pub oracle: solana_program::pubkey::Pubkey,

    pub oracle_backup_feed: solana_program::pubkey::Pubkey,

    pub oracle_backup_program: solana_program::pubkey::Pubkey,

    pub market: solana_program::pubkey::Pubkey,

    pub liquidated_account: solana_program::pubkey::Pubkey,
}

impl LiquidateV2 {
    pub fn instruction(
        &self,
        args: LiquidateV2InstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: LiquidateV2InstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.liquidator,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liquidator_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pricing,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oracle_backup_feed,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oracle_backup_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liquidated_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&LiquidateV2InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LiquidateV2InstructionData {
    discriminator: [u8; 8],
}

impl LiquidateV2InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [15, 86, 85, 55, 2, 225, 161, 235],
        }
    }
}

impl Default for LiquidateV2InstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LiquidateV2InstructionArgs {
    pub size: u64,
    pub asset: Asset,
}

/// Instruction builder for `LiquidateV2`.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[signer]` liquidator
///   2. `[writable]` liquidator_account
///   3. `[]` pricing
///   4. `[]` oracle
///   5. `[]` oracle_backup_feed
///   6. `[]` oracle_backup_program
///   7. `[]` market
///   8. `[writable]` liquidated_account
#[derive(Clone, Debug, Default)]
pub struct LiquidateV2Builder {
    state: Option<solana_program::pubkey::Pubkey>,
    liquidator: Option<solana_program::pubkey::Pubkey>,
    liquidator_account: Option<solana_program::pubkey::Pubkey>,
    pricing: Option<solana_program::pubkey::Pubkey>,
    oracle: Option<solana_program::pubkey::Pubkey>,
    oracle_backup_feed: Option<solana_program::pubkey::Pubkey>,
    oracle_backup_program: Option<solana_program::pubkey::Pubkey>,
    market: Option<solana_program::pubkey::Pubkey>,
    liquidated_account: Option<solana_program::pubkey::Pubkey>,
    size: Option<u64>,
    asset: Option<Asset>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl LiquidateV2Builder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn liquidator(&mut self, liquidator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.liquidator = Some(liquidator);
        self
    }

    #[inline(always)]
    pub fn liquidator_account(
        &mut self,
        liquidator_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liquidator_account = Some(liquidator_account);
        self
    }

    #[inline(always)]
    pub fn pricing(&mut self, pricing: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pricing = Some(pricing);
        self
    }

    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_program::pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }

    #[inline(always)]
    pub fn oracle_backup_feed(
        &mut self,
        oracle_backup_feed: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.oracle_backup_feed = Some(oracle_backup_feed);
        self
    }

    #[inline(always)]
    pub fn oracle_backup_program(
        &mut self,
        oracle_backup_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.oracle_backup_program = Some(oracle_backup_program);
        self
    }

    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn liquidated_account(
        &mut self,
        liquidated_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liquidated_account = Some(liquidated_account);
        self
    }

    #[inline(always)]
    pub fn size(&mut self, size: u64) -> &mut Self {
        self.size = Some(size);
        self
    }

    #[inline(always)]
    pub fn asset(&mut self, asset: Asset) -> &mut Self {
        self.asset = Some(asset);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = LiquidateV2 {
            state: self.state.expect("state is not set"),
            liquidator: self.liquidator.expect("liquidator is not set"),
            liquidator_account: self
                .liquidator_account
                .expect("liquidator_account is not set"),
            pricing: self.pricing.expect("pricing is not set"),
            oracle: self.oracle.expect("oracle is not set"),
            oracle_backup_feed: self
                .oracle_backup_feed
                .expect("oracle_backup_feed is not set"),
            oracle_backup_program: self
                .oracle_backup_program
                .expect("oracle_backup_program is not set"),
            market: self.market.expect("market is not set"),
            liquidated_account: self
                .liquidated_account
                .expect("liquidated_account is not set"),
        };
        let args = LiquidateV2InstructionArgs {
            size: self.size.clone().expect("size is not set"),
            asset: self.asset.clone().expect("asset is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `liquidate_v2` CPI accounts.
pub struct LiquidateV2CpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidator: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidator_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pricing: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_backup_feed: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_backup_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidated_account: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `liquidate_v2` CPI instruction.
pub struct LiquidateV2Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidator: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidator_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pricing: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_backup_feed: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_backup_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub liquidated_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: LiquidateV2InstructionArgs,
}

impl<'a, 'b> LiquidateV2Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: LiquidateV2CpiAccounts<'a, 'b>,
        args: LiquidateV2InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            liquidator: accounts.liquidator,
            liquidator_account: accounts.liquidator_account,
            pricing: accounts.pricing,
            oracle: accounts.oracle,
            oracle_backup_feed: accounts.oracle_backup_feed,
            oracle_backup_program: accounts.oracle_backup_program,
            market: accounts.market,
            liquidated_account: accounts.liquidated_account,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.liquidator.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liquidator_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pricing.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oracle_backup_feed.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oracle_backup_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liquidated_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&LiquidateV2InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.liquidator.clone());
        account_infos.push(self.liquidator_account.clone());
        account_infos.push(self.pricing.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.oracle_backup_feed.clone());
        account_infos.push(self.oracle_backup_program.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.liquidated_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `LiquidateV2` via CPI.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[signer]` liquidator
///   2. `[writable]` liquidator_account
///   3. `[]` pricing
///   4. `[]` oracle
///   5. `[]` oracle_backup_feed
///   6. `[]` oracle_backup_program
///   7. `[]` market
///   8. `[writable]` liquidated_account
#[derive(Clone, Debug)]
pub struct LiquidateV2CpiBuilder<'a, 'b> {
    instruction: Box<LiquidateV2CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LiquidateV2CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(LiquidateV2CpiBuilderInstruction {
            __program: program,
            state: None,
            liquidator: None,
            liquidator_account: None,
            pricing: None,
            oracle: None,
            oracle_backup_feed: None,
            oracle_backup_program: None,
            market: None,
            liquidated_account: None,
            size: None,
            asset: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn liquidator(
        &mut self,
        liquidator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liquidator = Some(liquidator);
        self
    }

    #[inline(always)]
    pub fn liquidator_account(
        &mut self,
        liquidator_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liquidator_account = Some(liquidator_account);
        self
    }

    #[inline(always)]
    pub fn pricing(
        &mut self,
        pricing: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pricing = Some(pricing);
        self
    }

    #[inline(always)]
    pub fn oracle(
        &mut self,
        oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }

    #[inline(always)]
    pub fn oracle_backup_feed(
        &mut self,
        oracle_backup_feed: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle_backup_feed = Some(oracle_backup_feed);
        self
    }

    #[inline(always)]
    pub fn oracle_backup_program(
        &mut self,
        oracle_backup_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle_backup_program = Some(oracle_backup_program);
        self
    }

    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn liquidated_account(
        &mut self,
        liquidated_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liquidated_account = Some(liquidated_account);
        self
    }

    #[inline(always)]
    pub fn size(&mut self, size: u64) -> &mut Self {
        self.instruction.size = Some(size);
        self
    }

    #[inline(always)]
    pub fn asset(&mut self, asset: Asset) -> &mut Self {
        self.instruction.asset = Some(asset);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = LiquidateV2InstructionArgs {
            size: self.instruction.size.clone().expect("size is not set"),
            asset: self.instruction.asset.clone().expect("asset is not set"),
        };
        let instruction = LiquidateV2Cpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            liquidator: self.instruction.liquidator.expect("liquidator is not set"),

            liquidator_account: self
                .instruction
                .liquidator_account
                .expect("liquidator_account is not set"),

            pricing: self.instruction.pricing.expect("pricing is not set"),

            oracle: self.instruction.oracle.expect("oracle is not set"),

            oracle_backup_feed: self
                .instruction
                .oracle_backup_feed
                .expect("oracle_backup_feed is not set"),

            oracle_backup_program: self
                .instruction
                .oracle_backup_program
                .expect("oracle_backup_program is not set"),

            market: self.instruction.market.expect("market is not set"),

            liquidated_account: self
                .instruction
                .liquidated_account
                .expect("liquidated_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct LiquidateV2CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liquidator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liquidator_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pricing: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle_backup_feed: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle_backup_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liquidated_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    size: Option<u64>,
    asset: Option<Asset>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
