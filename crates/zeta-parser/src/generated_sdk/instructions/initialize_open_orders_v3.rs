//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::Asset;

/// Accounts.
#[derive(Debug)]
pub struct InitializeOpenOrdersV3 {
    pub state: solana_program::pubkey::Pubkey,

    pub dex_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub open_orders: solana_program::pubkey::Pubkey,

    pub cross_margin_account: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub market: solana_program::pubkey::Pubkey,

    pub serum_authority: solana_program::pubkey::Pubkey,

    pub open_orders_map: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl InitializeOpenOrdersV3 {
    pub fn instruction(
        &self,
        args: InitializeOpenOrdersV3InstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeOpenOrdersV3InstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.dex_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.open_orders,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cross_margin_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.serum_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.open_orders_map,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeOpenOrdersV3InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeOpenOrdersV3InstructionData {
    discriminator: [u8; 8],
}

impl InitializeOpenOrdersV3InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [22, 191, 139, 136, 121, 39, 84, 202],
        }
    }
}

impl Default for InitializeOpenOrdersV3InstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeOpenOrdersV3InstructionArgs {
    pub asset: Asset,
}

/// Instruction builder for `InitializeOpenOrdersV3`.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[]` dex_program
///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   3. `[writable]` open_orders
///   4. `[writable]` cross_margin_account
///   5. `[signer]` authority
///   6. `[writable, signer]` payer
///   7. `[]` market
///   8. `[]` serum_authority
///   9. `[writable]` open_orders_map
///   10. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeOpenOrdersV3Builder {
    state: Option<solana_program::pubkey::Pubkey>,
    dex_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    open_orders: Option<solana_program::pubkey::Pubkey>,
    cross_margin_account: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    market: Option<solana_program::pubkey::Pubkey>,
    serum_authority: Option<solana_program::pubkey::Pubkey>,
    open_orders_map: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    asset: Option<Asset>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeOpenOrdersV3Builder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn dex_program(&mut self, dex_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.dex_program = Some(dex_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn open_orders(&mut self, open_orders: solana_program::pubkey::Pubkey) -> &mut Self {
        self.open_orders = Some(open_orders);
        self
    }

    #[inline(always)]
    pub fn cross_margin_account(
        &mut self,
        cross_margin_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cross_margin_account = Some(cross_margin_account);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn serum_authority(
        &mut self,
        serum_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.serum_authority = Some(serum_authority);
        self
    }

    #[inline(always)]
    pub fn open_orders_map(
        &mut self,
        open_orders_map: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.open_orders_map = Some(open_orders_map);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn asset(&mut self, asset: Asset) -> &mut Self {
        self.asset = Some(asset);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeOpenOrdersV3 {
            state: self.state.expect("state is not set"),
            dex_program: self.dex_program.expect("dex_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            open_orders: self.open_orders.expect("open_orders is not set"),
            cross_margin_account: self
                .cross_margin_account
                .expect("cross_margin_account is not set"),
            authority: self.authority.expect("authority is not set"),
            payer: self.payer.expect("payer is not set"),
            market: self.market.expect("market is not set"),
            serum_authority: self.serum_authority.expect("serum_authority is not set"),
            open_orders_map: self.open_orders_map.expect("open_orders_map is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };
        let args = InitializeOpenOrdersV3InstructionArgs {
            asset: self.asset.clone().expect("asset is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_open_orders_v3` CPI accounts.
pub struct InitializeOpenOrdersV3CpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders: &'b solana_program::account_info::AccountInfo<'a>,

    pub cross_margin_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders_map: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_open_orders_v3` CPI instruction.
pub struct InitializeOpenOrdersV3Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders: &'b solana_program::account_info::AccountInfo<'a>,

    pub cross_margin_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders_map: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeOpenOrdersV3InstructionArgs,
}

impl<'a, 'b> InitializeOpenOrdersV3Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeOpenOrdersV3CpiAccounts<'a, 'b>,
        args: InitializeOpenOrdersV3InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            dex_program: accounts.dex_program,
            system_program: accounts.system_program,
            open_orders: accounts.open_orders,
            cross_margin_account: accounts.cross_margin_account,
            authority: accounts.authority,
            payer: accounts.payer,
            market: accounts.market,
            serum_authority: accounts.serum_authority,
            open_orders_map: accounts.open_orders_map,
            rent: accounts.rent,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.dex_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.open_orders.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cross_margin_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.serum_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.open_orders_map.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeOpenOrdersV3InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.dex_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.open_orders.clone());
        account_infos.push(self.cross_margin_account.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.serum_authority.clone());
        account_infos.push(self.open_orders_map.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeOpenOrdersV3` via CPI.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[]` dex_program
///   2. `[]` system_program
///   3. `[writable]` open_orders
///   4. `[writable]` cross_margin_account
///   5. `[signer]` authority
///   6. `[writable, signer]` payer
///   7. `[]` market
///   8. `[]` serum_authority
///   9. `[writable]` open_orders_map
///   10. `[]` rent
#[derive(Clone, Debug)]
pub struct InitializeOpenOrdersV3CpiBuilder<'a, 'b> {
    instruction: Box<InitializeOpenOrdersV3CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeOpenOrdersV3CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeOpenOrdersV3CpiBuilderInstruction {
            __program: program,
            state: None,
            dex_program: None,
            system_program: None,
            open_orders: None,
            cross_margin_account: None,
            authority: None,
            payer: None,
            market: None,
            serum_authority: None,
            open_orders_map: None,
            rent: None,
            asset: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn dex_program(
        &mut self,
        dex_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dex_program = Some(dex_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn open_orders(
        &mut self,
        open_orders: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders = Some(open_orders);
        self
    }

    #[inline(always)]
    pub fn cross_margin_account(
        &mut self,
        cross_margin_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cross_margin_account = Some(cross_margin_account);
        self
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn serum_authority(
        &mut self,
        serum_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_authority = Some(serum_authority);
        self
    }

    #[inline(always)]
    pub fn open_orders_map(
        &mut self,
        open_orders_map: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders_map = Some(open_orders_map);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn asset(&mut self, asset: Asset) -> &mut Self {
        self.instruction.asset = Some(asset);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeOpenOrdersV3InstructionArgs {
            asset: self.instruction.asset.clone().expect("asset is not set"),
        };
        let instruction = InitializeOpenOrdersV3Cpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            dex_program: self
                .instruction
                .dex_program
                .expect("dex_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            open_orders: self
                .instruction
                .open_orders
                .expect("open_orders is not set"),

            cross_margin_account: self
                .instruction
                .cross_margin_account
                .expect("cross_margin_account is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            market: self.instruction.market.expect("market is not set"),

            serum_authority: self
                .instruction
                .serum_authority
                .expect("serum_authority is not set"),

            open_orders_map: self
                .instruction
                .open_orders_map
                .expect("open_orders_map is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeOpenOrdersV3CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dex_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    open_orders: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cross_margin_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    open_orders_map: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    asset: Option<Asset>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
