//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct InitializeUnderlying {
    pub admin: solana_program::pubkey::Pubkey,

    pub zeta_program: solana_program::pubkey::Pubkey,

    pub state: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub underlying: solana_program::pubkey::Pubkey,

    pub underlying_mint: solana_program::pubkey::Pubkey,
}

impl InitializeUnderlying {
    pub fn instruction(
        &self,
        args: InitializeUnderlyingInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeUnderlyingInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.zeta_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.underlying,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.underlying_mint,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeUnderlyingInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeUnderlyingInstructionData {
    discriminator: [u8; 8],
}

impl InitializeUnderlyingInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [114, 108, 213, 92, 175, 124, 43, 19],
        }
    }
}

impl Default for InitializeUnderlyingInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeUnderlyingInstructionArgs {
    pub flex_underlying: bool,
}

/// Instruction builder for `InitializeUnderlying`.
///
/// ### Accounts:
///
///   0. `[signer]` admin
///   1. `[]` zeta_program
///   2. `[writable]` state
///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   4. `[writable]` underlying
///   5. `[]` underlying_mint
#[derive(Clone, Debug, Default)]
pub struct InitializeUnderlyingBuilder {
    admin: Option<solana_program::pubkey::Pubkey>,
    zeta_program: Option<solana_program::pubkey::Pubkey>,
    state: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    underlying: Option<solana_program::pubkey::Pubkey>,
    underlying_mint: Option<solana_program::pubkey::Pubkey>,
    flex_underlying: Option<bool>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeUnderlyingBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn zeta_program(&mut self, zeta_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.zeta_program = Some(zeta_program);
        self
    }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn underlying(&mut self, underlying: solana_program::pubkey::Pubkey) -> &mut Self {
        self.underlying = Some(underlying);
        self
    }

    #[inline(always)]
    pub fn underlying_mint(
        &mut self,
        underlying_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.underlying_mint = Some(underlying_mint);
        self
    }

    #[inline(always)]
    pub fn flex_underlying(&mut self, flex_underlying: bool) -> &mut Self {
        self.flex_underlying = Some(flex_underlying);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeUnderlying {
            admin: self.admin.expect("admin is not set"),
            zeta_program: self.zeta_program.expect("zeta_program is not set"),
            state: self.state.expect("state is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            underlying: self.underlying.expect("underlying is not set"),
            underlying_mint: self.underlying_mint.expect("underlying_mint is not set"),
        };
        let args = InitializeUnderlyingInstructionArgs {
            flex_underlying: self
                .flex_underlying
                .clone()
                .expect("flex_underlying is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_underlying` CPI accounts.
pub struct InitializeUnderlyingCpiAccounts<'a, 'b> {
    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub underlying: &'b solana_program::account_info::AccountInfo<'a>,

    pub underlying_mint: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_underlying` CPI instruction.
pub struct InitializeUnderlyingCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub underlying: &'b solana_program::account_info::AccountInfo<'a>,

    pub underlying_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeUnderlyingInstructionArgs,
}

impl<'a, 'b> InitializeUnderlyingCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeUnderlyingCpiAccounts<'a, 'b>,
        args: InitializeUnderlyingInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            admin: accounts.admin,
            zeta_program: accounts.zeta_program,
            state: accounts.state,
            system_program: accounts.system_program,
            underlying: accounts.underlying,
            underlying_mint: accounts.underlying_mint,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.zeta_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.underlying.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.underlying_mint.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeUnderlyingInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.zeta_program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.underlying.clone());
        account_infos.push(self.underlying_mint.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeUnderlying` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` admin
///   1. `[]` zeta_program
///   2. `[writable]` state
///   3. `[]` system_program
///   4. `[writable]` underlying
///   5. `[]` underlying_mint
#[derive(Clone, Debug)]
pub struct InitializeUnderlyingCpiBuilder<'a, 'b> {
    instruction: Box<InitializeUnderlyingCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeUnderlyingCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeUnderlyingCpiBuilderInstruction {
            __program: program,
            admin: None,
            zeta_program: None,
            state: None,
            system_program: None,
            underlying: None,
            underlying_mint: None,
            flex_underlying: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn zeta_program(
        &mut self,
        zeta_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.zeta_program = Some(zeta_program);
        self
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn underlying(
        &mut self,
        underlying: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.underlying = Some(underlying);
        self
    }

    #[inline(always)]
    pub fn underlying_mint(
        &mut self,
        underlying_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.underlying_mint = Some(underlying_mint);
        self
    }

    #[inline(always)]
    pub fn flex_underlying(&mut self, flex_underlying: bool) -> &mut Self {
        self.instruction.flex_underlying = Some(flex_underlying);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeUnderlyingInstructionArgs {
            flex_underlying: self
                .instruction
                .flex_underlying
                .clone()
                .expect("flex_underlying is not set"),
        };
        let instruction = InitializeUnderlyingCpi {
            __program: self.instruction.__program,

            admin: self.instruction.admin.expect("admin is not set"),

            zeta_program: self
                .instruction
                .zeta_program
                .expect("zeta_program is not set"),

            state: self.instruction.state.expect("state is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            underlying: self.instruction.underlying.expect("underlying is not set"),

            underlying_mint: self
                .instruction
                .underlying_mint
                .expect("underlying_mint is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeUnderlyingCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    zeta_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    underlying: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    underlying_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    flex_underlying: Option<bool>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
