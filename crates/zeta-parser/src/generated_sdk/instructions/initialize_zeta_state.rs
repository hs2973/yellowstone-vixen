//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct InitializeZetaState {
    pub state: solana_program::pubkey::Pubkey,

    pub mint_authority: solana_program::pubkey::Pubkey,

    pub serum_authority: solana_program::pubkey::Pubkey,

    pub treasury_wallet: solana_program::pubkey::Pubkey,

    pub referrals_admin: solana_program::pubkey::Pubkey,

    pub referrals_rewards_wallet: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub usdc_mint: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,

    pub secondary_admin: solana_program::pubkey::Pubkey,
}

impl InitializeZetaState {
    pub fn instruction(
        &self,
        args: InitializeZetaStateInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeZetaStateInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.serum_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.treasury_wallet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.referrals_admin,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.referrals_rewards_wallet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.usdc_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.secondary_admin,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeZetaStateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeZetaStateInstructionData {
    discriminator: [u8; 8],
}

impl InitializeZetaStateInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [68, 39, 75, 142, 191, 146, 94, 222],
        }
    }
}

impl Default for InitializeZetaStateInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeZetaStateInstructionArgs {
    pub state_nonce: u8,
    pub serum_nonce: u8,
    pub mint_auth_nonce: u8,
    pub strike_initialization_threshold_seconds: u32,
    pub pricing_frequency_seconds: u32,
    pub liquidator_liquidation_percentage: u32,
    pub insurance_vault_liquidation_percentage: u32,
    pub native_d1_trade_fee_percentage: u64,
    pub native_d1_underlying_fee_percentage: u64,
    pub native_option_trade_fee_percentage: u64,
    pub native_option_underlying_fee_percentage: u64,
    pub native_whitelist_underlying_fee_percentage: u64,
    pub native_deposit_limit: u64,
    pub expiration_threshold_seconds: u32,
    pub position_movement_fee_bps: u8,
    pub margin_concession_percentage: u8,
    pub max_perp_delta_age_seconds: u16,
    pub native_withdraw_limit: u64,
    pub withdraw_limit_epoch_seconds: u32,
    pub native_open_interest_limit: u64,
}

/// Instruction builder for `InitializeZetaState`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[]` mint_authority
///   2. `[]` serum_authority
///   3. `[writable]` treasury_wallet
///   4. `[]` referrals_admin
///   5. `[writable]` referrals_rewards_wallet
///   6. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   9. `[]` usdc_mint
///   10. `[writable, signer]` admin
///   11. `[]` secondary_admin
#[derive(Clone, Debug, Default)]
pub struct InitializeZetaStateBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    mint_authority: Option<solana_program::pubkey::Pubkey>,
    serum_authority: Option<solana_program::pubkey::Pubkey>,
    treasury_wallet: Option<solana_program::pubkey::Pubkey>,
    referrals_admin: Option<solana_program::pubkey::Pubkey>,
    referrals_rewards_wallet: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    usdc_mint: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    secondary_admin: Option<solana_program::pubkey::Pubkey>,
    state_nonce: Option<u8>,
    serum_nonce: Option<u8>,
    mint_auth_nonce: Option<u8>,
    strike_initialization_threshold_seconds: Option<u32>,
    pricing_frequency_seconds: Option<u32>,
    liquidator_liquidation_percentage: Option<u32>,
    insurance_vault_liquidation_percentage: Option<u32>,
    native_d1_trade_fee_percentage: Option<u64>,
    native_d1_underlying_fee_percentage: Option<u64>,
    native_option_trade_fee_percentage: Option<u64>,
    native_option_underlying_fee_percentage: Option<u64>,
    native_whitelist_underlying_fee_percentage: Option<u64>,
    native_deposit_limit: Option<u64>,
    expiration_threshold_seconds: Option<u32>,
    position_movement_fee_bps: Option<u8>,
    margin_concession_percentage: Option<u8>,
    max_perp_delta_age_seconds: Option<u16>,
    native_withdraw_limit: Option<u64>,
    withdraw_limit_epoch_seconds: Option<u32>,
    native_open_interest_limit: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeZetaStateBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn mint_authority(&mut self, mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_authority = Some(mint_authority);
        self
    }

    #[inline(always)]
    pub fn serum_authority(
        &mut self,
        serum_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.serum_authority = Some(serum_authority);
        self
    }

    #[inline(always)]
    pub fn treasury_wallet(
        &mut self,
        treasury_wallet: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.treasury_wallet = Some(treasury_wallet);
        self
    }

    #[inline(always)]
    pub fn referrals_admin(
        &mut self,
        referrals_admin: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.referrals_admin = Some(referrals_admin);
        self
    }

    #[inline(always)]
    pub fn referrals_rewards_wallet(
        &mut self,
        referrals_rewards_wallet: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.referrals_rewards_wallet = Some(referrals_rewards_wallet);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn usdc_mint(&mut self, usdc_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.usdc_mint = Some(usdc_mint);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn secondary_admin(
        &mut self,
        secondary_admin: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.secondary_admin = Some(secondary_admin);
        self
    }

    #[inline(always)]
    pub fn state_nonce(&mut self, state_nonce: u8) -> &mut Self {
        self.state_nonce = Some(state_nonce);
        self
    }

    #[inline(always)]
    pub fn serum_nonce(&mut self, serum_nonce: u8) -> &mut Self {
        self.serum_nonce = Some(serum_nonce);
        self
    }

    #[inline(always)]
    pub fn mint_auth_nonce(&mut self, mint_auth_nonce: u8) -> &mut Self {
        self.mint_auth_nonce = Some(mint_auth_nonce);
        self
    }

    #[inline(always)]
    pub fn strike_initialization_threshold_seconds(
        &mut self,
        strike_initialization_threshold_seconds: u32,
    ) -> &mut Self {
        self.strike_initialization_threshold_seconds =
            Some(strike_initialization_threshold_seconds);
        self
    }

    #[inline(always)]
    pub fn pricing_frequency_seconds(&mut self, pricing_frequency_seconds: u32) -> &mut Self {
        self.pricing_frequency_seconds = Some(pricing_frequency_seconds);
        self
    }

    #[inline(always)]
    pub fn liquidator_liquidation_percentage(
        &mut self,
        liquidator_liquidation_percentage: u32,
    ) -> &mut Self {
        self.liquidator_liquidation_percentage = Some(liquidator_liquidation_percentage);
        self
    }

    #[inline(always)]
    pub fn insurance_vault_liquidation_percentage(
        &mut self,
        insurance_vault_liquidation_percentage: u32,
    ) -> &mut Self {
        self.insurance_vault_liquidation_percentage = Some(insurance_vault_liquidation_percentage);
        self
    }

    #[inline(always)]
    pub fn native_d1_trade_fee_percentage(
        &mut self,
        native_d1_trade_fee_percentage: u64,
    ) -> &mut Self {
        self.native_d1_trade_fee_percentage = Some(native_d1_trade_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_d1_underlying_fee_percentage(
        &mut self,
        native_d1_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.native_d1_underlying_fee_percentage = Some(native_d1_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_option_trade_fee_percentage(
        &mut self,
        native_option_trade_fee_percentage: u64,
    ) -> &mut Self {
        self.native_option_trade_fee_percentage = Some(native_option_trade_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_option_underlying_fee_percentage(
        &mut self,
        native_option_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.native_option_underlying_fee_percentage =
            Some(native_option_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_whitelist_underlying_fee_percentage(
        &mut self,
        native_whitelist_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.native_whitelist_underlying_fee_percentage =
            Some(native_whitelist_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_deposit_limit(&mut self, native_deposit_limit: u64) -> &mut Self {
        self.native_deposit_limit = Some(native_deposit_limit);
        self
    }

    #[inline(always)]
    pub fn expiration_threshold_seconds(&mut self, expiration_threshold_seconds: u32) -> &mut Self {
        self.expiration_threshold_seconds = Some(expiration_threshold_seconds);
        self
    }

    #[inline(always)]
    pub fn position_movement_fee_bps(&mut self, position_movement_fee_bps: u8) -> &mut Self {
        self.position_movement_fee_bps = Some(position_movement_fee_bps);
        self
    }

    #[inline(always)]
    pub fn margin_concession_percentage(&mut self, margin_concession_percentage: u8) -> &mut Self {
        self.margin_concession_percentage = Some(margin_concession_percentage);
        self
    }

    #[inline(always)]
    pub fn max_perp_delta_age_seconds(&mut self, max_perp_delta_age_seconds: u16) -> &mut Self {
        self.max_perp_delta_age_seconds = Some(max_perp_delta_age_seconds);
        self
    }

    #[inline(always)]
    pub fn native_withdraw_limit(&mut self, native_withdraw_limit: u64) -> &mut Self {
        self.native_withdraw_limit = Some(native_withdraw_limit);
        self
    }

    #[inline(always)]
    pub fn withdraw_limit_epoch_seconds(&mut self, withdraw_limit_epoch_seconds: u32) -> &mut Self {
        self.withdraw_limit_epoch_seconds = Some(withdraw_limit_epoch_seconds);
        self
    }

    #[inline(always)]
    pub fn native_open_interest_limit(&mut self, native_open_interest_limit: u64) -> &mut Self {
        self.native_open_interest_limit = Some(native_open_interest_limit);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeZetaState {
            state: self.state.expect("state is not set"),
            mint_authority: self.mint_authority.expect("mint_authority is not set"),
            serum_authority: self.serum_authority.expect("serum_authority is not set"),
            treasury_wallet: self.treasury_wallet.expect("treasury_wallet is not set"),
            referrals_admin: self.referrals_admin.expect("referrals_admin is not set"),
            referrals_rewards_wallet: self
                .referrals_rewards_wallet
                .expect("referrals_rewards_wallet is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            usdc_mint: self.usdc_mint.expect("usdc_mint is not set"),
            admin: self.admin.expect("admin is not set"),
            secondary_admin: self.secondary_admin.expect("secondary_admin is not set"),
        };
        let args = InitializeZetaStateInstructionArgs {
            state_nonce: self.state_nonce.clone().expect("state_nonce is not set"),
            serum_nonce: self.serum_nonce.clone().expect("serum_nonce is not set"),
            mint_auth_nonce: self
                .mint_auth_nonce
                .clone()
                .expect("mint_auth_nonce is not set"),
            strike_initialization_threshold_seconds: self
                .strike_initialization_threshold_seconds
                .clone()
                .expect("strike_initialization_threshold_seconds is not set"),
            pricing_frequency_seconds: self
                .pricing_frequency_seconds
                .clone()
                .expect("pricing_frequency_seconds is not set"),
            liquidator_liquidation_percentage: self
                .liquidator_liquidation_percentage
                .clone()
                .expect("liquidator_liquidation_percentage is not set"),
            insurance_vault_liquidation_percentage: self
                .insurance_vault_liquidation_percentage
                .clone()
                .expect("insurance_vault_liquidation_percentage is not set"),
            native_d1_trade_fee_percentage: self
                .native_d1_trade_fee_percentage
                .clone()
                .expect("native_d1_trade_fee_percentage is not set"),
            native_d1_underlying_fee_percentage: self
                .native_d1_underlying_fee_percentage
                .clone()
                .expect("native_d1_underlying_fee_percentage is not set"),
            native_option_trade_fee_percentage: self
                .native_option_trade_fee_percentage
                .clone()
                .expect("native_option_trade_fee_percentage is not set"),
            native_option_underlying_fee_percentage: self
                .native_option_underlying_fee_percentage
                .clone()
                .expect("native_option_underlying_fee_percentage is not set"),
            native_whitelist_underlying_fee_percentage: self
                .native_whitelist_underlying_fee_percentage
                .clone()
                .expect("native_whitelist_underlying_fee_percentage is not set"),
            native_deposit_limit: self
                .native_deposit_limit
                .clone()
                .expect("native_deposit_limit is not set"),
            expiration_threshold_seconds: self
                .expiration_threshold_seconds
                .clone()
                .expect("expiration_threshold_seconds is not set"),
            position_movement_fee_bps: self
                .position_movement_fee_bps
                .clone()
                .expect("position_movement_fee_bps is not set"),
            margin_concession_percentage: self
                .margin_concession_percentage
                .clone()
                .expect("margin_concession_percentage is not set"),
            max_perp_delta_age_seconds: self
                .max_perp_delta_age_seconds
                .clone()
                .expect("max_perp_delta_age_seconds is not set"),
            native_withdraw_limit: self
                .native_withdraw_limit
                .clone()
                .expect("native_withdraw_limit is not set"),
            withdraw_limit_epoch_seconds: self
                .withdraw_limit_epoch_seconds
                .clone()
                .expect("withdraw_limit_epoch_seconds is not set"),
            native_open_interest_limit: self
                .native_open_interest_limit
                .clone()
                .expect("native_open_interest_limit is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_zeta_state` CPI accounts.
pub struct InitializeZetaStateCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrals_admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrals_rewards_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub usdc_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub secondary_admin: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_zeta_state` CPI instruction.
pub struct InitializeZetaStateCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrals_admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrals_rewards_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub usdc_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub secondary_admin: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeZetaStateInstructionArgs,
}

impl<'a, 'b> InitializeZetaStateCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeZetaStateCpiAccounts<'a, 'b>,
        args: InitializeZetaStateInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            mint_authority: accounts.mint_authority,
            serum_authority: accounts.serum_authority,
            treasury_wallet: accounts.treasury_wallet,
            referrals_admin: accounts.referrals_admin,
            referrals_rewards_wallet: accounts.referrals_rewards_wallet,
            rent: accounts.rent,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            usdc_mint: accounts.usdc_mint,
            admin: accounts.admin,
            secondary_admin: accounts.secondary_admin,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.serum_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.treasury_wallet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.referrals_admin.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.referrals_rewards_wallet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.usdc_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.secondary_admin.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeZetaStateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.mint_authority.clone());
        account_infos.push(self.serum_authority.clone());
        account_infos.push(self.treasury_wallet.clone());
        account_infos.push(self.referrals_admin.clone());
        account_infos.push(self.referrals_rewards_wallet.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.usdc_mint.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.secondary_admin.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeZetaState` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[]` mint_authority
///   2. `[]` serum_authority
///   3. `[writable]` treasury_wallet
///   4. `[]` referrals_admin
///   5. `[writable]` referrals_rewards_wallet
///   6. `[]` rent
///   7. `[]` system_program
///   8. `[]` token_program
///   9. `[]` usdc_mint
///   10. `[writable, signer]` admin
///   11. `[]` secondary_admin
#[derive(Clone, Debug)]
pub struct InitializeZetaStateCpiBuilder<'a, 'b> {
    instruction: Box<InitializeZetaStateCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeZetaStateCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeZetaStateCpiBuilderInstruction {
            __program: program,
            state: None,
            mint_authority: None,
            serum_authority: None,
            treasury_wallet: None,
            referrals_admin: None,
            referrals_rewards_wallet: None,
            rent: None,
            system_program: None,
            token_program: None,
            usdc_mint: None,
            admin: None,
            secondary_admin: None,
            state_nonce: None,
            serum_nonce: None,
            mint_auth_nonce: None,
            strike_initialization_threshold_seconds: None,
            pricing_frequency_seconds: None,
            liquidator_liquidation_percentage: None,
            insurance_vault_liquidation_percentage: None,
            native_d1_trade_fee_percentage: None,
            native_d1_underlying_fee_percentage: None,
            native_option_trade_fee_percentage: None,
            native_option_underlying_fee_percentage: None,
            native_whitelist_underlying_fee_percentage: None,
            native_deposit_limit: None,
            expiration_threshold_seconds: None,
            position_movement_fee_bps: None,
            margin_concession_percentage: None,
            max_perp_delta_age_seconds: None,
            native_withdraw_limit: None,
            withdraw_limit_epoch_seconds: None,
            native_open_interest_limit: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn mint_authority(
        &mut self,
        mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_authority = Some(mint_authority);
        self
    }

    #[inline(always)]
    pub fn serum_authority(
        &mut self,
        serum_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_authority = Some(serum_authority);
        self
    }

    #[inline(always)]
    pub fn treasury_wallet(
        &mut self,
        treasury_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.treasury_wallet = Some(treasury_wallet);
        self
    }

    #[inline(always)]
    pub fn referrals_admin(
        &mut self,
        referrals_admin: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.referrals_admin = Some(referrals_admin);
        self
    }

    #[inline(always)]
    pub fn referrals_rewards_wallet(
        &mut self,
        referrals_rewards_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.referrals_rewards_wallet = Some(referrals_rewards_wallet);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn usdc_mint(
        &mut self,
        usdc_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.usdc_mint = Some(usdc_mint);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn secondary_admin(
        &mut self,
        secondary_admin: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.secondary_admin = Some(secondary_admin);
        self
    }

    #[inline(always)]
    pub fn state_nonce(&mut self, state_nonce: u8) -> &mut Self {
        self.instruction.state_nonce = Some(state_nonce);
        self
    }

    #[inline(always)]
    pub fn serum_nonce(&mut self, serum_nonce: u8) -> &mut Self {
        self.instruction.serum_nonce = Some(serum_nonce);
        self
    }

    #[inline(always)]
    pub fn mint_auth_nonce(&mut self, mint_auth_nonce: u8) -> &mut Self {
        self.instruction.mint_auth_nonce = Some(mint_auth_nonce);
        self
    }

    #[inline(always)]
    pub fn strike_initialization_threshold_seconds(
        &mut self,
        strike_initialization_threshold_seconds: u32,
    ) -> &mut Self {
        self.instruction.strike_initialization_threshold_seconds =
            Some(strike_initialization_threshold_seconds);
        self
    }

    #[inline(always)]
    pub fn pricing_frequency_seconds(&mut self, pricing_frequency_seconds: u32) -> &mut Self {
        self.instruction.pricing_frequency_seconds = Some(pricing_frequency_seconds);
        self
    }

    #[inline(always)]
    pub fn liquidator_liquidation_percentage(
        &mut self,
        liquidator_liquidation_percentage: u32,
    ) -> &mut Self {
        self.instruction.liquidator_liquidation_percentage =
            Some(liquidator_liquidation_percentage);
        self
    }

    #[inline(always)]
    pub fn insurance_vault_liquidation_percentage(
        &mut self,
        insurance_vault_liquidation_percentage: u32,
    ) -> &mut Self {
        self.instruction.insurance_vault_liquidation_percentage =
            Some(insurance_vault_liquidation_percentage);
        self
    }

    #[inline(always)]
    pub fn native_d1_trade_fee_percentage(
        &mut self,
        native_d1_trade_fee_percentage: u64,
    ) -> &mut Self {
        self.instruction.native_d1_trade_fee_percentage = Some(native_d1_trade_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_d1_underlying_fee_percentage(
        &mut self,
        native_d1_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.instruction.native_d1_underlying_fee_percentage =
            Some(native_d1_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_option_trade_fee_percentage(
        &mut self,
        native_option_trade_fee_percentage: u64,
    ) -> &mut Self {
        self.instruction.native_option_trade_fee_percentage =
            Some(native_option_trade_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_option_underlying_fee_percentage(
        &mut self,
        native_option_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.instruction.native_option_underlying_fee_percentage =
            Some(native_option_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_whitelist_underlying_fee_percentage(
        &mut self,
        native_whitelist_underlying_fee_percentage: u64,
    ) -> &mut Self {
        self.instruction.native_whitelist_underlying_fee_percentage =
            Some(native_whitelist_underlying_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn native_deposit_limit(&mut self, native_deposit_limit: u64) -> &mut Self {
        self.instruction.native_deposit_limit = Some(native_deposit_limit);
        self
    }

    #[inline(always)]
    pub fn expiration_threshold_seconds(&mut self, expiration_threshold_seconds: u32) -> &mut Self {
        self.instruction.expiration_threshold_seconds = Some(expiration_threshold_seconds);
        self
    }

    #[inline(always)]
    pub fn position_movement_fee_bps(&mut self, position_movement_fee_bps: u8) -> &mut Self {
        self.instruction.position_movement_fee_bps = Some(position_movement_fee_bps);
        self
    }

    #[inline(always)]
    pub fn margin_concession_percentage(&mut self, margin_concession_percentage: u8) -> &mut Self {
        self.instruction.margin_concession_percentage = Some(margin_concession_percentage);
        self
    }

    #[inline(always)]
    pub fn max_perp_delta_age_seconds(&mut self, max_perp_delta_age_seconds: u16) -> &mut Self {
        self.instruction.max_perp_delta_age_seconds = Some(max_perp_delta_age_seconds);
        self
    }

    #[inline(always)]
    pub fn native_withdraw_limit(&mut self, native_withdraw_limit: u64) -> &mut Self {
        self.instruction.native_withdraw_limit = Some(native_withdraw_limit);
        self
    }

    #[inline(always)]
    pub fn withdraw_limit_epoch_seconds(&mut self, withdraw_limit_epoch_seconds: u32) -> &mut Self {
        self.instruction.withdraw_limit_epoch_seconds = Some(withdraw_limit_epoch_seconds);
        self
    }

    #[inline(always)]
    pub fn native_open_interest_limit(&mut self, native_open_interest_limit: u64) -> &mut Self {
        self.instruction.native_open_interest_limit = Some(native_open_interest_limit);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeZetaStateInstructionArgs {
            state_nonce: self
                .instruction
                .state_nonce
                .clone()
                .expect("state_nonce is not set"),
            serum_nonce: self
                .instruction
                .serum_nonce
                .clone()
                .expect("serum_nonce is not set"),
            mint_auth_nonce: self
                .instruction
                .mint_auth_nonce
                .clone()
                .expect("mint_auth_nonce is not set"),
            strike_initialization_threshold_seconds: self
                .instruction
                .strike_initialization_threshold_seconds
                .clone()
                .expect("strike_initialization_threshold_seconds is not set"),
            pricing_frequency_seconds: self
                .instruction
                .pricing_frequency_seconds
                .clone()
                .expect("pricing_frequency_seconds is not set"),
            liquidator_liquidation_percentage: self
                .instruction
                .liquidator_liquidation_percentage
                .clone()
                .expect("liquidator_liquidation_percentage is not set"),
            insurance_vault_liquidation_percentage: self
                .instruction
                .insurance_vault_liquidation_percentage
                .clone()
                .expect("insurance_vault_liquidation_percentage is not set"),
            native_d1_trade_fee_percentage: self
                .instruction
                .native_d1_trade_fee_percentage
                .clone()
                .expect("native_d1_trade_fee_percentage is not set"),
            native_d1_underlying_fee_percentage: self
                .instruction
                .native_d1_underlying_fee_percentage
                .clone()
                .expect("native_d1_underlying_fee_percentage is not set"),
            native_option_trade_fee_percentage: self
                .instruction
                .native_option_trade_fee_percentage
                .clone()
                .expect("native_option_trade_fee_percentage is not set"),
            native_option_underlying_fee_percentage: self
                .instruction
                .native_option_underlying_fee_percentage
                .clone()
                .expect("native_option_underlying_fee_percentage is not set"),
            native_whitelist_underlying_fee_percentage: self
                .instruction
                .native_whitelist_underlying_fee_percentage
                .clone()
                .expect("native_whitelist_underlying_fee_percentage is not set"),
            native_deposit_limit: self
                .instruction
                .native_deposit_limit
                .clone()
                .expect("native_deposit_limit is not set"),
            expiration_threshold_seconds: self
                .instruction
                .expiration_threshold_seconds
                .clone()
                .expect("expiration_threshold_seconds is not set"),
            position_movement_fee_bps: self
                .instruction
                .position_movement_fee_bps
                .clone()
                .expect("position_movement_fee_bps is not set"),
            margin_concession_percentage: self
                .instruction
                .margin_concession_percentage
                .clone()
                .expect("margin_concession_percentage is not set"),
            max_perp_delta_age_seconds: self
                .instruction
                .max_perp_delta_age_seconds
                .clone()
                .expect("max_perp_delta_age_seconds is not set"),
            native_withdraw_limit: self
                .instruction
                .native_withdraw_limit
                .clone()
                .expect("native_withdraw_limit is not set"),
            withdraw_limit_epoch_seconds: self
                .instruction
                .withdraw_limit_epoch_seconds
                .clone()
                .expect("withdraw_limit_epoch_seconds is not set"),
            native_open_interest_limit: self
                .instruction
                .native_open_interest_limit
                .clone()
                .expect("native_open_interest_limit is not set"),
        };
        let instruction = InitializeZetaStateCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            mint_authority: self
                .instruction
                .mint_authority
                .expect("mint_authority is not set"),

            serum_authority: self
                .instruction
                .serum_authority
                .expect("serum_authority is not set"),

            treasury_wallet: self
                .instruction
                .treasury_wallet
                .expect("treasury_wallet is not set"),

            referrals_admin: self
                .instruction
                .referrals_admin
                .expect("referrals_admin is not set"),

            referrals_rewards_wallet: self
                .instruction
                .referrals_rewards_wallet
                .expect("referrals_rewards_wallet is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            usdc_mint: self.instruction.usdc_mint.expect("usdc_mint is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            secondary_admin: self
                .instruction
                .secondary_admin
                .expect("secondary_admin is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeZetaStateCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    treasury_wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    referrals_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    referrals_rewards_wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    usdc_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    secondary_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    state_nonce: Option<u8>,
    serum_nonce: Option<u8>,
    mint_auth_nonce: Option<u8>,
    strike_initialization_threshold_seconds: Option<u32>,
    pricing_frequency_seconds: Option<u32>,
    liquidator_liquidation_percentage: Option<u32>,
    insurance_vault_liquidation_percentage: Option<u32>,
    native_d1_trade_fee_percentage: Option<u64>,
    native_d1_underlying_fee_percentage: Option<u64>,
    native_option_trade_fee_percentage: Option<u64>,
    native_option_underlying_fee_percentage: Option<u64>,
    native_whitelist_underlying_fee_percentage: Option<u64>,
    native_deposit_limit: Option<u64>,
    expiration_threshold_seconds: Option<u32>,
    position_movement_fee_bps: Option<u8>,
    margin_concession_percentage: Option<u8>,
    max_perp_delta_age_seconds: Option<u16>,
    native_withdraw_limit: Option<u64>,
    withdraw_limit_epoch_seconds: Option<u32>,
    native_open_interest_limit: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
