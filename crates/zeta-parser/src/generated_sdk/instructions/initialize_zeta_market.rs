//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::Asset;

/// Accounts.
#[derive(Debug)]
pub struct InitializeZetaMarket {
    pub state: solana_program::pubkey::Pubkey,

    pub market_indexes: solana_program::pubkey::Pubkey,

    pub pricing: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,

    pub market: solana_program::pubkey::Pubkey,

    pub request_queue: solana_program::pubkey::Pubkey,

    pub event_queue: solana_program::pubkey::Pubkey,

    pub bids: solana_program::pubkey::Pubkey,

    pub asks: solana_program::pubkey::Pubkey,

    pub base_mint: solana_program::pubkey::Pubkey,

    pub quote_mint: solana_program::pubkey::Pubkey,

    pub zeta_base_vault: solana_program::pubkey::Pubkey,

    pub zeta_quote_vault: solana_program::pubkey::Pubkey,

    pub dex_base_vault: solana_program::pubkey::Pubkey,

    pub dex_quote_vault: solana_program::pubkey::Pubkey,

    pub vault_owner: solana_program::pubkey::Pubkey,

    pub mint_authority: solana_program::pubkey::Pubkey,

    pub serum_authority: solana_program::pubkey::Pubkey,

    pub dex_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl InitializeZetaMarket {
    pub fn instruction(
        &self,
        args: InitializeZetaMarketInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeZetaMarketInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(22 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.market_indexes,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pricing,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.request_queue,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.event_queue,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bids, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.asks, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.zeta_base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.zeta_quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.dex_base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.dex_quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_owner,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.serum_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.dex_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeZetaMarketInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeZetaMarketInstructionData {
    discriminator: [u8; 8],
}

impl InitializeZetaMarketInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [116, 239, 226, 149, 46, 163, 221, 3],
        }
    }
}

impl Default for InitializeZetaMarketInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeZetaMarketInstructionArgs {
    pub asset: Asset,
    pub market_nonce: u8,
    pub base_mint_nonce: u8,
    pub quote_mint_nonce: u8,
    pub zeta_base_vault_nonce: u8,
    pub zeta_quote_vault_nonce: u8,
    pub dex_base_vault_nonce: u8,
    pub dex_quote_vault_nonce: u8,
    pub vault_signer_nonce: u64,
}

/// Instruction builder for `InitializeZetaMarket`.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[]` market_indexes
///   2. `[writable]` pricing
///   3. `[writable, signer]` admin
///   4. `[writable]` market
///   5. `[writable]` request_queue
///   6. `[writable]` event_queue
///   7. `[writable]` bids
///   8. `[writable]` asks
///   9. `[writable]` base_mint
///   10. `[writable]` quote_mint
///   11. `[writable]` zeta_base_vault
///   12. `[writable]` zeta_quote_vault
///   13. `[writable]` dex_base_vault
///   14. `[writable]` dex_quote_vault
///   15. `[]` vault_owner
///   16. `[]` mint_authority
///   17. `[]` serum_authority
///   18. `[]` dex_program
///   19. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   20. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   21. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeZetaMarketBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    market_indexes: Option<solana_program::pubkey::Pubkey>,
    pricing: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    market: Option<solana_program::pubkey::Pubkey>,
    request_queue: Option<solana_program::pubkey::Pubkey>,
    event_queue: Option<solana_program::pubkey::Pubkey>,
    bids: Option<solana_program::pubkey::Pubkey>,
    asks: Option<solana_program::pubkey::Pubkey>,
    base_mint: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    zeta_base_vault: Option<solana_program::pubkey::Pubkey>,
    zeta_quote_vault: Option<solana_program::pubkey::Pubkey>,
    dex_base_vault: Option<solana_program::pubkey::Pubkey>,
    dex_quote_vault: Option<solana_program::pubkey::Pubkey>,
    vault_owner: Option<solana_program::pubkey::Pubkey>,
    mint_authority: Option<solana_program::pubkey::Pubkey>,
    serum_authority: Option<solana_program::pubkey::Pubkey>,
    dex_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    asset: Option<Asset>,
    market_nonce: Option<u8>,
    base_mint_nonce: Option<u8>,
    quote_mint_nonce: Option<u8>,
    zeta_base_vault_nonce: Option<u8>,
    zeta_quote_vault_nonce: Option<u8>,
    dex_base_vault_nonce: Option<u8>,
    dex_quote_vault_nonce: Option<u8>,
    vault_signer_nonce: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeZetaMarketBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn market_indexes(&mut self, market_indexes: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market_indexes = Some(market_indexes);
        self
    }

    #[inline(always)]
    pub fn pricing(&mut self, pricing: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pricing = Some(pricing);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn request_queue(&mut self, request_queue: solana_program::pubkey::Pubkey) -> &mut Self {
        self.request_queue = Some(request_queue);
        self
    }

    #[inline(always)]
    pub fn event_queue(&mut self, event_queue: solana_program::pubkey::Pubkey) -> &mut Self {
        self.event_queue = Some(event_queue);
        self
    }

    #[inline(always)]
    pub fn bids(&mut self, bids: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bids = Some(bids);
        self
    }

    #[inline(always)]
    pub fn asks(&mut self, asks: solana_program::pubkey::Pubkey) -> &mut Self {
        self.asks = Some(asks);
        self
    }

    #[inline(always)]
    pub fn base_mint(&mut self, base_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_mint = Some(base_mint);
        self
    }

    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    #[inline(always)]
    pub fn zeta_base_vault(
        &mut self,
        zeta_base_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.zeta_base_vault = Some(zeta_base_vault);
        self
    }

    #[inline(always)]
    pub fn zeta_quote_vault(
        &mut self,
        zeta_quote_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.zeta_quote_vault = Some(zeta_quote_vault);
        self
    }

    #[inline(always)]
    pub fn dex_base_vault(&mut self, dex_base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.dex_base_vault = Some(dex_base_vault);
        self
    }

    #[inline(always)]
    pub fn dex_quote_vault(
        &mut self,
        dex_quote_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.dex_quote_vault = Some(dex_quote_vault);
        self
    }

    #[inline(always)]
    pub fn vault_owner(&mut self, vault_owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault_owner = Some(vault_owner);
        self
    }

    #[inline(always)]
    pub fn mint_authority(&mut self, mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_authority = Some(mint_authority);
        self
    }

    #[inline(always)]
    pub fn serum_authority(
        &mut self,
        serum_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.serum_authority = Some(serum_authority);
        self
    }

    #[inline(always)]
    pub fn dex_program(&mut self, dex_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.dex_program = Some(dex_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn asset(&mut self, asset: Asset) -> &mut Self {
        self.asset = Some(asset);
        self
    }

    #[inline(always)]
    pub fn market_nonce(&mut self, market_nonce: u8) -> &mut Self {
        self.market_nonce = Some(market_nonce);
        self
    }

    #[inline(always)]
    pub fn base_mint_nonce(&mut self, base_mint_nonce: u8) -> &mut Self {
        self.base_mint_nonce = Some(base_mint_nonce);
        self
    }

    #[inline(always)]
    pub fn quote_mint_nonce(&mut self, quote_mint_nonce: u8) -> &mut Self {
        self.quote_mint_nonce = Some(quote_mint_nonce);
        self
    }

    #[inline(always)]
    pub fn zeta_base_vault_nonce(&mut self, zeta_base_vault_nonce: u8) -> &mut Self {
        self.zeta_base_vault_nonce = Some(zeta_base_vault_nonce);
        self
    }

    #[inline(always)]
    pub fn zeta_quote_vault_nonce(&mut self, zeta_quote_vault_nonce: u8) -> &mut Self {
        self.zeta_quote_vault_nonce = Some(zeta_quote_vault_nonce);
        self
    }

    #[inline(always)]
    pub fn dex_base_vault_nonce(&mut self, dex_base_vault_nonce: u8) -> &mut Self {
        self.dex_base_vault_nonce = Some(dex_base_vault_nonce);
        self
    }

    #[inline(always)]
    pub fn dex_quote_vault_nonce(&mut self, dex_quote_vault_nonce: u8) -> &mut Self {
        self.dex_quote_vault_nonce = Some(dex_quote_vault_nonce);
        self
    }

    #[inline(always)]
    pub fn vault_signer_nonce(&mut self, vault_signer_nonce: u64) -> &mut Self {
        self.vault_signer_nonce = Some(vault_signer_nonce);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeZetaMarket {
            state: self.state.expect("state is not set"),
            market_indexes: self.market_indexes.expect("market_indexes is not set"),
            pricing: self.pricing.expect("pricing is not set"),
            admin: self.admin.expect("admin is not set"),
            market: self.market.expect("market is not set"),
            request_queue: self.request_queue.expect("request_queue is not set"),
            event_queue: self.event_queue.expect("event_queue is not set"),
            bids: self.bids.expect("bids is not set"),
            asks: self.asks.expect("asks is not set"),
            base_mint: self.base_mint.expect("base_mint is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            zeta_base_vault: self.zeta_base_vault.expect("zeta_base_vault is not set"),
            zeta_quote_vault: self.zeta_quote_vault.expect("zeta_quote_vault is not set"),
            dex_base_vault: self.dex_base_vault.expect("dex_base_vault is not set"),
            dex_quote_vault: self.dex_quote_vault.expect("dex_quote_vault is not set"),
            vault_owner: self.vault_owner.expect("vault_owner is not set"),
            mint_authority: self.mint_authority.expect("mint_authority is not set"),
            serum_authority: self.serum_authority.expect("serum_authority is not set"),
            dex_program: self.dex_program.expect("dex_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };
        let args = InitializeZetaMarketInstructionArgs {
            asset: self.asset.clone().expect("asset is not set"),
            market_nonce: self.market_nonce.clone().expect("market_nonce is not set"),
            base_mint_nonce: self
                .base_mint_nonce
                .clone()
                .expect("base_mint_nonce is not set"),
            quote_mint_nonce: self
                .quote_mint_nonce
                .clone()
                .expect("quote_mint_nonce is not set"),
            zeta_base_vault_nonce: self
                .zeta_base_vault_nonce
                .clone()
                .expect("zeta_base_vault_nonce is not set"),
            zeta_quote_vault_nonce: self
                .zeta_quote_vault_nonce
                .clone()
                .expect("zeta_quote_vault_nonce is not set"),
            dex_base_vault_nonce: self
                .dex_base_vault_nonce
                .clone()
                .expect("dex_base_vault_nonce is not set"),
            dex_quote_vault_nonce: self
                .dex_quote_vault_nonce
                .clone()
                .expect("dex_quote_vault_nonce is not set"),
            vault_signer_nonce: self
                .vault_signer_nonce
                .clone()
                .expect("vault_signer_nonce is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_zeta_market` CPI accounts.
pub struct InitializeZetaMarketCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_indexes: &'b solana_program::account_info::AccountInfo<'a>,

    pub pricing: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub request_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub bids: &'b solana_program::account_info::AccountInfo<'a>,

    pub asks: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_zeta_market` CPI instruction.
pub struct InitializeZetaMarketCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_indexes: &'b solana_program::account_info::AccountInfo<'a>,

    pub pricing: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub request_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub bids: &'b solana_program::account_info::AccountInfo<'a>,

    pub asks: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeZetaMarketInstructionArgs,
}

impl<'a, 'b> InitializeZetaMarketCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeZetaMarketCpiAccounts<'a, 'b>,
        args: InitializeZetaMarketInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            market_indexes: accounts.market_indexes,
            pricing: accounts.pricing,
            admin: accounts.admin,
            market: accounts.market,
            request_queue: accounts.request_queue,
            event_queue: accounts.event_queue,
            bids: accounts.bids,
            asks: accounts.asks,
            base_mint: accounts.base_mint,
            quote_mint: accounts.quote_mint,
            zeta_base_vault: accounts.zeta_base_vault,
            zeta_quote_vault: accounts.zeta_quote_vault,
            dex_base_vault: accounts.dex_base_vault,
            dex_quote_vault: accounts.dex_quote_vault,
            vault_owner: accounts.vault_owner,
            mint_authority: accounts.mint_authority,
            serum_authority: accounts.serum_authority,
            dex_program: accounts.dex_program,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            rent: accounts.rent,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(22 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.market_indexes.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pricing.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.request_queue.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.event_queue.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bids.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.asks.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.zeta_base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.zeta_quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dex_base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dex_quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.serum_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.dex_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeZetaMarketInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(23 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.market_indexes.clone());
        account_infos.push(self.pricing.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.request_queue.clone());
        account_infos.push(self.event_queue.clone());
        account_infos.push(self.bids.clone());
        account_infos.push(self.asks.clone());
        account_infos.push(self.base_mint.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.zeta_base_vault.clone());
        account_infos.push(self.zeta_quote_vault.clone());
        account_infos.push(self.dex_base_vault.clone());
        account_infos.push(self.dex_quote_vault.clone());
        account_infos.push(self.vault_owner.clone());
        account_infos.push(self.mint_authority.clone());
        account_infos.push(self.serum_authority.clone());
        account_infos.push(self.dex_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeZetaMarket` via CPI.
///
/// ### Accounts:
///
///   0. `[]` state
///   1. `[]` market_indexes
///   2. `[writable]` pricing
///   3. `[writable, signer]` admin
///   4. `[writable]` market
///   5. `[writable]` request_queue
///   6. `[writable]` event_queue
///   7. `[writable]` bids
///   8. `[writable]` asks
///   9. `[writable]` base_mint
///   10. `[writable]` quote_mint
///   11. `[writable]` zeta_base_vault
///   12. `[writable]` zeta_quote_vault
///   13. `[writable]` dex_base_vault
///   14. `[writable]` dex_quote_vault
///   15. `[]` vault_owner
///   16. `[]` mint_authority
///   17. `[]` serum_authority
///   18. `[]` dex_program
///   19. `[]` system_program
///   20. `[]` token_program
///   21. `[]` rent
#[derive(Clone, Debug)]
pub struct InitializeZetaMarketCpiBuilder<'a, 'b> {
    instruction: Box<InitializeZetaMarketCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeZetaMarketCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeZetaMarketCpiBuilderInstruction {
            __program: program,
            state: None,
            market_indexes: None,
            pricing: None,
            admin: None,
            market: None,
            request_queue: None,
            event_queue: None,
            bids: None,
            asks: None,
            base_mint: None,
            quote_mint: None,
            zeta_base_vault: None,
            zeta_quote_vault: None,
            dex_base_vault: None,
            dex_quote_vault: None,
            vault_owner: None,
            mint_authority: None,
            serum_authority: None,
            dex_program: None,
            system_program: None,
            token_program: None,
            rent: None,
            asset: None,
            market_nonce: None,
            base_mint_nonce: None,
            quote_mint_nonce: None,
            zeta_base_vault_nonce: None,
            zeta_quote_vault_nonce: None,
            dex_base_vault_nonce: None,
            dex_quote_vault_nonce: None,
            vault_signer_nonce: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn market_indexes(
        &mut self,
        market_indexes: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_indexes = Some(market_indexes);
        self
    }

    #[inline(always)]
    pub fn pricing(
        &mut self,
        pricing: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pricing = Some(pricing);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn request_queue(
        &mut self,
        request_queue: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.request_queue = Some(request_queue);
        self
    }

    #[inline(always)]
    pub fn event_queue(
        &mut self,
        event_queue: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_queue = Some(event_queue);
        self
    }

    #[inline(always)]
    pub fn bids(&mut self, bids: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.bids = Some(bids);
        self
    }

    #[inline(always)]
    pub fn asks(&mut self, asks: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asks = Some(asks);
        self
    }

    #[inline(always)]
    pub fn base_mint(
        &mut self,
        base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_mint = Some(base_mint);
        self
    }

    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    #[inline(always)]
    pub fn zeta_base_vault(
        &mut self,
        zeta_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.zeta_base_vault = Some(zeta_base_vault);
        self
    }

    #[inline(always)]
    pub fn zeta_quote_vault(
        &mut self,
        zeta_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.zeta_quote_vault = Some(zeta_quote_vault);
        self
    }

    #[inline(always)]
    pub fn dex_base_vault(
        &mut self,
        dex_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dex_base_vault = Some(dex_base_vault);
        self
    }

    #[inline(always)]
    pub fn dex_quote_vault(
        &mut self,
        dex_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dex_quote_vault = Some(dex_quote_vault);
        self
    }

    #[inline(always)]
    pub fn vault_owner(
        &mut self,
        vault_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_owner = Some(vault_owner);
        self
    }

    #[inline(always)]
    pub fn mint_authority(
        &mut self,
        mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_authority = Some(mint_authority);
        self
    }

    #[inline(always)]
    pub fn serum_authority(
        &mut self,
        serum_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_authority = Some(serum_authority);
        self
    }

    #[inline(always)]
    pub fn dex_program(
        &mut self,
        dex_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dex_program = Some(dex_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn asset(&mut self, asset: Asset) -> &mut Self {
        self.instruction.asset = Some(asset);
        self
    }

    #[inline(always)]
    pub fn market_nonce(&mut self, market_nonce: u8) -> &mut Self {
        self.instruction.market_nonce = Some(market_nonce);
        self
    }

    #[inline(always)]
    pub fn base_mint_nonce(&mut self, base_mint_nonce: u8) -> &mut Self {
        self.instruction.base_mint_nonce = Some(base_mint_nonce);
        self
    }

    #[inline(always)]
    pub fn quote_mint_nonce(&mut self, quote_mint_nonce: u8) -> &mut Self {
        self.instruction.quote_mint_nonce = Some(quote_mint_nonce);
        self
    }

    #[inline(always)]
    pub fn zeta_base_vault_nonce(&mut self, zeta_base_vault_nonce: u8) -> &mut Self {
        self.instruction.zeta_base_vault_nonce = Some(zeta_base_vault_nonce);
        self
    }

    #[inline(always)]
    pub fn zeta_quote_vault_nonce(&mut self, zeta_quote_vault_nonce: u8) -> &mut Self {
        self.instruction.zeta_quote_vault_nonce = Some(zeta_quote_vault_nonce);
        self
    }

    #[inline(always)]
    pub fn dex_base_vault_nonce(&mut self, dex_base_vault_nonce: u8) -> &mut Self {
        self.instruction.dex_base_vault_nonce = Some(dex_base_vault_nonce);
        self
    }

    #[inline(always)]
    pub fn dex_quote_vault_nonce(&mut self, dex_quote_vault_nonce: u8) -> &mut Self {
        self.instruction.dex_quote_vault_nonce = Some(dex_quote_vault_nonce);
        self
    }

    #[inline(always)]
    pub fn vault_signer_nonce(&mut self, vault_signer_nonce: u64) -> &mut Self {
        self.instruction.vault_signer_nonce = Some(vault_signer_nonce);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeZetaMarketInstructionArgs {
            asset: self.instruction.asset.clone().expect("asset is not set"),
            market_nonce: self
                .instruction
                .market_nonce
                .clone()
                .expect("market_nonce is not set"),
            base_mint_nonce: self
                .instruction
                .base_mint_nonce
                .clone()
                .expect("base_mint_nonce is not set"),
            quote_mint_nonce: self
                .instruction
                .quote_mint_nonce
                .clone()
                .expect("quote_mint_nonce is not set"),
            zeta_base_vault_nonce: self
                .instruction
                .zeta_base_vault_nonce
                .clone()
                .expect("zeta_base_vault_nonce is not set"),
            zeta_quote_vault_nonce: self
                .instruction
                .zeta_quote_vault_nonce
                .clone()
                .expect("zeta_quote_vault_nonce is not set"),
            dex_base_vault_nonce: self
                .instruction
                .dex_base_vault_nonce
                .clone()
                .expect("dex_base_vault_nonce is not set"),
            dex_quote_vault_nonce: self
                .instruction
                .dex_quote_vault_nonce
                .clone()
                .expect("dex_quote_vault_nonce is not set"),
            vault_signer_nonce: self
                .instruction
                .vault_signer_nonce
                .clone()
                .expect("vault_signer_nonce is not set"),
        };
        let instruction = InitializeZetaMarketCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            market_indexes: self
                .instruction
                .market_indexes
                .expect("market_indexes is not set"),

            pricing: self.instruction.pricing.expect("pricing is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            market: self.instruction.market.expect("market is not set"),

            request_queue: self
                .instruction
                .request_queue
                .expect("request_queue is not set"),

            event_queue: self
                .instruction
                .event_queue
                .expect("event_queue is not set"),

            bids: self.instruction.bids.expect("bids is not set"),

            asks: self.instruction.asks.expect("asks is not set"),

            base_mint: self.instruction.base_mint.expect("base_mint is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            zeta_base_vault: self
                .instruction
                .zeta_base_vault
                .expect("zeta_base_vault is not set"),

            zeta_quote_vault: self
                .instruction
                .zeta_quote_vault
                .expect("zeta_quote_vault is not set"),

            dex_base_vault: self
                .instruction
                .dex_base_vault
                .expect("dex_base_vault is not set"),

            dex_quote_vault: self
                .instruction
                .dex_quote_vault
                .expect("dex_quote_vault is not set"),

            vault_owner: self
                .instruction
                .vault_owner
                .expect("vault_owner is not set"),

            mint_authority: self
                .instruction
                .mint_authority
                .expect("mint_authority is not set"),

            serum_authority: self
                .instruction
                .serum_authority
                .expect("serum_authority is not set"),

            dex_program: self
                .instruction
                .dex_program
                .expect("dex_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeZetaMarketCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_indexes: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pricing: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    request_queue: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_queue: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bids: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    asks: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    zeta_base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    zeta_quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dex_base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dex_quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dex_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    asset: Option<Asset>,
    market_nonce: Option<u8>,
    base_mint_nonce: Option<u8>,
    quote_mint_nonce: Option<u8>,
    zeta_base_vault_nonce: Option<u8>,
    zeta_quote_vault_nonce: Option<u8>,
    dex_base_vault_nonce: Option<u8>,
    dex_quote_vault_nonce: Option<u8>,
    vault_signer_nonce: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
