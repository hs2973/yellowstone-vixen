//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::Asset;

/// Accounts.
#[derive(Debug)]
pub struct InitializeZetaGroup {
    pub state: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub underlying_mint: solana_program::pubkey::Pubkey,

    pub zeta_program: solana_program::pubkey::Pubkey,

    pub oracle: solana_program::pubkey::Pubkey,

    pub oracle_backup_feed: solana_program::pubkey::Pubkey,

    pub oracle_backup_program: solana_program::pubkey::Pubkey,

    pub zeta_group: solana_program::pubkey::Pubkey,

    pub greeks: solana_program::pubkey::Pubkey,

    pub perp_sync_queue: solana_program::pubkey::Pubkey,

    pub underlying: solana_program::pubkey::Pubkey,

    pub vault: solana_program::pubkey::Pubkey,

    pub insurance_vault: solana_program::pubkey::Pubkey,

    pub socialized_loss_account: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub usdc_mint: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl InitializeZetaGroup {
    pub fn instruction(
        &self,
        args: InitializeZetaGroupInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeZetaGroupInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.underlying_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.zeta_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oracle_backup_feed,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.oracle_backup_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.zeta_group,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.greeks,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.perp_sync_queue,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.underlying,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.insurance_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.socialized_loss_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.usdc_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeZetaGroupInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeZetaGroupInstructionData {
    discriminator: [u8; 8],
}

impl InitializeZetaGroupInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [6, 135, 36, 232, 35, 39, 250, 71],
        }
    }
}

impl Default for InitializeZetaGroupInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeZetaGroupInstructionArgs {
    pub perps_only: bool,
    pub flex_underlying: bool,
    pub asset_override: Option<Asset>,
    pub zeta_group_nonce: u8,
    pub underlying_nonce: u8,
    pub greeks_nonce: u8,
    pub vault_nonce: u8,
    pub insurance_vault_nonce: u8,
    pub socialized_loss_account_nonce: u8,
    pub perp_sync_queue_nonce: u8,
    pub interest_rate: i64,
    pub volatility: [u64; 5],
    pub option_trade_normalizer: u64,
    pub future_trade_normalizer: u64,
    pub max_volatility_retreat: u64,
    pub max_interest_retreat: u64,
    pub max_delta: u64,
    pub min_delta: u64,
    pub min_interest_rate: i64,
    pub max_interest_rate: i64,
    pub min_volatility: u64,
    pub max_volatility: u64,
    pub future_margin_initial: u64,
    pub future_margin_maintenance: u64,
    pub expiry_interval_seconds: u32,
    pub new_expiry_threshold_seconds: u32,
    pub min_funding_rate_percent: i64,
    pub max_funding_rate_percent: i64,
    pub perp_impact_cash_delta: u64,
}

/// Instruction builder for `InitializeZetaGroup`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable, signer]` admin
///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   3. `[]` underlying_mint
///   4. `[]` zeta_program
///   5. `[]` oracle
///   6. `[]` oracle_backup_feed
///   7. `[]` oracle_backup_program
///   8. `[writable]` zeta_group
///   9. `[writable]` greeks
///   10. `[writable]` perp_sync_queue
///   11. `[writable]` underlying
///   12. `[writable]` vault
///   13. `[writable]` insurance_vault
///   14. `[writable]` socialized_loss_account
///   15. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   16. `[]` usdc_mint
///   17. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeZetaGroupBuilder {
    state: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    underlying_mint: Option<solana_program::pubkey::Pubkey>,
    zeta_program: Option<solana_program::pubkey::Pubkey>,
    oracle: Option<solana_program::pubkey::Pubkey>,
    oracle_backup_feed: Option<solana_program::pubkey::Pubkey>,
    oracle_backup_program: Option<solana_program::pubkey::Pubkey>,
    zeta_group: Option<solana_program::pubkey::Pubkey>,
    greeks: Option<solana_program::pubkey::Pubkey>,
    perp_sync_queue: Option<solana_program::pubkey::Pubkey>,
    underlying: Option<solana_program::pubkey::Pubkey>,
    vault: Option<solana_program::pubkey::Pubkey>,
    insurance_vault: Option<solana_program::pubkey::Pubkey>,
    socialized_loss_account: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    usdc_mint: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    perps_only: Option<bool>,
    flex_underlying: Option<bool>,
    asset_override: Option<Asset>,
    zeta_group_nonce: Option<u8>,
    underlying_nonce: Option<u8>,
    greeks_nonce: Option<u8>,
    vault_nonce: Option<u8>,
    insurance_vault_nonce: Option<u8>,
    socialized_loss_account_nonce: Option<u8>,
    perp_sync_queue_nonce: Option<u8>,
    interest_rate: Option<i64>,
    volatility: Option<[u64; 5]>,
    option_trade_normalizer: Option<u64>,
    future_trade_normalizer: Option<u64>,
    max_volatility_retreat: Option<u64>,
    max_interest_retreat: Option<u64>,
    max_delta: Option<u64>,
    min_delta: Option<u64>,
    min_interest_rate: Option<i64>,
    max_interest_rate: Option<i64>,
    min_volatility: Option<u64>,
    max_volatility: Option<u64>,
    future_margin_initial: Option<u64>,
    future_margin_maintenance: Option<u64>,
    expiry_interval_seconds: Option<u32>,
    new_expiry_threshold_seconds: Option<u32>,
    min_funding_rate_percent: Option<i64>,
    max_funding_rate_percent: Option<i64>,
    perp_impact_cash_delta: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeZetaGroupBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn underlying_mint(
        &mut self,
        underlying_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.underlying_mint = Some(underlying_mint);
        self
    }

    #[inline(always)]
    pub fn zeta_program(&mut self, zeta_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.zeta_program = Some(zeta_program);
        self
    }

    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_program::pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }

    #[inline(always)]
    pub fn oracle_backup_feed(
        &mut self,
        oracle_backup_feed: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.oracle_backup_feed = Some(oracle_backup_feed);
        self
    }

    #[inline(always)]
    pub fn oracle_backup_program(
        &mut self,
        oracle_backup_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.oracle_backup_program = Some(oracle_backup_program);
        self
    }

    #[inline(always)]
    pub fn zeta_group(&mut self, zeta_group: solana_program::pubkey::Pubkey) -> &mut Self {
        self.zeta_group = Some(zeta_group);
        self
    }

    #[inline(always)]
    pub fn greeks(&mut self, greeks: solana_program::pubkey::Pubkey) -> &mut Self {
        self.greeks = Some(greeks);
        self
    }

    #[inline(always)]
    pub fn perp_sync_queue(
        &mut self,
        perp_sync_queue: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.perp_sync_queue = Some(perp_sync_queue);
        self
    }

    #[inline(always)]
    pub fn underlying(&mut self, underlying: solana_program::pubkey::Pubkey) -> &mut Self {
        self.underlying = Some(underlying);
        self
    }

    #[inline(always)]
    pub fn vault(&mut self, vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault = Some(vault);
        self
    }

    #[inline(always)]
    pub fn insurance_vault(
        &mut self,
        insurance_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.insurance_vault = Some(insurance_vault);
        self
    }

    #[inline(always)]
    pub fn socialized_loss_account(
        &mut self,
        socialized_loss_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.socialized_loss_account = Some(socialized_loss_account);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn usdc_mint(&mut self, usdc_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.usdc_mint = Some(usdc_mint);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn perps_only(&mut self, perps_only: bool) -> &mut Self {
        self.perps_only = Some(perps_only);
        self
    }

    #[inline(always)]
    pub fn flex_underlying(&mut self, flex_underlying: bool) -> &mut Self {
        self.flex_underlying = Some(flex_underlying);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn asset_override(&mut self, asset_override: Asset) -> &mut Self {
        self.asset_override = Some(asset_override);
        self
    }

    #[inline(always)]
    pub fn zeta_group_nonce(&mut self, zeta_group_nonce: u8) -> &mut Self {
        self.zeta_group_nonce = Some(zeta_group_nonce);
        self
    }

    #[inline(always)]
    pub fn underlying_nonce(&mut self, underlying_nonce: u8) -> &mut Self {
        self.underlying_nonce = Some(underlying_nonce);
        self
    }

    #[inline(always)]
    pub fn greeks_nonce(&mut self, greeks_nonce: u8) -> &mut Self {
        self.greeks_nonce = Some(greeks_nonce);
        self
    }

    #[inline(always)]
    pub fn vault_nonce(&mut self, vault_nonce: u8) -> &mut Self {
        self.vault_nonce = Some(vault_nonce);
        self
    }

    #[inline(always)]
    pub fn insurance_vault_nonce(&mut self, insurance_vault_nonce: u8) -> &mut Self {
        self.insurance_vault_nonce = Some(insurance_vault_nonce);
        self
    }

    #[inline(always)]
    pub fn socialized_loss_account_nonce(
        &mut self,
        socialized_loss_account_nonce: u8,
    ) -> &mut Self {
        self.socialized_loss_account_nonce = Some(socialized_loss_account_nonce);
        self
    }

    #[inline(always)]
    pub fn perp_sync_queue_nonce(&mut self, perp_sync_queue_nonce: u8) -> &mut Self {
        self.perp_sync_queue_nonce = Some(perp_sync_queue_nonce);
        self
    }

    #[inline(always)]
    pub fn interest_rate(&mut self, interest_rate: i64) -> &mut Self {
        self.interest_rate = Some(interest_rate);
        self
    }

    #[inline(always)]
    pub fn volatility(&mut self, volatility: [u64; 5]) -> &mut Self {
        self.volatility = Some(volatility);
        self
    }

    #[inline(always)]
    pub fn option_trade_normalizer(&mut self, option_trade_normalizer: u64) -> &mut Self {
        self.option_trade_normalizer = Some(option_trade_normalizer);
        self
    }

    #[inline(always)]
    pub fn future_trade_normalizer(&mut self, future_trade_normalizer: u64) -> &mut Self {
        self.future_trade_normalizer = Some(future_trade_normalizer);
        self
    }

    #[inline(always)]
    pub fn max_volatility_retreat(&mut self, max_volatility_retreat: u64) -> &mut Self {
        self.max_volatility_retreat = Some(max_volatility_retreat);
        self
    }

    #[inline(always)]
    pub fn max_interest_retreat(&mut self, max_interest_retreat: u64) -> &mut Self {
        self.max_interest_retreat = Some(max_interest_retreat);
        self
    }

    #[inline(always)]
    pub fn max_delta(&mut self, max_delta: u64) -> &mut Self {
        self.max_delta = Some(max_delta);
        self
    }

    #[inline(always)]
    pub fn min_delta(&mut self, min_delta: u64) -> &mut Self {
        self.min_delta = Some(min_delta);
        self
    }

    #[inline(always)]
    pub fn min_interest_rate(&mut self, min_interest_rate: i64) -> &mut Self {
        self.min_interest_rate = Some(min_interest_rate);
        self
    }

    #[inline(always)]
    pub fn max_interest_rate(&mut self, max_interest_rate: i64) -> &mut Self {
        self.max_interest_rate = Some(max_interest_rate);
        self
    }

    #[inline(always)]
    pub fn min_volatility(&mut self, min_volatility: u64) -> &mut Self {
        self.min_volatility = Some(min_volatility);
        self
    }

    #[inline(always)]
    pub fn max_volatility(&mut self, max_volatility: u64) -> &mut Self {
        self.max_volatility = Some(max_volatility);
        self
    }

    #[inline(always)]
    pub fn future_margin_initial(&mut self, future_margin_initial: u64) -> &mut Self {
        self.future_margin_initial = Some(future_margin_initial);
        self
    }

    #[inline(always)]
    pub fn future_margin_maintenance(&mut self, future_margin_maintenance: u64) -> &mut Self {
        self.future_margin_maintenance = Some(future_margin_maintenance);
        self
    }

    #[inline(always)]
    pub fn expiry_interval_seconds(&mut self, expiry_interval_seconds: u32) -> &mut Self {
        self.expiry_interval_seconds = Some(expiry_interval_seconds);
        self
    }

    #[inline(always)]
    pub fn new_expiry_threshold_seconds(&mut self, new_expiry_threshold_seconds: u32) -> &mut Self {
        self.new_expiry_threshold_seconds = Some(new_expiry_threshold_seconds);
        self
    }

    #[inline(always)]
    pub fn min_funding_rate_percent(&mut self, min_funding_rate_percent: i64) -> &mut Self {
        self.min_funding_rate_percent = Some(min_funding_rate_percent);
        self
    }

    #[inline(always)]
    pub fn max_funding_rate_percent(&mut self, max_funding_rate_percent: i64) -> &mut Self {
        self.max_funding_rate_percent = Some(max_funding_rate_percent);
        self
    }

    #[inline(always)]
    pub fn perp_impact_cash_delta(&mut self, perp_impact_cash_delta: u64) -> &mut Self {
        self.perp_impact_cash_delta = Some(perp_impact_cash_delta);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeZetaGroup {
            state: self.state.expect("state is not set"),
            admin: self.admin.expect("admin is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            underlying_mint: self.underlying_mint.expect("underlying_mint is not set"),
            zeta_program: self.zeta_program.expect("zeta_program is not set"),
            oracle: self.oracle.expect("oracle is not set"),
            oracle_backup_feed: self
                .oracle_backup_feed
                .expect("oracle_backup_feed is not set"),
            oracle_backup_program: self
                .oracle_backup_program
                .expect("oracle_backup_program is not set"),
            zeta_group: self.zeta_group.expect("zeta_group is not set"),
            greeks: self.greeks.expect("greeks is not set"),
            perp_sync_queue: self.perp_sync_queue.expect("perp_sync_queue is not set"),
            underlying: self.underlying.expect("underlying is not set"),
            vault: self.vault.expect("vault is not set"),
            insurance_vault: self.insurance_vault.expect("insurance_vault is not set"),
            socialized_loss_account: self
                .socialized_loss_account
                .expect("socialized_loss_account is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            usdc_mint: self.usdc_mint.expect("usdc_mint is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };
        let args = InitializeZetaGroupInstructionArgs {
            perps_only: self.perps_only.clone().expect("perps_only is not set"),
            flex_underlying: self
                .flex_underlying
                .clone()
                .expect("flex_underlying is not set"),
            asset_override: self.asset_override.clone(),
            zeta_group_nonce: self
                .zeta_group_nonce
                .clone()
                .expect("zeta_group_nonce is not set"),
            underlying_nonce: self
                .underlying_nonce
                .clone()
                .expect("underlying_nonce is not set"),
            greeks_nonce: self.greeks_nonce.clone().expect("greeks_nonce is not set"),
            vault_nonce: self.vault_nonce.clone().expect("vault_nonce is not set"),
            insurance_vault_nonce: self
                .insurance_vault_nonce
                .clone()
                .expect("insurance_vault_nonce is not set"),
            socialized_loss_account_nonce: self
                .socialized_loss_account_nonce
                .clone()
                .expect("socialized_loss_account_nonce is not set"),
            perp_sync_queue_nonce: self
                .perp_sync_queue_nonce
                .clone()
                .expect("perp_sync_queue_nonce is not set"),
            interest_rate: self
                .interest_rate
                .clone()
                .expect("interest_rate is not set"),
            volatility: self.volatility.clone().expect("volatility is not set"),
            option_trade_normalizer: self
                .option_trade_normalizer
                .clone()
                .expect("option_trade_normalizer is not set"),
            future_trade_normalizer: self
                .future_trade_normalizer
                .clone()
                .expect("future_trade_normalizer is not set"),
            max_volatility_retreat: self
                .max_volatility_retreat
                .clone()
                .expect("max_volatility_retreat is not set"),
            max_interest_retreat: self
                .max_interest_retreat
                .clone()
                .expect("max_interest_retreat is not set"),
            max_delta: self.max_delta.clone().expect("max_delta is not set"),
            min_delta: self.min_delta.clone().expect("min_delta is not set"),
            min_interest_rate: self
                .min_interest_rate
                .clone()
                .expect("min_interest_rate is not set"),
            max_interest_rate: self
                .max_interest_rate
                .clone()
                .expect("max_interest_rate is not set"),
            min_volatility: self
                .min_volatility
                .clone()
                .expect("min_volatility is not set"),
            max_volatility: self
                .max_volatility
                .clone()
                .expect("max_volatility is not set"),
            future_margin_initial: self
                .future_margin_initial
                .clone()
                .expect("future_margin_initial is not set"),
            future_margin_maintenance: self
                .future_margin_maintenance
                .clone()
                .expect("future_margin_maintenance is not set"),
            expiry_interval_seconds: self
                .expiry_interval_seconds
                .clone()
                .expect("expiry_interval_seconds is not set"),
            new_expiry_threshold_seconds: self
                .new_expiry_threshold_seconds
                .clone()
                .expect("new_expiry_threshold_seconds is not set"),
            min_funding_rate_percent: self
                .min_funding_rate_percent
                .clone()
                .expect("min_funding_rate_percent is not set"),
            max_funding_rate_percent: self
                .max_funding_rate_percent
                .clone()
                .expect("max_funding_rate_percent is not set"),
            perp_impact_cash_delta: self
                .perp_impact_cash_delta
                .clone()
                .expect("perp_impact_cash_delta is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_zeta_group` CPI accounts.
pub struct InitializeZetaGroupCpiAccounts<'a, 'b> {
    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub underlying_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_backup_feed: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_backup_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_group: &'b solana_program::account_info::AccountInfo<'a>,

    pub greeks: &'b solana_program::account_info::AccountInfo<'a>,

    pub perp_sync_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub underlying: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub socialized_loss_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub usdc_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_zeta_group` CPI instruction.
pub struct InitializeZetaGroupCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub underlying_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_backup_feed: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_backup_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub zeta_group: &'b solana_program::account_info::AccountInfo<'a>,

    pub greeks: &'b solana_program::account_info::AccountInfo<'a>,

    pub perp_sync_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub underlying: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub insurance_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub socialized_loss_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub usdc_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeZetaGroupInstructionArgs,
}

impl<'a, 'b> InitializeZetaGroupCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeZetaGroupCpiAccounts<'a, 'b>,
        args: InitializeZetaGroupInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            admin: accounts.admin,
            system_program: accounts.system_program,
            underlying_mint: accounts.underlying_mint,
            zeta_program: accounts.zeta_program,
            oracle: accounts.oracle,
            oracle_backup_feed: accounts.oracle_backup_feed,
            oracle_backup_program: accounts.oracle_backup_program,
            zeta_group: accounts.zeta_group,
            greeks: accounts.greeks,
            perp_sync_queue: accounts.perp_sync_queue,
            underlying: accounts.underlying,
            vault: accounts.vault,
            insurance_vault: accounts.insurance_vault,
            socialized_loss_account: accounts.socialized_loss_account,
            token_program: accounts.token_program,
            usdc_mint: accounts.usdc_mint,
            rent: accounts.rent,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.underlying_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.zeta_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oracle_backup_feed.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.oracle_backup_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.zeta_group.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.greeks.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.perp_sync_queue.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.underlying.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.insurance_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.socialized_loss_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.usdc_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeZetaGroupInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::ZETA_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(19 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.underlying_mint.clone());
        account_infos.push(self.zeta_program.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.oracle_backup_feed.clone());
        account_infos.push(self.oracle_backup_program.clone());
        account_infos.push(self.zeta_group.clone());
        account_infos.push(self.greeks.clone());
        account_infos.push(self.perp_sync_queue.clone());
        account_infos.push(self.underlying.clone());
        account_infos.push(self.vault.clone());
        account_infos.push(self.insurance_vault.clone());
        account_infos.push(self.socialized_loss_account.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.usdc_mint.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeZetaGroup` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[writable, signer]` admin
///   2. `[]` system_program
///   3. `[]` underlying_mint
///   4. `[]` zeta_program
///   5. `[]` oracle
///   6. `[]` oracle_backup_feed
///   7. `[]` oracle_backup_program
///   8. `[writable]` zeta_group
///   9. `[writable]` greeks
///   10. `[writable]` perp_sync_queue
///   11. `[writable]` underlying
///   12. `[writable]` vault
///   13. `[writable]` insurance_vault
///   14. `[writable]` socialized_loss_account
///   15. `[]` token_program
///   16. `[]` usdc_mint
///   17. `[]` rent
#[derive(Clone, Debug)]
pub struct InitializeZetaGroupCpiBuilder<'a, 'b> {
    instruction: Box<InitializeZetaGroupCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeZetaGroupCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeZetaGroupCpiBuilderInstruction {
            __program: program,
            state: None,
            admin: None,
            system_program: None,
            underlying_mint: None,
            zeta_program: None,
            oracle: None,
            oracle_backup_feed: None,
            oracle_backup_program: None,
            zeta_group: None,
            greeks: None,
            perp_sync_queue: None,
            underlying: None,
            vault: None,
            insurance_vault: None,
            socialized_loss_account: None,
            token_program: None,
            usdc_mint: None,
            rent: None,
            perps_only: None,
            flex_underlying: None,
            asset_override: None,
            zeta_group_nonce: None,
            underlying_nonce: None,
            greeks_nonce: None,
            vault_nonce: None,
            insurance_vault_nonce: None,
            socialized_loss_account_nonce: None,
            perp_sync_queue_nonce: None,
            interest_rate: None,
            volatility: None,
            option_trade_normalizer: None,
            future_trade_normalizer: None,
            max_volatility_retreat: None,
            max_interest_retreat: None,
            max_delta: None,
            min_delta: None,
            min_interest_rate: None,
            max_interest_rate: None,
            min_volatility: None,
            max_volatility: None,
            future_margin_initial: None,
            future_margin_maintenance: None,
            expiry_interval_seconds: None,
            new_expiry_threshold_seconds: None,
            min_funding_rate_percent: None,
            max_funding_rate_percent: None,
            perp_impact_cash_delta: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn underlying_mint(
        &mut self,
        underlying_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.underlying_mint = Some(underlying_mint);
        self
    }

    #[inline(always)]
    pub fn zeta_program(
        &mut self,
        zeta_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.zeta_program = Some(zeta_program);
        self
    }

    #[inline(always)]
    pub fn oracle(
        &mut self,
        oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }

    #[inline(always)]
    pub fn oracle_backup_feed(
        &mut self,
        oracle_backup_feed: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle_backup_feed = Some(oracle_backup_feed);
        self
    }

    #[inline(always)]
    pub fn oracle_backup_program(
        &mut self,
        oracle_backup_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle_backup_program = Some(oracle_backup_program);
        self
    }

    #[inline(always)]
    pub fn zeta_group(
        &mut self,
        zeta_group: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.zeta_group = Some(zeta_group);
        self
    }

    #[inline(always)]
    pub fn greeks(
        &mut self,
        greeks: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.greeks = Some(greeks);
        self
    }

    #[inline(always)]
    pub fn perp_sync_queue(
        &mut self,
        perp_sync_queue: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.perp_sync_queue = Some(perp_sync_queue);
        self
    }

    #[inline(always)]
    pub fn underlying(
        &mut self,
        underlying: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.underlying = Some(underlying);
        self
    }

    #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.vault = Some(vault);
        self
    }

    #[inline(always)]
    pub fn insurance_vault(
        &mut self,
        insurance_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.insurance_vault = Some(insurance_vault);
        self
    }

    #[inline(always)]
    pub fn socialized_loss_account(
        &mut self,
        socialized_loss_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.socialized_loss_account = Some(socialized_loss_account);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn usdc_mint(
        &mut self,
        usdc_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.usdc_mint = Some(usdc_mint);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn perps_only(&mut self, perps_only: bool) -> &mut Self {
        self.instruction.perps_only = Some(perps_only);
        self
    }

    #[inline(always)]
    pub fn flex_underlying(&mut self, flex_underlying: bool) -> &mut Self {
        self.instruction.flex_underlying = Some(flex_underlying);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn asset_override(&mut self, asset_override: Asset) -> &mut Self {
        self.instruction.asset_override = Some(asset_override);
        self
    }

    #[inline(always)]
    pub fn zeta_group_nonce(&mut self, zeta_group_nonce: u8) -> &mut Self {
        self.instruction.zeta_group_nonce = Some(zeta_group_nonce);
        self
    }

    #[inline(always)]
    pub fn underlying_nonce(&mut self, underlying_nonce: u8) -> &mut Self {
        self.instruction.underlying_nonce = Some(underlying_nonce);
        self
    }

    #[inline(always)]
    pub fn greeks_nonce(&mut self, greeks_nonce: u8) -> &mut Self {
        self.instruction.greeks_nonce = Some(greeks_nonce);
        self
    }

    #[inline(always)]
    pub fn vault_nonce(&mut self, vault_nonce: u8) -> &mut Self {
        self.instruction.vault_nonce = Some(vault_nonce);
        self
    }

    #[inline(always)]
    pub fn insurance_vault_nonce(&mut self, insurance_vault_nonce: u8) -> &mut Self {
        self.instruction.insurance_vault_nonce = Some(insurance_vault_nonce);
        self
    }

    #[inline(always)]
    pub fn socialized_loss_account_nonce(
        &mut self,
        socialized_loss_account_nonce: u8,
    ) -> &mut Self {
        self.instruction.socialized_loss_account_nonce = Some(socialized_loss_account_nonce);
        self
    }

    #[inline(always)]
    pub fn perp_sync_queue_nonce(&mut self, perp_sync_queue_nonce: u8) -> &mut Self {
        self.instruction.perp_sync_queue_nonce = Some(perp_sync_queue_nonce);
        self
    }

    #[inline(always)]
    pub fn interest_rate(&mut self, interest_rate: i64) -> &mut Self {
        self.instruction.interest_rate = Some(interest_rate);
        self
    }

    #[inline(always)]
    pub fn volatility(&mut self, volatility: [u64; 5]) -> &mut Self {
        self.instruction.volatility = Some(volatility);
        self
    }

    #[inline(always)]
    pub fn option_trade_normalizer(&mut self, option_trade_normalizer: u64) -> &mut Self {
        self.instruction.option_trade_normalizer = Some(option_trade_normalizer);
        self
    }

    #[inline(always)]
    pub fn future_trade_normalizer(&mut self, future_trade_normalizer: u64) -> &mut Self {
        self.instruction.future_trade_normalizer = Some(future_trade_normalizer);
        self
    }

    #[inline(always)]
    pub fn max_volatility_retreat(&mut self, max_volatility_retreat: u64) -> &mut Self {
        self.instruction.max_volatility_retreat = Some(max_volatility_retreat);
        self
    }

    #[inline(always)]
    pub fn max_interest_retreat(&mut self, max_interest_retreat: u64) -> &mut Self {
        self.instruction.max_interest_retreat = Some(max_interest_retreat);
        self
    }

    #[inline(always)]
    pub fn max_delta(&mut self, max_delta: u64) -> &mut Self {
        self.instruction.max_delta = Some(max_delta);
        self
    }

    #[inline(always)]
    pub fn min_delta(&mut self, min_delta: u64) -> &mut Self {
        self.instruction.min_delta = Some(min_delta);
        self
    }

    #[inline(always)]
    pub fn min_interest_rate(&mut self, min_interest_rate: i64) -> &mut Self {
        self.instruction.min_interest_rate = Some(min_interest_rate);
        self
    }

    #[inline(always)]
    pub fn max_interest_rate(&mut self, max_interest_rate: i64) -> &mut Self {
        self.instruction.max_interest_rate = Some(max_interest_rate);
        self
    }

    #[inline(always)]
    pub fn min_volatility(&mut self, min_volatility: u64) -> &mut Self {
        self.instruction.min_volatility = Some(min_volatility);
        self
    }

    #[inline(always)]
    pub fn max_volatility(&mut self, max_volatility: u64) -> &mut Self {
        self.instruction.max_volatility = Some(max_volatility);
        self
    }

    #[inline(always)]
    pub fn future_margin_initial(&mut self, future_margin_initial: u64) -> &mut Self {
        self.instruction.future_margin_initial = Some(future_margin_initial);
        self
    }

    #[inline(always)]
    pub fn future_margin_maintenance(&mut self, future_margin_maintenance: u64) -> &mut Self {
        self.instruction.future_margin_maintenance = Some(future_margin_maintenance);
        self
    }

    #[inline(always)]
    pub fn expiry_interval_seconds(&mut self, expiry_interval_seconds: u32) -> &mut Self {
        self.instruction.expiry_interval_seconds = Some(expiry_interval_seconds);
        self
    }

    #[inline(always)]
    pub fn new_expiry_threshold_seconds(&mut self, new_expiry_threshold_seconds: u32) -> &mut Self {
        self.instruction.new_expiry_threshold_seconds = Some(new_expiry_threshold_seconds);
        self
    }

    #[inline(always)]
    pub fn min_funding_rate_percent(&mut self, min_funding_rate_percent: i64) -> &mut Self {
        self.instruction.min_funding_rate_percent = Some(min_funding_rate_percent);
        self
    }

    #[inline(always)]
    pub fn max_funding_rate_percent(&mut self, max_funding_rate_percent: i64) -> &mut Self {
        self.instruction.max_funding_rate_percent = Some(max_funding_rate_percent);
        self
    }

    #[inline(always)]
    pub fn perp_impact_cash_delta(&mut self, perp_impact_cash_delta: u64) -> &mut Self {
        self.instruction.perp_impact_cash_delta = Some(perp_impact_cash_delta);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeZetaGroupInstructionArgs {
            perps_only: self
                .instruction
                .perps_only
                .clone()
                .expect("perps_only is not set"),
            flex_underlying: self
                .instruction
                .flex_underlying
                .clone()
                .expect("flex_underlying is not set"),
            asset_override: self.instruction.asset_override.clone(),
            zeta_group_nonce: self
                .instruction
                .zeta_group_nonce
                .clone()
                .expect("zeta_group_nonce is not set"),
            underlying_nonce: self
                .instruction
                .underlying_nonce
                .clone()
                .expect("underlying_nonce is not set"),
            greeks_nonce: self
                .instruction
                .greeks_nonce
                .clone()
                .expect("greeks_nonce is not set"),
            vault_nonce: self
                .instruction
                .vault_nonce
                .clone()
                .expect("vault_nonce is not set"),
            insurance_vault_nonce: self
                .instruction
                .insurance_vault_nonce
                .clone()
                .expect("insurance_vault_nonce is not set"),
            socialized_loss_account_nonce: self
                .instruction
                .socialized_loss_account_nonce
                .clone()
                .expect("socialized_loss_account_nonce is not set"),
            perp_sync_queue_nonce: self
                .instruction
                .perp_sync_queue_nonce
                .clone()
                .expect("perp_sync_queue_nonce is not set"),
            interest_rate: self
                .instruction
                .interest_rate
                .clone()
                .expect("interest_rate is not set"),
            volatility: self
                .instruction
                .volatility
                .clone()
                .expect("volatility is not set"),
            option_trade_normalizer: self
                .instruction
                .option_trade_normalizer
                .clone()
                .expect("option_trade_normalizer is not set"),
            future_trade_normalizer: self
                .instruction
                .future_trade_normalizer
                .clone()
                .expect("future_trade_normalizer is not set"),
            max_volatility_retreat: self
                .instruction
                .max_volatility_retreat
                .clone()
                .expect("max_volatility_retreat is not set"),
            max_interest_retreat: self
                .instruction
                .max_interest_retreat
                .clone()
                .expect("max_interest_retreat is not set"),
            max_delta: self
                .instruction
                .max_delta
                .clone()
                .expect("max_delta is not set"),
            min_delta: self
                .instruction
                .min_delta
                .clone()
                .expect("min_delta is not set"),
            min_interest_rate: self
                .instruction
                .min_interest_rate
                .clone()
                .expect("min_interest_rate is not set"),
            max_interest_rate: self
                .instruction
                .max_interest_rate
                .clone()
                .expect("max_interest_rate is not set"),
            min_volatility: self
                .instruction
                .min_volatility
                .clone()
                .expect("min_volatility is not set"),
            max_volatility: self
                .instruction
                .max_volatility
                .clone()
                .expect("max_volatility is not set"),
            future_margin_initial: self
                .instruction
                .future_margin_initial
                .clone()
                .expect("future_margin_initial is not set"),
            future_margin_maintenance: self
                .instruction
                .future_margin_maintenance
                .clone()
                .expect("future_margin_maintenance is not set"),
            expiry_interval_seconds: self
                .instruction
                .expiry_interval_seconds
                .clone()
                .expect("expiry_interval_seconds is not set"),
            new_expiry_threshold_seconds: self
                .instruction
                .new_expiry_threshold_seconds
                .clone()
                .expect("new_expiry_threshold_seconds is not set"),
            min_funding_rate_percent: self
                .instruction
                .min_funding_rate_percent
                .clone()
                .expect("min_funding_rate_percent is not set"),
            max_funding_rate_percent: self
                .instruction
                .max_funding_rate_percent
                .clone()
                .expect("max_funding_rate_percent is not set"),
            perp_impact_cash_delta: self
                .instruction
                .perp_impact_cash_delta
                .clone()
                .expect("perp_impact_cash_delta is not set"),
        };
        let instruction = InitializeZetaGroupCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            underlying_mint: self
                .instruction
                .underlying_mint
                .expect("underlying_mint is not set"),

            zeta_program: self
                .instruction
                .zeta_program
                .expect("zeta_program is not set"),

            oracle: self.instruction.oracle.expect("oracle is not set"),

            oracle_backup_feed: self
                .instruction
                .oracle_backup_feed
                .expect("oracle_backup_feed is not set"),

            oracle_backup_program: self
                .instruction
                .oracle_backup_program
                .expect("oracle_backup_program is not set"),

            zeta_group: self.instruction.zeta_group.expect("zeta_group is not set"),

            greeks: self.instruction.greeks.expect("greeks is not set"),

            perp_sync_queue: self
                .instruction
                .perp_sync_queue
                .expect("perp_sync_queue is not set"),

            underlying: self.instruction.underlying.expect("underlying is not set"),

            vault: self.instruction.vault.expect("vault is not set"),

            insurance_vault: self
                .instruction
                .insurance_vault
                .expect("insurance_vault is not set"),

            socialized_loss_account: self
                .instruction
                .socialized_loss_account
                .expect("socialized_loss_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            usdc_mint: self.instruction.usdc_mint.expect("usdc_mint is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeZetaGroupCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    underlying_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    zeta_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle_backup_feed: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle_backup_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    zeta_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    greeks: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    perp_sync_queue: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    underlying: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    insurance_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    socialized_loss_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    usdc_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    perps_only: Option<bool>,
    flex_underlying: Option<bool>,
    asset_override: Option<Asset>,
    zeta_group_nonce: Option<u8>,
    underlying_nonce: Option<u8>,
    greeks_nonce: Option<u8>,
    vault_nonce: Option<u8>,
    insurance_vault_nonce: Option<u8>,
    socialized_loss_account_nonce: Option<u8>,
    perp_sync_queue_nonce: Option<u8>,
    interest_rate: Option<i64>,
    volatility: Option<[u64; 5]>,
    option_trade_normalizer: Option<u64>,
    future_trade_normalizer: Option<u64>,
    max_volatility_retreat: Option<u64>,
    max_interest_retreat: Option<u64>,
    max_delta: Option<u64>,
    min_delta: Option<u64>,
    min_interest_rate: Option<i64>,
    max_interest_rate: Option<i64>,
    min_volatility: Option<u64>,
    max_volatility: Option<u64>,
    future_margin_initial: Option<u64>,
    future_margin_maintenance: Option<u64>,
    expiry_interval_seconds: Option<u32>,
    new_expiry_threshold_seconds: Option<u32>,
    min_funding_rate_percent: Option<i64>,
    max_funding_rate_percent: Option<i64>,
    perp_impact_cash_delta: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
