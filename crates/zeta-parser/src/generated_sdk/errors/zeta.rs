//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum ZetaError {
    /// 6000 - Deposit overflow
    #[error("Deposit overflow")]
    DepositOverflow = 0x1770,
    /// 6001 - Unreachable
    #[error("Unreachable")]
    Unreachable = 0x1771,
    /// 6002 - Failed initial margin requirement
    #[error("Failed initial margin requirement")]
    FailedInitialMarginRequirement = 0x1772,
    /// 6003 - Liquidator failed margin requirement
    #[error("Liquidator failed margin requirement")]
    LiquidatorFailedMarginRequirement = 0x1773,
    /// 6004 - Cannot liquidate own account
    #[error("Cannot liquidate own account")]
    CannotLiquidateOwnAccount = 0x1774,
    /// 6005 - Invalid cranking remaining accounts
    #[error("Invalid cranking remaining accounts")]
    CrankInvalidRemainingAccounts = 0x1775,
    /// 6006 - Incorrect tick size
    #[error("Incorrect tick size")]
    IncorrectTickSize = 0x1776,
    /// 6007 - ZeroPrice
    #[error("ZeroPrice")]
    ZeroPrice = 0x1777,
    /// 6008 - ZeroSize
    #[error("ZeroSize")]
    ZeroSize = 0x1778,
    /// 6009 - Zero withdrawable balance
    #[error("Zero withdrawable balance")]
    ZeroWithdrawableBalance = 0x1779,
    /// 6010 - Deposit amount exceeds limit and user is not whitelisted
    #[error("Deposit amount exceeds limit and user is not whitelisted")]
    DepositAmountExceeded = 0x177a,
    /// 6011 - Withdrawal amount exceeds withdrawable balance
    #[error("Withdrawal amount exceeds withdrawable balance")]
    WithdrawalAmountExceedsWithdrawableBalance = 0x177b,
    /// 6012 - Account has sufficient margin post cancels
    #[error("Account has sufficient margin post cancels")]
    AccountHasSufficientMarginPostCancels = 0x177c,
    /// 6013 - Over bankrupt
    #[error("Over bankrupt")]
    OverBankrupt = 0x177d,
    /// 6014 - Account has sufficient margin
    #[error("Account has sufficient margin")]
    AccountHasSufficientMargin = 0x177e,
    /// 6015 - User has no active orders
    #[error("User has no active orders")]
    UserHasNoActiveOrders = 0x177f,
    /// 6016 - Invalid expiration interval
    #[error("Invalid expiration interval")]
    InvalidExpirationInterval = 0x1780,
    /// 6017 - Product markets already initialized
    #[error("Product markets already initialized")]
    ProductMarketsAlreadyInitialized = 0x1781,
    /// 6018 - Invalid product market key
    #[error("Invalid product market key")]
    InvalidProductMarketKey = 0x1782,
    /// 6019 - Market not live
    #[error("Market not live")]
    MarketNotLive = 0x1783,
    /// 6020 - Market pricing not ready
    #[error("Market pricing not ready")]
    MarketPricingNotReady = 0x1784,
    /// 6021 - User has remaining orders on expired market
    #[error("User has remaining orders on expired market")]
    UserHasRemainingOrdersOnExpiredMarket = 0x1785,
    /// 6022 - Invalid series expiration
    #[error("Invalid series expiration")]
    InvalidSeriesExpiration = 0x1786,
    /// 6023 - Invalid expired order cancel
    #[error("Invalid expired order cancel")]
    InvalidExpiredOrderCancel = 0x1787,
    /// 6024 - No markets to add
    #[error("No markets to add")]
    NoMarketsToAdd = 0x1788,
    /// 6025 - User has unsettled positions
    #[error("User has unsettled positions")]
    UserHasUnsettledPositions = 0x1789,
    /// 6026 - No margin accounts to settle
    #[error("No margin accounts to settle")]
    NoMarginAccountsToSettle = 0x178a,
    /// 6027 - Cannot settle users with active orders
    #[error("Cannot settle users with active orders")]
    CannotSettleUserWithActiveOrders = 0x178b,
    /// 6028 - Orderbook not empty
    #[error("Orderbook not empty")]
    OrderbookNotEmpty = 0x178c,
    /// 6029 - Invalid number of accounts
    #[error("Invalid number of accounts")]
    InvalidNumberOfAccounts = 0x178d,
    /// 6030 - Bids or Asks don't match the Market
    #[error("Bids or Asks don't match the Market")]
    InvalidMarketAccounts = 0x178e,
    /// 6031 - Product strike uninitialized
    #[error("Product strike uninitialized")]
    ProductStrikeUninitialized = 0x178f,
    /// 6032 - Pricing not up to date
    #[error("Pricing not up to date")]
    PricingNotUpToDate = 0x1790,
    /// 6033 - Retreats are stale
    #[error("Retreats are stale")]
    RetreatsAreStale = 0x1791,
    /// 6034 - Product dirty
    #[error("Product dirty")]
    ProductDirty = 0x1792,
    /// 6035 - Product strikes initialized
    #[error("Product strikes initialized")]
    ProductStrikesInitialized = 0x1793,
    /// 6036 - Strike initialization not ready
    #[error("Strike initialization not ready")]
    StrikeInitializationNotReady = 0x1794,
    /// 6037 - Unsupported kind
    #[error("Unsupported kind")]
    UnsupportedKind = 0x1795,
    /// 6038 - Invalid zeta group
    #[error("Invalid zeta group")]
    InvalidZetaGroup = 0x1796,
    /// 6039 - Invalid margin account
    #[error("Invalid margin account")]
    InvalidMarginAccount = 0x1797,
    /// 6040 - Invalid greeks account
    #[error("Invalid greeks account")]
    InvalidGreeksAccount = 0x1798,
    /// 6041 - Invalid settlement account
    #[error("Invalid settlement account")]
    InvalidSettlementAccount = 0x1799,
    /// 6042 - Invalid cancel authority
    #[error("Invalid cancel authority")]
    InvalidCancelAuthority = 0x179a,
    /// 6043 - Cannot update pricing after expiry
    #[error("Cannot update pricing after expiry")]
    CannotUpdatePricingAfterExpiry = 0x179b,
    /// 6044 - Account discriminator already set
    #[error("Account discriminator already set")]
    LoadAccountDiscriminatorAlreadySet = 0x179c,
    /// 6045 - Account already initialized
    #[error("Account already initialized")]
    AccountAlreadyInitialized = 0x179d,
    /// 6046 - Greeks account seeds mismatch
    #[error("Greeks account seeds mismatch")]
    GreeksAccountSeedsMismatch = 0x179e,
    /// 6047 - Zeta group account seeds mismatch
    #[error("Zeta group account seeds mismatch")]
    ZetaGroupAccountSeedsMismatch = 0x179f,
    /// 6048 - Margin account seeds mismatch
    #[error("Margin account seeds mismatch")]
    MarginAccountSeedsMismatch = 0x17a0,
    /// 6049 - Open orders account seeds mismatch
    #[error("Open orders account seeds mismatch")]
    OpenOrdersAccountSeedsMismatch = 0x17a1,
    /// 6050 - Market node seeds mismatch
    #[error("Market node seeds mismatch")]
    MarketNodeAccountSeedsMismatch = 0x17a2,
    /// 6051 - User trading fee whitelist account seeds mismatch
    #[error("User trading fee whitelist account seeds mismatch")]
    UserTradingFeeWhitelistAccountSeedsMismatch = 0x17a3,
    /// 6052 - User deposit whitelist account seeds mismatch
    #[error("User deposit whitelist account seeds mismatch")]
    UserDepositWhitelistAccountSeedsMismatch = 0x17a4,
    /// 6053 - Market indexes uninitialized
    #[error("Market indexes uninitialized")]
    MarketIndexesUninitialized = 0x17a5,
    /// 6054 - Market indexes already initialized
    #[error("Market indexes already initialized")]
    MarketIndexesAlreadyInitialized = 0x17a6,
    /// 6055 - Cannot get unset strike
    #[error("Cannot get unset strike")]
    CannotGetUnsetStrike = 0x17a7,
    /// 6056 - Cannot set initialized strike
    #[error("Cannot set initialized strike")]
    CannotSetInitializedStrike = 0x17a8,
    /// 6057 - Cannot set initialized strike
    #[error("Cannot set initialized strike")]
    CannotResetUninitializedStrike = 0x17a9,
    /// 6058 - CrankMarginAccountNotMutable
    #[error("CrankMarginAccountNotMutable")]
    CrankMarginAccountNotMutable = 0x17aa,
    /// 6059 - InvalidAdminSigner
    #[error("InvalidAdminSigner")]
    InvalidAdminSigner = 0x17ab,
    /// 6060 - User still has active orders
    #[error("User still has active orders")]
    UserHasActiveOrders = 0x17ac,
    /// 6061 - User has a force cancel in progress
    #[error("User has a force cancel in progress")]
    UserForceCancelInProgress = 0x17ad,
    /// 6062 - Failed price band check
    #[error("Failed price band check")]
    FailedPriceBandCheck = 0x17ae,
    /// 6063 - Unsorted open orders accounts
    #[error("Unsorted open orders accounts")]
    UnsortedOpenOrdersAccounts = 0x17af,
    /// 6064 - Account not mutable
    #[error("Account not mutable")]
    AccountNotMutable = 0x17b0,
    /// 6065 - Account discriminator mismatch
    #[error("Account discriminator mismatch")]
    AccountDiscriminatorMismatch = 0x17b1,
    /// 6066 - Invalid market node index
    #[error("Invalid market node index")]
    InvalidMarketNodeIndex = 0x17b2,
    /// 6067 - Invalid market node
    #[error("Invalid market node")]
    InvalidMarketNode = 0x17b3,
    /// 6068 - Lut out of bounds
    #[error("Lut out of bounds")]
    LUTOutOfBounds = 0x17b4,
    /// 6069 - Rebalance insurance vault with no margin accounts
    #[error("Rebalance insurance vault with no margin accounts")]
    RebalanceInsuranceInvalidRemainingAccounts = 0x17b5,
    /// 6070 - Invalid mint decimals
    #[error("Invalid mint decimals")]
    InvalidMintDecimals = 0x17b6,
    /// 6071 - Invalid oracle for this zeta group
    #[error("Invalid oracle for this zeta group")]
    InvalidZetaGroupOracle = 0x17b7,
    /// 6072 - Invalid zeta group deposit mint
    #[error("Invalid zeta group deposit mint")]
    InvalidZetaGroupDepositMint = 0x17b8,
    /// 6073 - Invalid zeta group rebalance insurance vault mint
    #[error("Invalid zeta group rebalance insurance vault mint")]
    InvalidZetaGroupRebalanceMint = 0x17b9,
    /// 6074 - Invalid deposit amount
    #[error("Invalid deposit amount")]
    InvalidDepositAmount = 0x17ba,
    /// 6075 - Invalid token account owner
    #[error("Invalid token account owner")]
    InvalidTokenAccountOwner = 0x17bb,
    /// 6076 - Invalid withdraw amount
    #[error("Invalid withdraw amount")]
    InvalidWithdrawAmount = 0x17bc,
    /// 6077 - Invalid number of remaining accounts in deposit
    #[error("Invalid number of remaining accounts in deposit")]
    InvalidDepositRemainingAccounts = 0x17bd,
    /// 6078 - Invalid number of remaining accounts in place order
    #[error("Invalid number of remaining accounts in place order")]
    InvalidPlaceOrderRemainingAccounts = 0x17be,
    /// 6079 - ClientOrderIdCannotBeZero
    #[error("ClientOrderIdCannotBeZero")]
    ClientOrderIdCannotBeZero = 0x17bf,
    /// 6080 - Zeta group halted
    #[error("Zeta group halted")]
    ZetaGroupHalted = 0x17c0,
    /// 6081 - Zeta group not halted
    #[error("Zeta group not halted")]
    ZetaGroupNotHalted = 0x17c1,
    /// 6082 - Halt mark price not set
    #[error("Halt mark price not set")]
    HaltMarkPriceNotSet = 0x17c2,
    /// 6083 - Halt markets not cleaned
    #[error("Halt markets not cleaned")]
    HaltMarketsNotCleaned = 0x17c3,
    /// 6084 - Halt market nodes not cleaned
    #[error("Halt market nodes not cleaned")]
    HaltMarketNodesNotCleaned = 0x17c4,
    /// 6085 - Cannot expire options after expiration threshold
    #[error("Cannot expire options after expiration threshold")]
    CannotExpireOptionsAfterExpirationThreshold = 0x17c5,
    /// 6086 - Post only order in cross
    #[error("Post only order in cross")]
    PostOnlyInCross = 0x17c6,
    /// 6087 - Fill or kill order was not filled for full size
    #[error("Fill or kill order was not filled for full size")]
    FillOrKillNotFullSize = 0x17c7,
    /// 6088 - Invalid open orders map owner
    #[error("Invalid open orders map owner")]
    InvalidOpenOrdersMapOwner = 0x17c8,
    /// 6089 - Failed to serialize the account
    #[error("Failed to serialize the account")]
    AccountDidNotSerialize = 0x17c9,
    /// 6090 - Cannot close open orders account with non empty positions
    #[error("Cannot close open orders account with non empty positions")]
    OpenOrdersWithNonEmptyPositions = 0x17ca,
    /// 6091 - Cannot close margin account that is not empty
    #[error("Cannot close margin account that is not empty")]
    CannotCloseNonEmptyMarginAccount = 0x17cb,
    /// 6092 - Invalid tag length
    #[error("Invalid tag length")]
    InvalidTagLength = 0x17cc,
    /// 6093 - Naked short call is not allowed
    #[error("Naked short call is not allowed")]
    NakedShortCallIsNotAllowed = 0x17cd,
    /// 6094 - Invalid spread account
    #[error("Invalid spread account")]
    InvalidSpreadAccount = 0x17ce,
    /// 6095 - Cannot close non empty spread account
    #[error("Cannot close non empty spread account")]
    CannotCloseNonEmptySpreadAccount = 0x17cf,
    /// 6096 - Spread account seeds mismatch
    #[error("Spread account seeds mismatch")]
    SpreadAccountSeedsMismatch = 0x17d0,
    /// 6097 - Spread account seeds mismatch
    #[error("Spread account seeds mismatch")]
    SpreadAccountHasUnsettledPositions = 0x17d1,
    /// 6098 - Spread account invalid expiry series state
    #[error("Spread account invalid expiry series state")]
    SpreadAccountInvalidExpirySeriesState = 0x17d2,
    /// 6099 - Insufficient funds to collateralize spread account
    #[error("Insufficient funds to collateralize spread account")]
    InsufficientFundsToCollateralizeSpreadAccount = 0x17d3,
    /// 6100 - Failed maintenance margin requirement
    #[error("Failed maintenance margin requirement")]
    FailedMaintenanceMarginRequirement = 0x17d4,
    /// 6101 - Invalid movement
    #[error("Invalid movement")]
    InvalidMovement = 0x17d5,
    /// 6102 - Movement on expired series
    #[error("Movement on expired series")]
    MovementOnExpiredSeries = 0x17d6,
    /// 6103 - Invalid movement size
    #[error("Invalid movement size")]
    InvalidMovementSize = 0x17d7,
    /// 6104 - Exceeded max position movements
    #[error("Exceeded max position movements")]
    ExceededMaxPositionMovements = 0x17d8,
    /// 6105 - Exceeded max spread account contracts
    #[error("Exceeded max spread account contracts")]
    ExceededMaxSpreadAccountContracts = 0x17d9,
    /// 6106 - Fetched oracle price is invalid
    #[error("Fetched oracle price is invalid")]
    OraclePriceIsInvalid = 0x17da,
    /// 6107 - Provided underlying mint address is invalid
    #[error("Provided underlying mint address is invalid")]
    InvalidUnderlyingMint = 0x17db,
    /// 6108 - Invalid referrer alias - Invalid length
    #[error("Invalid referrer alias - Invalid length")]
    InvalidReferrerAlias = 0x17dc,
    /// 6109 - Referrer already has alias
    #[error("Referrer already has alias")]
    ReferrerAlreadyHasAlias = 0x17dd,
    /// 6110 - Invalid treasury movement amount
    #[error("Invalid treasury movement amount")]
    InvalidTreasuryMovementAmount = 0x17de,
    /// 6111 - Invalid referrals admin signer
    #[error("Invalid referrals admin signer")]
    InvalidReferralsAdminSigner = 0x17df,
    /// 6112 - Invalid set referrals rewards remaining accounts
    #[error("Invalid set referrals rewards remaining accounts")]
    InvalidSetReferralsRewardsRemainingAccounts = 0x17e0,
    /// 6113 - Referrals account not mutable
    #[error("Referrals account not mutable")]
    SetReferralsRewardsAccountNotMutable = 0x17e1,
    /// 6114 - Invalid claim referrals rewards: not enough in refererals rewards wallet
    #[error("Invalid claim referrals rewards: not enough in refererals rewards wallet")]
    InvalidClaimReferralsRewardsAmount = 0x17e2,
    /// 6115 - Invalid claim referrals rewards: referrals account is not a referral or referrer account
    #[error(
        "Invalid claim referrals rewards: referrals account is not a referral or referrer account"
    )]
    InvalidClaimReferralsRewardsAccount = 0x17e3,
    /// 6116 - Referral account seeds mismatch
    #[error("Referral account seeds mismatch")]
    ReferralAccountSeedsMismatch = 0x17e4,
    /// 6117 - Referrer account seeds mismatch
    #[error("Referrer account seeds mismatch")]
    ReferrerAccountSeedsMismatch = 0x17e5,
    /// 6118 - Market maker accounts are protected from liquidation
    #[error("Market maker accounts are protected from liquidation")]
    ProtectedMmMarginAccount = 0x17e6,
    /// 6119 - Cannot withdraw with open orders
    #[error("Cannot withdraw with open orders")]
    CannotWithdrawWithOpenOrders = 0x17e7,
    /// 6120 - Perp funding rate not up to date
    #[error("Perp funding rate not up to date")]
    FundingRateNotUpToDate = 0x17e8,
    /// 6121 - Perp taker/maker sync queue is full
    #[error("Perp taker/maker sync queue is full")]
    PerpSyncQueueFull = 0x17e9,
    /// 6122 - PerpSyncQueue account seeds mismatch
    #[error("PerpSyncQueue account seeds mismatch")]
    PerpSyncQueueAccountSeedsMismatch = 0x17ea,
    /// 6123 - Program tried to pop from an empty perpSyncQueue
    #[error("Program tried to pop from an empty perpSyncQueue")]
    PerpSyncQueueEmpty = 0x17eb,
    /// 6124 - Perp product index given in placeOrder, use placePerpOrder
    #[error("Perp product index given in placeOrder, use placePerpOrder")]
    InvalidNonPerpMarket = 0x17ec,
    /// 6125 - Non-perp product index given in placePerpOrder, use placeOrder
    #[error("Non-perp product index given in placePerpOrder, use placeOrder")]
    InvalidPerpMarket = 0x17ed,
    /// 6126 - Not allowed to initialize market node for a perp market
    #[error("Not allowed to initialize market node for a perp market")]
    CannotInitializePerpMarketNode = 0x17ee,
    /// 6127 - Instruction is deprecated, please use the newer version
    #[error("Instruction is deprecated, please use the newer version")]
    DeprecatedInstruction = 0x17ef,
    /// 6128 - Can only force cancel expired TIF orders
    #[error("Can only force cancel expired TIF orders")]
    ForceCancelExpiredTIFOrdersOnly = 0x17f0,
    /// 6129 - Invalid place order authority
    #[error("Invalid place order authority")]
    InvalidPlaceOrderAuthority = 0x17f1,
    /// 6130 - Invalid open orders authority
    #[error("Invalid open orders authority")]
    InvalidOpenOrdersAuthority = 0x17f2,
    /// 6131 - Insurance vault seeds mismatch
    #[error("Insurance vault seeds mismatch")]
    InsuranceVaultSeedsMismatch = 0x17f3,
    /// 6132 - Open interest limit breach, decrease your position
    #[error("Open interest limit breach, decrease your position")]
    OpenInterestLimitBreach = 0x17f4,
    /// 6133 - Withdraw limit breach, wait to withdraw more
    #[error("Withdraw limit breach, wait to withdraw more")]
    WithdrawLimitBreach = 0x17f5,
    /// 6134 - Invalid oracle for this pricing account
    #[error("Invalid oracle for this pricing account")]
    InvalidPricingOracle = 0x17f6,
    /// 6135 - Pricing account seeds mismatch
    #[error("Pricing account seeds mismatch")]
    PricingAccountSeedsMismatch = 0x17f7,
    /// 6136 - Zeta exchange is halted
    #[error("Zeta exchange is halted")]
    ZetaHalted = 0x17f8,
    /// 6137 - Zeta exchange is not halted
    #[error("Zeta exchange is not halted")]
    ZetaNotHalted = 0x17f9,
    /// 6138 - Cross margin account is not unused, close it and make a new one
    #[error("Cross margin account is not unused, close it and make a new one")]
    NotFreshCrossMarginAccount = 0x17fa,
    /// 6139 - Cannot close margin account manager that is not empty
    #[error("Cannot close margin account manager that is not empty")]
    CannotCloseNonEmptyMarginAccountManager = 0x17fb,
    /// 6140 - Cannot migrate to cross margin account with open orders, close all open orders
    #[error("Cannot migrate to cross margin account with open orders, close all open orders")]
    CannotMigrateWithOpenOrders = 0x17fc,
    /// 6141 - Invalid margin account type - account is not MarginAccount or CrossMarginAccount
    #[error("Invalid margin account type - account is not MarginAccount or CrossMarginAccount")]
    InvalidMarginAccountType = 0x17fd,
    /// 6142 - Margin account asset mismatched with instruction argument asset
    #[error("Margin account asset mismatched with instruction argument asset")]
    MarginAccountAssetMismatch = 0x17fe,
    /// 6143 - Feature is not available yet
    #[error("Feature is not available yet")]
    FeatureUnavailable = 0x17ff,
    /// 6144 - MarginAccount cannot liquidate CrossMarginAccount
    #[error("MarginAccount cannot liquidate CrossMarginAccount")]
    MarginAccountCannotLiquidateCrossMarginAccount = 0x1800,
}

impl solana_program::program_error::PrintProgramError for ZetaError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for ZetaError {
    fn type_of() -> &'static str { "ZetaError" }
}
