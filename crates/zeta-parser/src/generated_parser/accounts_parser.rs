//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{
        CrossMarginAccount, CrossMarginAccountManager, CrossOpenOrdersMap, Greeks,
        InsuranceDepositAccount, MarginAccount, MarketIndexes, MarketNode, OpenOrdersMap,
        PerpSyncQueue, Pricing, ReferralAccount, ReferrerAccount, ReferrerAlias, SettlementAccount,
        SocializedLossAccount, SpreadAccount, State, Underlying, WhitelistDepositAccount,
        WhitelistInsuranceAccount, WhitelistTradingFeesAccount, ZetaGroup,
    },
    ID,
};

/// Zeta Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
pub enum ZetaProgramState {
    Pricing(Pricing),
    Greeks(Greeks),
    MarketIndexes(MarketIndexes),
    OpenOrdersMap(OpenOrdersMap),
    CrossOpenOrdersMap(CrossOpenOrdersMap),
    State(State),
    Underlying(Underlying),
    SettlementAccount(SettlementAccount),
    PerpSyncQueue(PerpSyncQueue),
    ZetaGroup(ZetaGroup),
    MarketNode(MarketNode),
    SpreadAccount(SpreadAccount),
    CrossMarginAccountManager(CrossMarginAccountManager),
    CrossMarginAccount(CrossMarginAccount),
    MarginAccount(MarginAccount),
    SocializedLossAccount(SocializedLossAccount),
    WhitelistDepositAccount(WhitelistDepositAccount),
    WhitelistInsuranceAccount(WhitelistInsuranceAccount),
    InsuranceDepositAccount(InsuranceDepositAccount),
    WhitelistTradingFeesAccount(WhitelistTradingFeesAccount),
    ReferrerAccount(ReferrerAccount),
    ReferralAccount(ReferralAccount),
    ReferrerAlias(ReferrerAlias),
}

impl ZetaProgramState {
    #[allow(unreachable_patterns)]
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let data_len = data_bytes.len();
        match data_len {
            Pricing::LEN => Ok(ZetaProgramState::Pricing(Pricing::from_bytes(data_bytes)?)),
            Greeks::LEN => Ok(ZetaProgramState::Greeks(Greeks::from_bytes(data_bytes)?)),
            MarketIndexes::LEN => Ok(ZetaProgramState::MarketIndexes(MarketIndexes::from_bytes(
                data_bytes,
            )?)),
            OpenOrdersMap::LEN => Ok(ZetaProgramState::OpenOrdersMap(OpenOrdersMap::from_bytes(
                data_bytes,
            )?)),
            CrossOpenOrdersMap::LEN => Ok(ZetaProgramState::CrossOpenOrdersMap(
                CrossOpenOrdersMap::from_bytes(data_bytes)?,
            )),
            State::LEN => Ok(ZetaProgramState::State(State::from_bytes(data_bytes)?)),
            Underlying::LEN => Ok(ZetaProgramState::Underlying(Underlying::from_bytes(
                data_bytes,
            )?)),
            SettlementAccount::LEN => Ok(ZetaProgramState::SettlementAccount(
                SettlementAccount::from_bytes(data_bytes)?,
            )),
            PerpSyncQueue::LEN => Ok(ZetaProgramState::PerpSyncQueue(PerpSyncQueue::from_bytes(
                data_bytes,
            )?)),
            ZetaGroup::LEN => Ok(ZetaProgramState::ZetaGroup(ZetaGroup::from_bytes(
                data_bytes,
            )?)),
            MarketNode::LEN => Ok(ZetaProgramState::MarketNode(MarketNode::from_bytes(
                data_bytes,
            )?)),
            SpreadAccount::LEN => Ok(ZetaProgramState::SpreadAccount(SpreadAccount::from_bytes(
                data_bytes,
            )?)),
            CrossMarginAccountManager::LEN => Ok(ZetaProgramState::CrossMarginAccountManager(
                CrossMarginAccountManager::from_bytes(data_bytes)?,
            )),
            CrossMarginAccount::LEN => Ok(ZetaProgramState::CrossMarginAccount(
                CrossMarginAccount::from_bytes(data_bytes)?,
            )),
            MarginAccount::LEN => Ok(ZetaProgramState::MarginAccount(MarginAccount::from_bytes(
                data_bytes,
            )?)),
            SocializedLossAccount::LEN => Ok(ZetaProgramState::SocializedLossAccount(
                SocializedLossAccount::from_bytes(data_bytes)?,
            )),
            WhitelistDepositAccount::LEN => Ok(ZetaProgramState::WhitelistDepositAccount(
                WhitelistDepositAccount::from_bytes(data_bytes)?,
            )),
            WhitelistInsuranceAccount::LEN => Ok(ZetaProgramState::WhitelistInsuranceAccount(
                WhitelistInsuranceAccount::from_bytes(data_bytes)?,
            )),
            InsuranceDepositAccount::LEN => Ok(ZetaProgramState::InsuranceDepositAccount(
                InsuranceDepositAccount::from_bytes(data_bytes)?,
            )),
            WhitelistTradingFeesAccount::LEN => Ok(ZetaProgramState::WhitelistTradingFeesAccount(
                WhitelistTradingFeesAccount::from_bytes(data_bytes)?,
            )),
            ReferrerAccount::LEN => Ok(ZetaProgramState::ReferrerAccount(
                ReferrerAccount::from_bytes(data_bytes)?,
            )),
            ReferralAccount::LEN => Ok(ZetaProgramState::ReferralAccount(
                ReferralAccount::from_bytes(data_bytes)?,
            )),
            ReferrerAlias::LEN => Ok(ZetaProgramState::ReferrerAlias(ReferrerAlias::from_bytes(
                data_bytes,
            )?)),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account data length".to_owned(),
            )),
        }
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = ZetaProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "zeta::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        ZetaProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}
