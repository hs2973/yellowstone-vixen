//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum KaminoVaultError {
    /// 7000 - DepositAmountsZero
    #[error("DepositAmountsZero")]
    DepositAmountsZero = 0x1B58,
    /// 7001 - SharesIssuedAmountDoesNotMatch
    #[error("SharesIssuedAmountDoesNotMatch")]
    SharesIssuedAmountDoesNotMatch = 0x1B59,
    /// 7002 - MathOverflow
    #[error("MathOverflow")]
    MathOverflow = 0x1B5A,
    /// 7003 - IntegerOverflow
    #[error("IntegerOverflow")]
    IntegerOverflow = 0x1B5B,
    /// 7004 - Withdrawn amount is below minimum
    #[error("Withdrawn amount is below minimum")]
    WithdrawAmountBelowMinimum = 0x1B5C,
    /// 7005 - TooMuchLiquidityToWithdraw
    #[error("TooMuchLiquidityToWithdraw")]
    TooMuchLiquidityToWithdraw = 0x1B5D,
    /// 7006 - ReserveAlreadyExists
    #[error("ReserveAlreadyExists")]
    ReserveAlreadyExists = 0x1B5E,
    /// 7007 - ReserveNotPartOfAllocations
    #[error("ReserveNotPartOfAllocations")]
    ReserveNotPartOfAllocations = 0x1B5F,
    /// 7008 - CouldNotDeserializeAccountAsReserve
    #[error("CouldNotDeserializeAccountAsReserve")]
    CouldNotDeserializeAccountAsReserve = 0x1B60,
    /// 7009 - ReserveNotProvidedInTheAccounts
    #[error("ReserveNotProvidedInTheAccounts")]
    ReserveNotProvidedInTheAccounts = 0x1B61,
    /// 7010 - ReserveAccountAndKeyMismatch
    #[error("ReserveAccountAndKeyMismatch")]
    ReserveAccountAndKeyMismatch = 0x1B62,
    /// 7011 - OutOfRangeOfReserveIndex
    #[error("OutOfRangeOfReserveIndex")]
    OutOfRangeOfReserveIndex = 0x1B63,
    /// 7012 - OutOfRangeOfReserveIndex
    #[error("OutOfRangeOfReserveIndex")]
    CannotFindReserveInAllocations = 0x1B64,
    /// 7013 - Invested amount is below minimum
    #[error("Invested amount is below minimum")]
    InvestAmountBelowMinimum = 0x1B65,
    /// 7014 - AdminAuthorityIncorrect
    #[error("AdminAuthorityIncorrect")]
    AdminAuthorityIncorrect = 0x1B66,
    /// 7015 - BaseVaultAuthorityIncorrect
    #[error("BaseVaultAuthorityIncorrect")]
    BaseVaultAuthorityIncorrect = 0x1B67,
    /// 7016 - BaseVaultAuthorityBumpIncorrect
    #[error("BaseVaultAuthorityBumpIncorrect")]
    BaseVaultAuthorityBumpIncorrect = 0x1B68,
    /// 7017 - TokenMintIncorrect
    #[error("TokenMintIncorrect")]
    TokenMintIncorrect = 0x1B69,
    /// 7018 - TokenMintDecimalsIncorrect
    #[error("TokenMintDecimalsIncorrect")]
    TokenMintDecimalsIncorrect = 0x1B6A,
    /// 7019 - TokenVaultIncorrect
    #[error("TokenVaultIncorrect")]
    TokenVaultIncorrect = 0x1B6B,
    /// 7020 - SharesMintDecimalsIncorrect
    #[error("SharesMintDecimalsIncorrect")]
    SharesMintDecimalsIncorrect = 0x1B6C,
    /// 7021 - SharesMintIncorrect
    #[error("SharesMintIncorrect")]
    SharesMintIncorrect = 0x1B6D,
    /// 7022 - InitialAccountingIncorrect
    #[error("InitialAccountingIncorrect")]
    InitialAccountingIncorrect = 0x1B6E,
    /// 7023 - Reserve is stale and must be refreshed before any operation
    #[error("Reserve is stale and must be refreshed before any operation")]
    ReserveIsStale = 0x1B6F,
    /// 7024 - Not enough liquidity disinvested to send to user
    #[error("Not enough liquidity disinvested to send to user")]
    NotEnoughLiquidityDisinvestedToSendToUser = 0x1B70,
    /// 7025 - BPS value is greater than 10000
    #[error("BPS value is greater than 10000")]
    BPSValueTooBig = 0x1B71,
    /// 7026 - Deposited amount is below minimum
    #[error("Deposited amount is below minimum")]
    DepositAmountBelowMinimum = 0x1B72,
    /// 7027 - Vault have no space for new reserves
    #[error("Vault have no space for new reserves")]
    ReserveSpaceExhausted = 0x1B73,
    /// 7028 - Cannot withdraw from empty vault
    #[error("Cannot withdraw from empty vault")]
    CannotWithdrawFromEmptyVault = 0x1B74,
    /// 7029 - TokensDepositedAmountDoesNotMatch
    #[error("TokensDepositedAmountDoesNotMatch")]
    TokensDepositedAmountDoesNotMatch = 0x1B75,
    /// 7030 - Amount to withdraw does not match
    #[error("Amount to withdraw does not match")]
    AmountToWithdrawDoesNotMatch = 0x1B76,
    /// 7031 - Liquidity to withdraw does not match
    #[error("Liquidity to withdraw does not match")]
    LiquidityToWithdrawDoesNotMatch = 0x1B77,
    /// 7032 - User received amount does not match
    #[error("User received amount does not match")]
    UserReceivedAmountDoesNotMatch = 0x1B78,
    /// 7033 - Shares burned amount does not match
    #[error("Shares burned amount does not match")]
    SharesBurnedAmountDoesNotMatch = 0x1B79,
    /// 7034 - Disinvested liquidity amount does not match
    #[error("Disinvested liquidity amount does not match")]
    DisinvestedLiquidityAmountDoesNotMatch = 0x1B7A,
    /// 7035 - SharesMintedAmountDoesNotMatch
    #[error("SharesMintedAmountDoesNotMatch")]
    SharesMintedAmountDoesNotMatch = 0x1B7B,
    /// 7036 - AUM decreased after invest
    #[error("AUM decreased after invest")]
    AUMDecreasedAfterInvest = 0x1B7C,
    /// 7037 - AUM is below pending fees
    #[error("AUM is below pending fees")]
    AUMBelowPendingFees = 0x1B7D,
    /// 7038 - Deposit amount results in 0 shares
    #[error("Deposit amount results in 0 shares")]
    DepositAmountsZeroShares = 0x1B7E,
    /// 7039 - Withdraw amount results in 0 shares
    #[error("Withdraw amount results in 0 shares")]
    WithdrawResultsInZeroShares = 0x1B7F,
    /// 7040 - Cannot withdraw zero shares
    #[error("Cannot withdraw zero shares")]
    CannotWithdrawZeroShares = 0x1B80,
    /// 7041 - Management fee is greater than maximum allowed
    #[error("Management fee is greater than maximum allowed")]
    ManagementFeeGreaterThanMaxAllowed = 0x1B81,
    /// 7042 - Vault assets under management are empty
    #[error("Vault assets under management are empty")]
    VaultAUMZero = 0x1B82,
    /// 7043 - Missing reserve for batch refresh
    #[error("Missing reserve for batch refresh")]
    MissingReserveForBatchRefresh = 0x1B83,
    /// 7044 - Min withdraw amount is too big
    #[error("Min withdraw amount is too big")]
    MinWithdrawAmountTooBig = 0x1B84,
    /// 7045 - Invest is called too soon after last invest
    #[error("Invest is called too soon after last invest")]
    InvestTooSoon = 0x1B85,
    /// 7046 - Wrong admin or allocation admin
    #[error("Wrong admin or allocation admin")]
    WrongAdminOrAllocationAdmin = 0x1B86,
}

impl solana_program::program_error::PrintProgramError for KaminoVaultError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for KaminoVaultError {
    fn type_of() -> &'static str {
        "KaminoVaultError"
    }
}

