//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct InitializeSharesMetadata {
      
              
          pub vault_admin_authority: solana_program::pubkey::Pubkey,
          
              
          pub vault_state: solana_program::pubkey::Pubkey,
          
              
          pub shares_mint: solana_program::pubkey::Pubkey,
          
              
          pub base_vault_authority: solana_program::pubkey::Pubkey,
          
              
          pub shares_metadata: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub rent: solana_program::pubkey::Pubkey,
          
              
          pub metadata_program: solana_program::pubkey::Pubkey,
      }

impl InitializeSharesMetadata {
  pub fn instruction(&self, args: InitializeSharesMetadataInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitializeSharesMetadataInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_admin_authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_state,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.shares_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_vault_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.shares_metadata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&InitializeSharesMetadataInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::KAMINO_VAULT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeSharesMetadataInstructionData {
            discriminator: [u8; 8],
                        }

impl InitializeSharesMetadataInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [3, 15, 172, 114, 200, 0, 131, 32],
                                                            }
  }
}

impl Default for InitializeSharesMetadataInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeSharesMetadataInstructionArgs {
                  pub name: String,
                pub symbol: String,
                pub uri: String,
      }


/// Instruction builder for `InitializeSharesMetadata`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` vault_admin_authority
          ///   1. `[]` vault_state
          ///   2. `[]` shares_mint
          ///   3. `[]` base_vault_authority
                ///   4. `[writable]` shares_metadata
                ///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   6. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
          ///   7. `[]` metadata_program
#[derive(Clone, Debug, Default)]
pub struct InitializeSharesMetadataBuilder {
            vault_admin_authority: Option<solana_program::pubkey::Pubkey>,
                vault_state: Option<solana_program::pubkey::Pubkey>,
                shares_mint: Option<solana_program::pubkey::Pubkey>,
                base_vault_authority: Option<solana_program::pubkey::Pubkey>,
                shares_metadata: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                rent: Option<solana_program::pubkey::Pubkey>,
                metadata_program: Option<solana_program::pubkey::Pubkey>,
                        name: Option<String>,
                symbol: Option<String>,
                uri: Option<String>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeSharesMetadataBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn vault_admin_authority(&mut self, vault_admin_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault_admin_authority = Some(vault_admin_authority);
                    self
    }
            #[inline(always)]
    pub fn vault_state(&mut self, vault_state: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault_state = Some(vault_state);
                    self
    }
            #[inline(always)]
    pub fn shares_mint(&mut self, shares_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.shares_mint = Some(shares_mint);
                    self
    }
            #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.base_vault_authority = Some(base_vault_authority);
                    self
    }
            #[inline(always)]
    pub fn shares_metadata(&mut self, shares_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.shares_metadata = Some(shares_metadata);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
#[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            #[inline(always)]
    pub fn metadata_program(&mut self, metadata_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.metadata_program = Some(metadata_program);
                    self
    }
                    #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
      }
                #[inline(always)]
      pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.symbol = Some(symbol);
        self
      }
                #[inline(always)]
      pub fn uri(&mut self, uri: String) -> &mut Self {
        self.uri = Some(uri);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = InitializeSharesMetadata {
                              vault_admin_authority: self.vault_admin_authority.expect("vault_admin_authority is not set"),
                                        vault_state: self.vault_state.expect("vault_state is not set"),
                                        shares_mint: self.shares_mint.expect("shares_mint is not set"),
                                        base_vault_authority: self.base_vault_authority.expect("base_vault_authority is not set"),
                                        shares_metadata: self.shares_metadata.expect("shares_metadata is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        rent: self.rent.unwrap_or(solana_program::pubkey!("SysvarRent111111111111111111111111111111111")),
                                        metadata_program: self.metadata_program.expect("metadata_program is not set"),
                      };
          let args = InitializeSharesMetadataInstructionArgs {
                                                              name: self.name.clone().expect("name is not set"),
                                                                  symbol: self.symbol.clone().expect("symbol is not set"),
                                                                  uri: self.uri.clone().expect("uri is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `initialize_shares_metadata` CPI accounts.
  pub struct InitializeSharesMetadataCpiAccounts<'a, 'b> {
          
                    
              pub vault_admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault_state: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub shares_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub shares_metadata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `initialize_shares_metadata` CPI instruction.
pub struct InitializeSharesMetadataCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub vault_admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault_state: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub shares_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub shares_metadata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitializeSharesMetadataInstructionArgs,
  }

impl<'a, 'b> InitializeSharesMetadataCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: InitializeSharesMetadataCpiAccounts<'a, 'b>,
              args: InitializeSharesMetadataInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              vault_admin_authority: accounts.vault_admin_authority,
              vault_state: accounts.vault_state,
              shares_mint: accounts.shares_mint,
              base_vault_authority: accounts.base_vault_authority,
              shares_metadata: accounts.shares_metadata,
              system_program: accounts.system_program,
              rent: accounts.rent,
              metadata_program: accounts.metadata_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_admin_authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_state.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.shares_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_vault_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.shares_metadata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&InitializeSharesMetadataInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::KAMINO_VAULT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.vault_admin_authority.clone());
                        account_infos.push(self.vault_state.clone());
                        account_infos.push(self.shares_mint.clone());
                        account_infos.push(self.base_vault_authority.clone());
                        account_infos.push(self.shares_metadata.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.metadata_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitializeSharesMetadata` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` vault_admin_authority
          ///   1. `[]` vault_state
          ///   2. `[]` shares_mint
          ///   3. `[]` base_vault_authority
                ///   4. `[writable]` shares_metadata
          ///   5. `[]` system_program
          ///   6. `[]` rent
          ///   7. `[]` metadata_program
#[derive(Clone, Debug)]
pub struct InitializeSharesMetadataCpiBuilder<'a, 'b> {
  instruction: Box<InitializeSharesMetadataCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeSharesMetadataCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitializeSharesMetadataCpiBuilderInstruction {
      __program: program,
              vault_admin_authority: None,
              vault_state: None,
              shares_mint: None,
              base_vault_authority: None,
              shares_metadata: None,
              system_program: None,
              rent: None,
              metadata_program: None,
                                            name: None,
                                symbol: None,
                                uri: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn vault_admin_authority(&mut self, vault_admin_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault_admin_authority = Some(vault_admin_authority);
                    self
    }
      #[inline(always)]
    pub fn vault_state(&mut self, vault_state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault_state = Some(vault_state);
                    self
    }
      #[inline(always)]
    pub fn shares_mint(&mut self, shares_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.shares_mint = Some(shares_mint);
                    self
    }
      #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.base_vault_authority = Some(base_vault_authority);
                    self
    }
      #[inline(always)]
    pub fn shares_metadata(&mut self, shares_metadata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.shares_metadata = Some(shares_metadata);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn metadata_program(&mut self, metadata_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.metadata_program = Some(metadata_program);
                    self
    }
                    #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
      }
                #[inline(always)]
      pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.instruction.symbol = Some(symbol);
        self
      }
                #[inline(always)]
      pub fn uri(&mut self, uri: String) -> &mut Self {
        self.instruction.uri = Some(uri);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = InitializeSharesMetadataInstructionArgs {
                                                              name: self.instruction.name.clone().expect("name is not set"),
                                                                  symbol: self.instruction.symbol.clone().expect("symbol is not set"),
                                                                  uri: self.instruction.uri.clone().expect("uri is not set"),
                                    };
        let instruction = InitializeSharesMetadataCpi {
        __program: self.instruction.__program,
                  
          vault_admin_authority: self.instruction.vault_admin_authority.expect("vault_admin_authority is not set"),
                  
          vault_state: self.instruction.vault_state.expect("vault_state is not set"),
                  
          shares_mint: self.instruction.shares_mint.expect("shares_mint is not set"),
                  
          base_vault_authority: self.instruction.base_vault_authority.expect("base_vault_authority is not set"),
                  
          shares_metadata: self.instruction.shares_metadata.expect("shares_metadata is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          metadata_program: self.instruction.metadata_program.expect("metadata_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitializeSharesMetadataCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            vault_admin_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                shares_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                shares_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        name: Option<String>,
                symbol: Option<String>,
                uri: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

