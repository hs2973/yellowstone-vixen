//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct UpdateReserveAllocation {
      
              
          pub signer: solana_program::pubkey::Pubkey,
          
              
          pub vault_state: solana_program::pubkey::Pubkey,
          
              
          pub base_vault_authority: solana_program::pubkey::Pubkey,
          
              
          pub reserve_collateral_mint: solana_program::pubkey::Pubkey,
          
              
          pub reserve: solana_program::pubkey::Pubkey,
          
              
          pub ctoken_vault: solana_program::pubkey::Pubkey,
          
              
          pub reserve_collateral_token_program: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub rent: solana_program::pubkey::Pubkey,
      }

impl UpdateReserveAllocation {
  pub fn instruction(&self, args: UpdateReserveAllocationInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: UpdateReserveAllocationInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(9+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.signer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_state,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_vault_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_collateral_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.reserve,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.ctoken_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.reserve_collateral_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&UpdateReserveAllocationInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::KAMINO_VAULT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UpdateReserveAllocationInstructionData {
            discriminator: [u8; 8],
                  }

impl UpdateReserveAllocationInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [5, 54, 213, 112, 75, 232, 117, 37],
                                              }
  }
}

impl Default for UpdateReserveAllocationInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UpdateReserveAllocationInstructionArgs {
                  pub weight: u64,
                pub cap: u64,
      }


/// Instruction builder for `UpdateReserveAllocation`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` vault_state
          ///   2. `[]` base_vault_authority
                ///   3. `[writable]` reserve_collateral_mint
          ///   4. `[]` reserve
                ///   5. `[writable]` ctoken_vault
          ///   6. `[]` reserve_collateral_token_program
                ///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   8. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct UpdateReserveAllocationBuilder {
            signer: Option<solana_program::pubkey::Pubkey>,
                vault_state: Option<solana_program::pubkey::Pubkey>,
                base_vault_authority: Option<solana_program::pubkey::Pubkey>,
                reserve_collateral_mint: Option<solana_program::pubkey::Pubkey>,
                reserve: Option<solana_program::pubkey::Pubkey>,
                ctoken_vault: Option<solana_program::pubkey::Pubkey>,
                reserve_collateral_token_program: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                rent: Option<solana_program::pubkey::Pubkey>,
                        weight: Option<u64>,
                cap: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateReserveAllocationBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.signer = Some(signer);
                    self
    }
            #[inline(always)]
    pub fn vault_state(&mut self, vault_state: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault_state = Some(vault_state);
                    self
    }
            #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.base_vault_authority = Some(base_vault_authority);
                    self
    }
            #[inline(always)]
    pub fn reserve_collateral_mint(&mut self, reserve_collateral_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve_collateral_mint = Some(reserve_collateral_mint);
                    self
    }
            #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve = Some(reserve);
                    self
    }
            #[inline(always)]
    pub fn ctoken_vault(&mut self, ctoken_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.ctoken_vault = Some(ctoken_vault);
                    self
    }
            #[inline(always)]
    pub fn reserve_collateral_token_program(&mut self, reserve_collateral_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve_collateral_token_program = Some(reserve_collateral_token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
#[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
                    #[inline(always)]
      pub fn weight(&mut self, weight: u64) -> &mut Self {
        self.weight = Some(weight);
        self
      }
                #[inline(always)]
      pub fn cap(&mut self, cap: u64) -> &mut Self {
        self.cap = Some(cap);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = UpdateReserveAllocation {
                              signer: self.signer.expect("signer is not set"),
                                        vault_state: self.vault_state.expect("vault_state is not set"),
                                        base_vault_authority: self.base_vault_authority.expect("base_vault_authority is not set"),
                                        reserve_collateral_mint: self.reserve_collateral_mint.expect("reserve_collateral_mint is not set"),
                                        reserve: self.reserve.expect("reserve is not set"),
                                        ctoken_vault: self.ctoken_vault.expect("ctoken_vault is not set"),
                                        reserve_collateral_token_program: self.reserve_collateral_token_program.expect("reserve_collateral_token_program is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        rent: self.rent.unwrap_or(solana_program::pubkey!("SysvarRent111111111111111111111111111111111")),
                      };
          let args = UpdateReserveAllocationInstructionArgs {
                                                              weight: self.weight.clone().expect("weight is not set"),
                                                                  cap: self.cap.clone().expect("cap is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `update_reserve_allocation` CPI accounts.
  pub struct UpdateReserveAllocationCpiAccounts<'a, 'b> {
          
                    
              pub signer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault_state: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve_collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub ctoken_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve_collateral_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `update_reserve_allocation` CPI instruction.
pub struct UpdateReserveAllocationCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub signer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault_state: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve_collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub ctoken_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve_collateral_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: UpdateReserveAllocationInstructionArgs,
  }

impl<'a, 'b> UpdateReserveAllocationCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: UpdateReserveAllocationCpiAccounts<'a, 'b>,
              args: UpdateReserveAllocationInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              signer: accounts.signer,
              vault_state: accounts.vault_state,
              base_vault_authority: accounts.base_vault_authority,
              reserve_collateral_mint: accounts.reserve_collateral_mint,
              reserve: accounts.reserve,
              ctoken_vault: accounts.ctoken_vault,
              reserve_collateral_token_program: accounts.reserve_collateral_token_program,
              system_program: accounts.system_program,
              rent: accounts.rent,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(9+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.signer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_state.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_vault_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_collateral_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.reserve.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ctoken_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.reserve_collateral_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&UpdateReserveAllocationInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::KAMINO_VAULT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.signer.clone());
                        account_infos.push(self.vault_state.clone());
                        account_infos.push(self.base_vault_authority.clone());
                        account_infos.push(self.reserve_collateral_mint.clone());
                        account_infos.push(self.reserve.clone());
                        account_infos.push(self.ctoken_vault.clone());
                        account_infos.push(self.reserve_collateral_token_program.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.rent.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `UpdateReserveAllocation` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` vault_state
          ///   2. `[]` base_vault_authority
                ///   3. `[writable]` reserve_collateral_mint
          ///   4. `[]` reserve
                ///   5. `[writable]` ctoken_vault
          ///   6. `[]` reserve_collateral_token_program
          ///   7. `[]` system_program
          ///   8. `[]` rent
#[derive(Clone, Debug)]
pub struct UpdateReserveAllocationCpiBuilder<'a, 'b> {
  instruction: Box<UpdateReserveAllocationCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateReserveAllocationCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(UpdateReserveAllocationCpiBuilderInstruction {
      __program: program,
              signer: None,
              vault_state: None,
              base_vault_authority: None,
              reserve_collateral_mint: None,
              reserve: None,
              ctoken_vault: None,
              reserve_collateral_token_program: None,
              system_program: None,
              rent: None,
                                            weight: None,
                                cap: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.signer = Some(signer);
                    self
    }
      #[inline(always)]
    pub fn vault_state(&mut self, vault_state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault_state = Some(vault_state);
                    self
    }
      #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.base_vault_authority = Some(base_vault_authority);
                    self
    }
      #[inline(always)]
    pub fn reserve_collateral_mint(&mut self, reserve_collateral_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_collateral_mint = Some(reserve_collateral_mint);
                    self
    }
      #[inline(always)]
    pub fn reserve(&mut self, reserve: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve = Some(reserve);
                    self
    }
      #[inline(always)]
    pub fn ctoken_vault(&mut self, ctoken_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.ctoken_vault = Some(ctoken_vault);
                    self
    }
      #[inline(always)]
    pub fn reserve_collateral_token_program(&mut self, reserve_collateral_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_collateral_token_program = Some(reserve_collateral_token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
                    #[inline(always)]
      pub fn weight(&mut self, weight: u64) -> &mut Self {
        self.instruction.weight = Some(weight);
        self
      }
                #[inline(always)]
      pub fn cap(&mut self, cap: u64) -> &mut Self {
        self.instruction.cap = Some(cap);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = UpdateReserveAllocationInstructionArgs {
                                                              weight: self.instruction.weight.clone().expect("weight is not set"),
                                                                  cap: self.instruction.cap.clone().expect("cap is not set"),
                                    };
        let instruction = UpdateReserveAllocationCpi {
        __program: self.instruction.__program,
                  
          signer: self.instruction.signer.expect("signer is not set"),
                  
          vault_state: self.instruction.vault_state.expect("vault_state is not set"),
                  
          base_vault_authority: self.instruction.base_vault_authority.expect("base_vault_authority is not set"),
                  
          reserve_collateral_mint: self.instruction.reserve_collateral_mint.expect("reserve_collateral_mint is not set"),
                  
          reserve: self.instruction.reserve.expect("reserve is not set"),
                  
          ctoken_vault: self.instruction.ctoken_vault.expect("ctoken_vault is not set"),
                  
          reserve_collateral_token_program: self.instruction.reserve_collateral_token_program.expect("reserve_collateral_token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct UpdateReserveAllocationCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve_collateral_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                ctoken_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve_collateral_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        weight: Option<u64>,
                cap: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

