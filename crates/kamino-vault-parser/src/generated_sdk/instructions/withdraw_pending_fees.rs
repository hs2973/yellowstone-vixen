//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct WithdrawPendingFees {
      
              
          pub vault_admin_authority: solana_program::pubkey::Pubkey,
          
              
          pub vault_state: solana_program::pubkey::Pubkey,
          
              
          pub reserve: solana_program::pubkey::Pubkey,
          
              
          pub token_vault: solana_program::pubkey::Pubkey,
          
              
          pub ctoken_vault: solana_program::pubkey::Pubkey,
          
              
          pub base_vault_authority: solana_program::pubkey::Pubkey,
          
              
          pub token_ata: solana_program::pubkey::Pubkey,
          
              
          pub token_mint: solana_program::pubkey::Pubkey,
                /// CPI accounts

    
              
          pub lending_market: solana_program::pubkey::Pubkey,
          
              
          pub lending_market_authority: solana_program::pubkey::Pubkey,
          
              
          pub reserve_liquidity_supply: solana_program::pubkey::Pubkey,
          
              
          pub reserve_collateral_mint: solana_program::pubkey::Pubkey,
          
              
          pub klend_program: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub reserve_collateral_token_program: solana_program::pubkey::Pubkey,
          
              
          pub instruction_sysvar_account: solana_program::pubkey::Pubkey,
      }

impl WithdrawPendingFees {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(16+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_admin_authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_state,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.ctoken_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lending_market,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lending_market_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_liquidity_supply,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_collateral_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.klend_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.reserve_collateral_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.instruction_sysvar_account,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&WithdrawPendingFeesInstructionData::new()).unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::KAMINO_VAULT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct WithdrawPendingFeesInstructionData {
            discriminator: [u8; 8],
      }

impl WithdrawPendingFeesInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [131, 194, 200, 140, 175, 244, 217, 183],
                  }
  }
}

impl Default for WithdrawPendingFeesInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `WithdrawPendingFees`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` vault_admin_authority
                ///   1. `[writable]` vault_state
                ///   2. `[writable]` reserve
                ///   3. `[writable]` token_vault
                ///   4. `[writable]` ctoken_vault
                ///   5. `[writable]` base_vault_authority
                ///   6. `[writable]` token_ata
                ///   7. `[writable]` token_mint
          ///   8. `[]` lending_market
          ///   9. `[]` lending_market_authority
                ///   10. `[writable]` reserve_liquidity_supply
                ///   11. `[writable]` reserve_collateral_mint
          ///   12. `[]` klend_program
                ///   13. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
          ///   14. `[]` reserve_collateral_token_program
                ///   15. `[optional]` instruction_sysvar_account (default to `Sysvar1nstructions1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct WithdrawPendingFeesBuilder {
            vault_admin_authority: Option<solana_program::pubkey::Pubkey>,
                vault_state: Option<solana_program::pubkey::Pubkey>,
                reserve: Option<solana_program::pubkey::Pubkey>,
                token_vault: Option<solana_program::pubkey::Pubkey>,
                ctoken_vault: Option<solana_program::pubkey::Pubkey>,
                base_vault_authority: Option<solana_program::pubkey::Pubkey>,
                token_ata: Option<solana_program::pubkey::Pubkey>,
                token_mint: Option<solana_program::pubkey::Pubkey>,
                lending_market: Option<solana_program::pubkey::Pubkey>,
                lending_market_authority: Option<solana_program::pubkey::Pubkey>,
                reserve_liquidity_supply: Option<solana_program::pubkey::Pubkey>,
                reserve_collateral_mint: Option<solana_program::pubkey::Pubkey>,
                klend_program: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                reserve_collateral_token_program: Option<solana_program::pubkey::Pubkey>,
                instruction_sysvar_account: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl WithdrawPendingFeesBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn vault_admin_authority(&mut self, vault_admin_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault_admin_authority = Some(vault_admin_authority);
                    self
    }
            #[inline(always)]
    pub fn vault_state(&mut self, vault_state: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault_state = Some(vault_state);
                    self
    }
            #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve = Some(reserve);
                    self
    }
            #[inline(always)]
    pub fn token_vault(&mut self, token_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_vault = Some(token_vault);
                    self
    }
            #[inline(always)]
    pub fn ctoken_vault(&mut self, ctoken_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.ctoken_vault = Some(ctoken_vault);
                    self
    }
            #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.base_vault_authority = Some(base_vault_authority);
                    self
    }
            #[inline(always)]
    pub fn token_ata(&mut self, token_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_ata = Some(token_ata);
                    self
    }
            #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_mint = Some(token_mint);
                    self
    }
            /// CPI accounts
#[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.lending_market = Some(lending_market);
                    self
    }
            #[inline(always)]
    pub fn lending_market_authority(&mut self, lending_market_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.lending_market_authority = Some(lending_market_authority);
                    self
    }
            #[inline(always)]
    pub fn reserve_liquidity_supply(&mut self, reserve_liquidity_supply: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve_liquidity_supply = Some(reserve_liquidity_supply);
                    self
    }
            #[inline(always)]
    pub fn reserve_collateral_mint(&mut self, reserve_collateral_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve_collateral_mint = Some(reserve_collateral_mint);
                    self
    }
            #[inline(always)]
    pub fn klend_program(&mut self, klend_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.klend_program = Some(klend_program);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn reserve_collateral_token_program(&mut self, reserve_collateral_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.reserve_collateral_token_program = Some(reserve_collateral_token_program);
                    self
    }
            /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
#[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = WithdrawPendingFees {
                              vault_admin_authority: self.vault_admin_authority.expect("vault_admin_authority is not set"),
                                        vault_state: self.vault_state.expect("vault_state is not set"),
                                        reserve: self.reserve.expect("reserve is not set"),
                                        token_vault: self.token_vault.expect("token_vault is not set"),
                                        ctoken_vault: self.ctoken_vault.expect("ctoken_vault is not set"),
                                        base_vault_authority: self.base_vault_authority.expect("base_vault_authority is not set"),
                                        token_ata: self.token_ata.expect("token_ata is not set"),
                                        token_mint: self.token_mint.expect("token_mint is not set"),
                                        lending_market: self.lending_market.expect("lending_market is not set"),
                                        lending_market_authority: self.lending_market_authority.expect("lending_market_authority is not set"),
                                        reserve_liquidity_supply: self.reserve_liquidity_supply.expect("reserve_liquidity_supply is not set"),
                                        reserve_collateral_mint: self.reserve_collateral_mint.expect("reserve_collateral_mint is not set"),
                                        klend_program: self.klend_program.expect("klend_program is not set"),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        reserve_collateral_token_program: self.reserve_collateral_token_program.expect("reserve_collateral_token_program is not set"),
                                        instruction_sysvar_account: self.instruction_sysvar_account.unwrap_or(solana_program::pubkey!("Sysvar1nstructions1111111111111111111111111")),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `withdraw_pending_fees` CPI accounts.
  pub struct WithdrawPendingFeesCpiAccounts<'a, 'b> {
          
                    
              pub vault_admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault_state: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub ctoken_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
                        /// CPI accounts

      
                    
              pub lending_market: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub lending_market_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve_liquidity_supply: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve_collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub klend_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub reserve_collateral_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `withdraw_pending_fees` CPI instruction.
pub struct WithdrawPendingFeesCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub vault_admin_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault_state: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub ctoken_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
                /// CPI accounts

    
              
          pub lending_market: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub lending_market_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve_liquidity_supply: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve_collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub klend_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub reserve_collateral_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> WithdrawPendingFeesCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: WithdrawPendingFeesCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              vault_admin_authority: accounts.vault_admin_authority,
              vault_state: accounts.vault_state,
              reserve: accounts.reserve,
              token_vault: accounts.token_vault,
              ctoken_vault: accounts.ctoken_vault,
              base_vault_authority: accounts.base_vault_authority,
              token_ata: accounts.token_ata,
              token_mint: accounts.token_mint,
              lending_market: accounts.lending_market,
              lending_market_authority: accounts.lending_market_authority,
              reserve_liquidity_supply: accounts.reserve_liquidity_supply,
              reserve_collateral_mint: accounts.reserve_collateral_mint,
              klend_program: accounts.klend_program,
              token_program: accounts.token_program,
              reserve_collateral_token_program: accounts.reserve_collateral_token_program,
              instruction_sysvar_account: accounts.instruction_sysvar_account,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(16+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_admin_authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_state.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ctoken_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lending_market_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_liquidity_supply.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_collateral_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.klend_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.reserve_collateral_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar_account.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&WithdrawPendingFeesInstructionData::new()).unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::KAMINO_VAULT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(17 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.vault_admin_authority.clone());
                        account_infos.push(self.vault_state.clone());
                        account_infos.push(self.reserve.clone());
                        account_infos.push(self.token_vault.clone());
                        account_infos.push(self.ctoken_vault.clone());
                        account_infos.push(self.base_vault_authority.clone());
                        account_infos.push(self.token_ata.clone());
                        account_infos.push(self.token_mint.clone());
                        account_infos.push(self.lending_market.clone());
                        account_infos.push(self.lending_market_authority.clone());
                        account_infos.push(self.reserve_liquidity_supply.clone());
                        account_infos.push(self.reserve_collateral_mint.clone());
                        account_infos.push(self.klend_program.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.reserve_collateral_token_program.clone());
                        account_infos.push(self.instruction_sysvar_account.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `WithdrawPendingFees` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` vault_admin_authority
                ///   1. `[writable]` vault_state
                ///   2. `[writable]` reserve
                ///   3. `[writable]` token_vault
                ///   4. `[writable]` ctoken_vault
                ///   5. `[writable]` base_vault_authority
                ///   6. `[writable]` token_ata
                ///   7. `[writable]` token_mint
          ///   8. `[]` lending_market
          ///   9. `[]` lending_market_authority
                ///   10. `[writable]` reserve_liquidity_supply
                ///   11. `[writable]` reserve_collateral_mint
          ///   12. `[]` klend_program
          ///   13. `[]` token_program
          ///   14. `[]` reserve_collateral_token_program
          ///   15. `[]` instruction_sysvar_account
#[derive(Clone, Debug)]
pub struct WithdrawPendingFeesCpiBuilder<'a, 'b> {
  instruction: Box<WithdrawPendingFeesCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> WithdrawPendingFeesCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(WithdrawPendingFeesCpiBuilderInstruction {
      __program: program,
              vault_admin_authority: None,
              vault_state: None,
              reserve: None,
              token_vault: None,
              ctoken_vault: None,
              base_vault_authority: None,
              token_ata: None,
              token_mint: None,
              lending_market: None,
              lending_market_authority: None,
              reserve_liquidity_supply: None,
              reserve_collateral_mint: None,
              klend_program: None,
              token_program: None,
              reserve_collateral_token_program: None,
              instruction_sysvar_account: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn vault_admin_authority(&mut self, vault_admin_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault_admin_authority = Some(vault_admin_authority);
                    self
    }
      #[inline(always)]
    pub fn vault_state(&mut self, vault_state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault_state = Some(vault_state);
                    self
    }
      #[inline(always)]
    pub fn reserve(&mut self, reserve: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve = Some(reserve);
                    self
    }
      #[inline(always)]
    pub fn token_vault(&mut self, token_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_vault = Some(token_vault);
                    self
    }
      #[inline(always)]
    pub fn ctoken_vault(&mut self, ctoken_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.ctoken_vault = Some(ctoken_vault);
                    self
    }
      #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.base_vault_authority = Some(base_vault_authority);
                    self
    }
      #[inline(always)]
    pub fn token_ata(&mut self, token_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_ata = Some(token_ata);
                    self
    }
      #[inline(always)]
    pub fn token_mint(&mut self, token_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint = Some(token_mint);
                    self
    }
      /// CPI accounts
#[inline(always)]
    pub fn lending_market(&mut self, lending_market: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market = Some(lending_market);
                    self
    }
      #[inline(always)]
    pub fn lending_market_authority(&mut self, lending_market_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market_authority = Some(lending_market_authority);
                    self
    }
      #[inline(always)]
    pub fn reserve_liquidity_supply(&mut self, reserve_liquidity_supply: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_liquidity_supply = Some(reserve_liquidity_supply);
                    self
    }
      #[inline(always)]
    pub fn reserve_collateral_mint(&mut self, reserve_collateral_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_collateral_mint = Some(reserve_collateral_mint);
                    self
    }
      #[inline(always)]
    pub fn klend_program(&mut self, klend_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.klend_program = Some(klend_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn reserve_collateral_token_program(&mut self, reserve_collateral_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_collateral_token_program = Some(reserve_collateral_token_program);
                    self
    }
      #[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = WithdrawPendingFeesCpi {
        __program: self.instruction.__program,
                  
          vault_admin_authority: self.instruction.vault_admin_authority.expect("vault_admin_authority is not set"),
                  
          vault_state: self.instruction.vault_state.expect("vault_state is not set"),
                  
          reserve: self.instruction.reserve.expect("reserve is not set"),
                  
          token_vault: self.instruction.token_vault.expect("token_vault is not set"),
                  
          ctoken_vault: self.instruction.ctoken_vault.expect("ctoken_vault is not set"),
                  
          base_vault_authority: self.instruction.base_vault_authority.expect("base_vault_authority is not set"),
                  
          token_ata: self.instruction.token_ata.expect("token_ata is not set"),
                  
          token_mint: self.instruction.token_mint.expect("token_mint is not set"),
                  
          lending_market: self.instruction.lending_market.expect("lending_market is not set"),
                  
          lending_market_authority: self.instruction.lending_market_authority.expect("lending_market_authority is not set"),
                  
          reserve_liquidity_supply: self.instruction.reserve_liquidity_supply.expect("reserve_liquidity_supply is not set"),
                  
          reserve_collateral_mint: self.instruction.reserve_collateral_mint.expect("reserve_collateral_mint is not set"),
                  
          klend_program: self.instruction.klend_program.expect("klend_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          reserve_collateral_token_program: self.instruction.reserve_collateral_token_program.expect("reserve_collateral_token_program is not set"),
                  
          instruction_sysvar_account: self.instruction.instruction_sysvar_account.expect("instruction_sysvar_account is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct WithdrawPendingFeesCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            vault_admin_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                ctoken_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                lending_market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                lending_market_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve_liquidity_supply: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve_collateral_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                klend_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                reserve_collateral_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                instruction_sysvar_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

