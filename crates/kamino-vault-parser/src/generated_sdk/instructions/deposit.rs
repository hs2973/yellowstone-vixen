//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct Deposit {
      
              
          pub user: solana_program::pubkey::Pubkey,
          
              
          pub vault_state: solana_program::pubkey::Pubkey,
          
              
          pub token_vault: solana_program::pubkey::Pubkey,
          
              
          pub token_mint: solana_program::pubkey::Pubkey,
          
              
          pub base_vault_authority: solana_program::pubkey::Pubkey,
          
              
          pub shares_mint: solana_program::pubkey::Pubkey,
          
              
          pub user_token_ata: solana_program::pubkey::Pubkey,
          
              
          pub user_shares_ata: solana_program::pubkey::Pubkey,
          
              
          pub klend_program: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub shares_token_program: solana_program::pubkey::Pubkey,
      }

impl Deposit {
  pub fn instruction(&self, args: DepositInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: DepositInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(11+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.user,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_state,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_vault_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.shares_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_shares_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.klend_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.shares_token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&DepositInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::KAMINO_VAULT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositInstructionData {
            discriminator: [u8; 8],
            }

impl DepositInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [242, 35, 198, 137, 82, 225, 242, 182],
                                }
  }
}

impl Default for DepositInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositInstructionArgs {
                  pub max_amount: u64,
      }


/// Instruction builder for `Deposit`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` user
                ///   1. `[writable]` vault_state
                ///   2. `[writable]` token_vault
          ///   3. `[]` token_mint
          ///   4. `[]` base_vault_authority
                ///   5. `[writable]` shares_mint
                ///   6. `[writable]` user_token_ata
                ///   7. `[writable]` user_shares_ata
          ///   8. `[]` klend_program
                ///   9. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
          ///   10. `[]` shares_token_program
#[derive(Clone, Debug, Default)]
pub struct DepositBuilder {
            user: Option<solana_program::pubkey::Pubkey>,
                vault_state: Option<solana_program::pubkey::Pubkey>,
                token_vault: Option<solana_program::pubkey::Pubkey>,
                token_mint: Option<solana_program::pubkey::Pubkey>,
                base_vault_authority: Option<solana_program::pubkey::Pubkey>,
                shares_mint: Option<solana_program::pubkey::Pubkey>,
                user_token_ata: Option<solana_program::pubkey::Pubkey>,
                user_shares_ata: Option<solana_program::pubkey::Pubkey>,
                klend_program: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                shares_token_program: Option<solana_program::pubkey::Pubkey>,
                        max_amount: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DepositBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user = Some(user);
                    self
    }
            #[inline(always)]
    pub fn vault_state(&mut self, vault_state: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault_state = Some(vault_state);
                    self
    }
            #[inline(always)]
    pub fn token_vault(&mut self, token_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_vault = Some(token_vault);
                    self
    }
            #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_mint = Some(token_mint);
                    self
    }
            #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.base_vault_authority = Some(base_vault_authority);
                    self
    }
            #[inline(always)]
    pub fn shares_mint(&mut self, shares_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.shares_mint = Some(shares_mint);
                    self
    }
            #[inline(always)]
    pub fn user_token_ata(&mut self, user_token_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_token_ata = Some(user_token_ata);
                    self
    }
            #[inline(always)]
    pub fn user_shares_ata(&mut self, user_shares_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_shares_ata = Some(user_shares_ata);
                    self
    }
            #[inline(always)]
    pub fn klend_program(&mut self, klend_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.klend_program = Some(klend_program);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn shares_token_program(&mut self, shares_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.shares_token_program = Some(shares_token_program);
                    self
    }
                    #[inline(always)]
      pub fn max_amount(&mut self, max_amount: u64) -> &mut Self {
        self.max_amount = Some(max_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = Deposit {
                              user: self.user.expect("user is not set"),
                                        vault_state: self.vault_state.expect("vault_state is not set"),
                                        token_vault: self.token_vault.expect("token_vault is not set"),
                                        token_mint: self.token_mint.expect("token_mint is not set"),
                                        base_vault_authority: self.base_vault_authority.expect("base_vault_authority is not set"),
                                        shares_mint: self.shares_mint.expect("shares_mint is not set"),
                                        user_token_ata: self.user_token_ata.expect("user_token_ata is not set"),
                                        user_shares_ata: self.user_shares_ata.expect("user_shares_ata is not set"),
                                        klend_program: self.klend_program.expect("klend_program is not set"),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        shares_token_program: self.shares_token_program.expect("shares_token_program is not set"),
                      };
          let args = DepositInstructionArgs {
                                                              max_amount: self.max_amount.clone().expect("max_amount is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `deposit` CPI accounts.
  pub struct DepositCpiAccounts<'a, 'b> {
          
                    
              pub user: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault_state: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub shares_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub user_token_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub user_shares_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub klend_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub shares_token_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `deposit` CPI instruction.
pub struct DepositCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub user: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault_state: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub shares_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub user_token_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub user_shares_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub klend_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub shares_token_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: DepositInstructionArgs,
  }

impl<'a, 'b> DepositCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: DepositCpiAccounts<'a, 'b>,
              args: DepositInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              user: accounts.user,
              vault_state: accounts.vault_state,
              token_vault: accounts.token_vault,
              token_mint: accounts.token_mint,
              base_vault_authority: accounts.base_vault_authority,
              shares_mint: accounts.shares_mint,
              user_token_ata: accounts.user_token_ata,
              user_shares_ata: accounts.user_shares_ata,
              klend_program: accounts.klend_program,
              token_program: accounts.token_program,
              shares_token_program: accounts.shares_token_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(11+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_state.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_vault_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.shares_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_shares_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.klend_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.shares_token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&DepositInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::KAMINO_VAULT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.user.clone());
                        account_infos.push(self.vault_state.clone());
                        account_infos.push(self.token_vault.clone());
                        account_infos.push(self.token_mint.clone());
                        account_infos.push(self.base_vault_authority.clone());
                        account_infos.push(self.shares_mint.clone());
                        account_infos.push(self.user_token_ata.clone());
                        account_infos.push(self.user_shares_ata.clone());
                        account_infos.push(self.klend_program.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.shares_token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Deposit` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` user
                ///   1. `[writable]` vault_state
                ///   2. `[writable]` token_vault
          ///   3. `[]` token_mint
          ///   4. `[]` base_vault_authority
                ///   5. `[writable]` shares_mint
                ///   6. `[writable]` user_token_ata
                ///   7. `[writable]` user_shares_ata
          ///   8. `[]` klend_program
          ///   9. `[]` token_program
          ///   10. `[]` shares_token_program
#[derive(Clone, Debug)]
pub struct DepositCpiBuilder<'a, 'b> {
  instruction: Box<DepositCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(DepositCpiBuilderInstruction {
      __program: program,
              user: None,
              vault_state: None,
              token_vault: None,
              token_mint: None,
              base_vault_authority: None,
              shares_mint: None,
              user_token_ata: None,
              user_shares_ata: None,
              klend_program: None,
              token_program: None,
              shares_token_program: None,
                                            max_amount: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user = Some(user);
                    self
    }
      #[inline(always)]
    pub fn vault_state(&mut self, vault_state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault_state = Some(vault_state);
                    self
    }
      #[inline(always)]
    pub fn token_vault(&mut self, token_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_vault = Some(token_vault);
                    self
    }
      #[inline(always)]
    pub fn token_mint(&mut self, token_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint = Some(token_mint);
                    self
    }
      #[inline(always)]
    pub fn base_vault_authority(&mut self, base_vault_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.base_vault_authority = Some(base_vault_authority);
                    self
    }
      #[inline(always)]
    pub fn shares_mint(&mut self, shares_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.shares_mint = Some(shares_mint);
                    self
    }
      #[inline(always)]
    pub fn user_token_ata(&mut self, user_token_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_token_ata = Some(user_token_ata);
                    self
    }
      #[inline(always)]
    pub fn user_shares_ata(&mut self, user_shares_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_shares_ata = Some(user_shares_ata);
                    self
    }
      #[inline(always)]
    pub fn klend_program(&mut self, klend_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.klend_program = Some(klend_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn shares_token_program(&mut self, shares_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.shares_token_program = Some(shares_token_program);
                    self
    }
                    #[inline(always)]
      pub fn max_amount(&mut self, max_amount: u64) -> &mut Self {
        self.instruction.max_amount = Some(max_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = DepositInstructionArgs {
                                                              max_amount: self.instruction.max_amount.clone().expect("max_amount is not set"),
                                    };
        let instruction = DepositCpi {
        __program: self.instruction.__program,
                  
          user: self.instruction.user.expect("user is not set"),
                  
          vault_state: self.instruction.vault_state.expect("vault_state is not set"),
                  
          token_vault: self.instruction.token_vault.expect("token_vault is not set"),
                  
          token_mint: self.instruction.token_mint.expect("token_mint is not set"),
                  
          base_vault_authority: self.instruction.base_vault_authority.expect("base_vault_authority is not set"),
                  
          shares_mint: self.instruction.shares_mint.expect("shares_mint is not set"),
                  
          user_token_ata: self.instruction.user_token_ata.expect("user_token_ata is not set"),
                  
          user_shares_ata: self.instruction.user_shares_ata.expect("user_shares_ata is not set"),
                  
          klend_program: self.instruction.klend_program.expect("klend_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          shares_token_program: self.instruction.shares_token_program.expect("shares_token_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct DepositCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                base_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                shares_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_token_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_shares_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                klend_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                shares_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        max_amount: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

