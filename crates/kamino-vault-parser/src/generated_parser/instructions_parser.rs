//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize};
use crate::ID;
use crate::instructions::{InitVault as InitVaultIxAccounts, UpdateReserveAllocationInstructionArgs as UpdateReserveAllocationIxData, UpdateReserveAllocation as UpdateReserveAllocationIxAccounts, DepositInstructionArgs as DepositIxData, Deposit as DepositIxAccounts, WithdrawInstructionArgs as WithdrawIxData, Withdraw as WithdrawIxAccounts, Invest as InvestIxAccounts, UpdateVaultConfigInstructionArgs as UpdateVaultConfigIxData, UpdateVaultConfig as UpdateVaultConfigIxAccounts, WithdrawPendingFees as WithdrawPendingFeesIxAccounts, UpdateAdmin as UpdateAdminIxAccounts, GiveUpPendingFeesInstructionArgs as GiveUpPendingFeesIxData, GiveUpPendingFees as GiveUpPendingFeesIxAccounts, InitializeSharesMetadataInstructionArgs as InitializeSharesMetadataIxData, InitializeSharesMetadata as InitializeSharesMetadataIxAccounts, UpdateSharesMetadataInstructionArgs as UpdateSharesMetadataIxData, UpdateSharesMetadata as UpdateSharesMetadataIxAccounts, WithdrawFromAvailableInstructionArgs as WithdrawFromAvailableIxData, WithdrawFromAvailable as WithdrawFromAvailableIxAccounts, };

/// KaminoVault Instructions
#[derive(Debug)]
pub enum KaminoVaultProgramIx {
                        InitVault(InitVaultIxAccounts),
                                UpdateReserveAllocation(UpdateReserveAllocationIxAccounts, UpdateReserveAllocationIxData),
                                Deposit(DepositIxAccounts, DepositIxData),
                                Withdraw(WithdrawIxAccounts, WithdrawIxData),
                                Invest(InvestIxAccounts),
                                UpdateVaultConfig(UpdateVaultConfigIxAccounts, UpdateVaultConfigIxData),
                                WithdrawPendingFees(WithdrawPendingFeesIxAccounts),
                                UpdateAdmin(UpdateAdminIxAccounts),
                                GiveUpPendingFees(GiveUpPendingFeesIxAccounts, GiveUpPendingFeesIxData),
                                InitializeSharesMetadata(InitializeSharesMetadataIxAccounts, InitializeSharesMetadataIxData),
                                UpdateSharesMetadata(UpdateSharesMetadataIxAccounts, UpdateSharesMetadataIxData),
                                WithdrawFromAvailable(WithdrawFromAvailableIxAccounts, WithdrawFromAvailableIxData),
            }

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = KaminoVaultProgramIx;

    fn id(&self) -> std::borrow::Cow<str> {
        "KaminoVault::InstructionParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(&self, ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

impl InstructionParser {
    pub(crate) fn parse_impl(ix:&yellowstone_vixen_core::instruction::InstructionUpdate) -> yellowstone_vixen_core::ParseResult<KaminoVaultProgramIx> {
        let accounts_len = ix.accounts.len();
                let ix_discriminator:[u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
            match ix_discriminator {
                                                                                        [77, 79, 85, 150, 33, 217, 52, 106] => {
                                check_min_accounts_req(accounts_len, 11)?;
                                let ix_accounts = InitVaultIxAccounts{
                                                                            admin_authority: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                            base_vault_authority: ix.accounts[2].0.into(),
                                                                            token_vault: ix.accounts[3].0.into(),
                                                                            base_token_mint: ix.accounts[4].0.into(),
                                                                            shares_mint: ix.accounts[5].0.into(),
                                                                            admin_token_account: ix.accounts[6].0.into(),
                                                                            system_program: ix.accounts[7].0.into(),
                                                                            rent: ix.accounts[8].0.into(),
                                                                            token_program: ix.accounts[9].0.into(),
                                                                            shares_token_program: ix.accounts[10].0.into(),
                                                                    };
                                                                    Ok(KaminoVaultProgramIx::InitVault(ix_accounts))
                                                            },
                                                                                                                                    [5, 54, 213, 112, 75, 232, 117, 37] => {
                                check_min_accounts_req(accounts_len, 9)?;
                                let ix_accounts = UpdateReserveAllocationIxAccounts{
                                                                            signer: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                            base_vault_authority: ix.accounts[2].0.into(),
                                                                            reserve_collateral_mint: ix.accounts[3].0.into(),
                                                                            reserve: ix.accounts[4].0.into(),
                                                                            ctoken_vault: ix.accounts[5].0.into(),
                                                                            reserve_collateral_token_program: ix.accounts[6].0.into(),
                                                                            system_program: ix.accounts[7].0.into(),
                                                                            rent: ix.accounts[8].0.into(),
                                                                    };
                                                                    let de_ix_data:UpdateReserveAllocationIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoVaultProgramIx::UpdateReserveAllocation(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [242, 35, 198, 137, 82, 225, 242, 182] => {
                                check_min_accounts_req(accounts_len, 11)?;
                                let ix_accounts = DepositIxAccounts{
                                                                            user: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                            token_vault: ix.accounts[2].0.into(),
                                                                            token_mint: ix.accounts[3].0.into(),
                                                                            base_vault_authority: ix.accounts[4].0.into(),
                                                                            shares_mint: ix.accounts[5].0.into(),
                                                                            user_token_ata: ix.accounts[6].0.into(),
                                                                            user_shares_ata: ix.accounts[7].0.into(),
                                                                            klend_program: ix.accounts[8].0.into(),
                                                                            token_program: ix.accounts[9].0.into(),
                                                                            shares_token_program: ix.accounts[10].0.into(),
                                                                    };
                                                                    let de_ix_data:DepositIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoVaultProgramIx::Deposit(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [183, 18, 70, 156, 148, 109, 161, 34] => {
                                check_min_accounts_req(accounts_len, 20)?;
                                let ix_accounts = WithdrawIxAccounts{
                                                                            user: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                            token_vault: ix.accounts[2].0.into(),
                                                                            base_vault_authority: ix.accounts[3].0.into(),
                                                                            user_token_ata: ix.accounts[4].0.into(),
                                                                            token_mint: ix.accounts[5].0.into(),
                                                                            user_shares_ata: ix.accounts[6].0.into(),
                                                                            shares_mint: ix.accounts[7].0.into(),
                                                                            token_program: ix.accounts[8].0.into(),
                                                                            shares_token_program: ix.accounts[9].0.into(),
                                                                            klend_program: ix.accounts[10].0.into(),
                                                                            vault_state: ix.accounts[11].0.into(),
                                                                            reserve: ix.accounts[12].0.into(),
                                                                            ctoken_vault: ix.accounts[13].0.into(),
                                                                            lending_market: ix.accounts[14].0.into(),
                                                                            lending_market_authority: ix.accounts[15].0.into(),
                                                                            reserve_liquidity_supply: ix.accounts[16].0.into(),
                                                                            reserve_collateral_mint: ix.accounts[17].0.into(),
                                                                            reserve_collateral_token_program: ix.accounts[18].0.into(),
                                                                            instruction_sysvar_account: ix.accounts[19].0.into(),
                                                                    };
                                                                    let de_ix_data:WithdrawIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoVaultProgramIx::Withdraw(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [13, 245, 180, 103, 254, 182, 121, 4] => {
                                check_min_accounts_req(accounts_len, 16)?;
                                let ix_accounts = InvestIxAccounts{
                                                                            payer: ix.accounts[0].0.into(),
                                                                            payer_token_account: ix.accounts[1].0.into(),
                                                                            vault_state: ix.accounts[2].0.into(),
                                                                            token_vault: ix.accounts[3].0.into(),
                                                                            token_mint: ix.accounts[4].0.into(),
                                                                            base_vault_authority: ix.accounts[5].0.into(),
                                                                            ctoken_vault: ix.accounts[6].0.into(),
                                                                            reserve: ix.accounts[7].0.into(),
                                                                            lending_market: ix.accounts[8].0.into(),
                                                                            lending_market_authority: ix.accounts[9].0.into(),
                                                                            reserve_liquidity_supply: ix.accounts[10].0.into(),
                                                                            reserve_collateral_mint: ix.accounts[11].0.into(),
                                                                            klend_program: ix.accounts[12].0.into(),
                                                                            reserve_collateral_token_program: ix.accounts[13].0.into(),
                                                                            token_program: ix.accounts[14].0.into(),
                                                                            instruction_sysvar_account: ix.accounts[15].0.into(),
                                                                    };
                                                                    Ok(KaminoVaultProgramIx::Invest(ix_accounts))
                                                            },
                                                                                                                                    [122, 3, 21, 222, 158, 255, 238, 157] => {
                                check_min_accounts_req(accounts_len, 3)?;
                                let ix_accounts = UpdateVaultConfigIxAccounts{
                                                                            vault_admin_authority: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                            klend_program: ix.accounts[2].0.into(),
                                                                    };
                                                                    let de_ix_data:UpdateVaultConfigIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoVaultProgramIx::UpdateVaultConfig(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [131, 194, 200, 140, 175, 244, 217, 183] => {
                                check_min_accounts_req(accounts_len, 16)?;
                                let ix_accounts = WithdrawPendingFeesIxAccounts{
                                                                            vault_admin_authority: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                            reserve: ix.accounts[2].0.into(),
                                                                            token_vault: ix.accounts[3].0.into(),
                                                                            ctoken_vault: ix.accounts[4].0.into(),
                                                                            base_vault_authority: ix.accounts[5].0.into(),
                                                                            token_ata: ix.accounts[6].0.into(),
                                                                            token_mint: ix.accounts[7].0.into(),
                                                                            lending_market: ix.accounts[8].0.into(),
                                                                            lending_market_authority: ix.accounts[9].0.into(),
                                                                            reserve_liquidity_supply: ix.accounts[10].0.into(),
                                                                            reserve_collateral_mint: ix.accounts[11].0.into(),
                                                                            klend_program: ix.accounts[12].0.into(),
                                                                            token_program: ix.accounts[13].0.into(),
                                                                            reserve_collateral_token_program: ix.accounts[14].0.into(),
                                                                            instruction_sysvar_account: ix.accounts[15].0.into(),
                                                                    };
                                                                    Ok(KaminoVaultProgramIx::WithdrawPendingFees(ix_accounts))
                                                            },
                                                                                                                                    [161, 176, 40, 213, 60, 184, 179, 228] => {
                                check_min_accounts_req(accounts_len, 2)?;
                                let ix_accounts = UpdateAdminIxAccounts{
                                                                            pending_admin: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                    };
                                                                    Ok(KaminoVaultProgramIx::UpdateAdmin(ix_accounts))
                                                            },
                                                                                                                                    [177, 200, 120, 134, 110, 217, 147, 81] => {
                                check_min_accounts_req(accounts_len, 3)?;
                                let ix_accounts = GiveUpPendingFeesIxAccounts{
                                                                            vault_admin_authority: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                            klend_program: ix.accounts[2].0.into(),
                                                                    };
                                                                    let de_ix_data:GiveUpPendingFeesIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoVaultProgramIx::GiveUpPendingFees(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [3, 15, 172, 114, 200, 0, 131, 32] => {
                                check_min_accounts_req(accounts_len, 8)?;
                                let ix_accounts = InitializeSharesMetadataIxAccounts{
                                                                            vault_admin_authority: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                            shares_mint: ix.accounts[2].0.into(),
                                                                            base_vault_authority: ix.accounts[3].0.into(),
                                                                            shares_metadata: ix.accounts[4].0.into(),
                                                                            system_program: ix.accounts[5].0.into(),
                                                                            rent: ix.accounts[6].0.into(),
                                                                            metadata_program: ix.accounts[7].0.into(),
                                                                    };
                                                                    let de_ix_data:InitializeSharesMetadataIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoVaultProgramIx::InitializeSharesMetadata(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [155, 34, 122, 165, 245, 137, 147, 107] => {
                                check_min_accounts_req(accounts_len, 5)?;
                                let ix_accounts = UpdateSharesMetadataIxAccounts{
                                                                            vault_admin_authority: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                            base_vault_authority: ix.accounts[2].0.into(),
                                                                            shares_metadata: ix.accounts[3].0.into(),
                                                                            metadata_program: ix.accounts[4].0.into(),
                                                                    };
                                                                    let de_ix_data:UpdateSharesMetadataIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoVaultProgramIx::UpdateSharesMetadata(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [19, 131, 112, 155, 170, 220, 34, 57] => {
                                check_min_accounts_req(accounts_len, 11)?;
                                let ix_accounts = WithdrawFromAvailableIxAccounts{
                                                                            user: ix.accounts[0].0.into(),
                                                                            vault_state: ix.accounts[1].0.into(),
                                                                            token_vault: ix.accounts[2].0.into(),
                                                                            base_vault_authority: ix.accounts[3].0.into(),
                                                                            user_token_ata: ix.accounts[4].0.into(),
                                                                            token_mint: ix.accounts[5].0.into(),
                                                                            user_shares_ata: ix.accounts[6].0.into(),
                                                                            shares_mint: ix.accounts[7].0.into(),
                                                                            token_program: ix.accounts[8].0.into(),
                                                                            shares_token_program: ix.accounts[9].0.into(),
                                                                            klend_program: ix.accounts[10].0.into(),
                                                                    };
                                                                    let de_ix_data:WithdrawFromAvailableIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoVaultProgramIx::WithdrawFromAvailable(ix_accounts, de_ix_data))
                                                            },
                                                                            _ => Err(yellowstone_vixen_core::ParseError::from("Invalid Instruction discriminator".to_owned())),
            }
            }

}

pub fn check_min_accounts_req(actual: usize, expected: usize) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

