//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct LogUserSwapBalancesEnd {
    pub maker: solana_program::pubkey::Pubkey,

    pub input_mint: solana_program::pubkey::Pubkey,

    pub output_mint: solana_program::pubkey::Pubkey,

    pub input_ta: solana_program::pubkey::Pubkey,

    pub output_ta: solana_program::pubkey::Pubkey,
    /// if it's not the pda it doesn't matter
    pub pda_referrer: Option<solana_program::pubkey::Pubkey>,

    pub user_swap_balance_state: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl LogUserSwapBalancesEnd {
    pub fn instruction(
        &self,
        args: LogUserSwapBalancesEndInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: LogUserSwapBalancesEndInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.maker, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.input_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.output_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.input_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.output_ta,
            false,
        ));
        if let Some(pda_referrer) = self.pda_referrer {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                pda_referrer,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LIMO_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_swap_balance_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&LogUserSwapBalancesEndInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::LIMO_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LogUserSwapBalancesEndInstructionData {
    discriminator: [u8; 8],
}

impl LogUserSwapBalancesEndInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [140, 42, 198, 82, 147, 144, 44, 113],
        }
    }
}

impl Default for LogUserSwapBalancesEndInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LogUserSwapBalancesEndInstructionArgs {
    pub swap_program_id: Pubkey,
}

/// Instruction builder for `LogUserSwapBalancesEnd`.
///
/// ### Accounts:
///
///   0. `[signer]` maker
///   1. `[]` input_mint
///   2. `[]` output_mint
///   3. `[]` input_ta
///   4. `[]` output_ta
///   5. `[optional]` pda_referrer
///   6. `[writable]` user_swap_balance_state
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   9. `[]` event_authority
///   10. `[]` program
#[derive(Clone, Debug, Default)]
pub struct LogUserSwapBalancesEndBuilder {
    maker: Option<solana_program::pubkey::Pubkey>,
    input_mint: Option<solana_program::pubkey::Pubkey>,
    output_mint: Option<solana_program::pubkey::Pubkey>,
    input_ta: Option<solana_program::pubkey::Pubkey>,
    output_ta: Option<solana_program::pubkey::Pubkey>,
    pda_referrer: Option<solana_program::pubkey::Pubkey>,
    user_swap_balance_state: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    swap_program_id: Option<Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl LogUserSwapBalancesEndBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn maker(&mut self, maker: solana_program::pubkey::Pubkey) -> &mut Self {
        self.maker = Some(maker);
        self
    }

    #[inline(always)]
    pub fn input_mint(&mut self, input_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.input_mint = Some(input_mint);
        self
    }

    #[inline(always)]
    pub fn output_mint(&mut self, output_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.output_mint = Some(output_mint);
        self
    }

    #[inline(always)]
    pub fn input_ta(&mut self, input_ta: solana_program::pubkey::Pubkey) -> &mut Self {
        self.input_ta = Some(input_ta);
        self
    }

    #[inline(always)]
    pub fn output_ta(&mut self, output_ta: solana_program::pubkey::Pubkey) -> &mut Self {
        self.output_ta = Some(output_ta);
        self
    }

    /// `[optional account]`
    /// if it's not the pda it doesn't matter
    #[inline(always)]
    pub fn pda_referrer(
        &mut self,
        pda_referrer: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.pda_referrer = pda_referrer;
        self
    }

    #[inline(always)]
    pub fn user_swap_balance_state(
        &mut self,
        user_swap_balance_state: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_swap_balance_state = Some(user_swap_balance_state);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn swap_program_id(&mut self, swap_program_id: Pubkey) -> &mut Self {
        self.swap_program_id = Some(swap_program_id);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = LogUserSwapBalancesEnd {
            maker: self.maker.expect("maker is not set"),
            input_mint: self.input_mint.expect("input_mint is not set"),
            output_mint: self.output_mint.expect("output_mint is not set"),
            input_ta: self.input_ta.expect("input_ta is not set"),
            output_ta: self.output_ta.expect("output_ta is not set"),
            pda_referrer: self.pda_referrer,
            user_swap_balance_state: self
                .user_swap_balance_state
                .expect("user_swap_balance_state is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = LogUserSwapBalancesEndInstructionArgs {
            swap_program_id: self
                .swap_program_id
                .clone()
                .expect("swap_program_id is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `log_user_swap_balances_end` CPI accounts.
pub struct LogUserSwapBalancesEndCpiAccounts<'a, 'b> {
    pub maker: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_ta: &'b solana_program::account_info::AccountInfo<'a>,
    /// if it's not the pda it doesn't matter
    pub pda_referrer: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub user_swap_balance_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `log_user_swap_balances_end` CPI instruction.
pub struct LogUserSwapBalancesEndCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub maker: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_ta: &'b solana_program::account_info::AccountInfo<'a>,
    /// if it's not the pda it doesn't matter
    pub pda_referrer: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub user_swap_balance_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: LogUserSwapBalancesEndInstructionArgs,
}

impl<'a, 'b> LogUserSwapBalancesEndCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: LogUserSwapBalancesEndCpiAccounts<'a, 'b>,
        args: LogUserSwapBalancesEndInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            maker: accounts.maker,
            input_mint: accounts.input_mint,
            output_mint: accounts.output_mint,
            input_ta: accounts.input_ta,
            output_ta: accounts.output_ta,
            pda_referrer: accounts.pda_referrer,
            user_swap_balance_state: accounts.user_swap_balance_state,
            system_program: accounts.system_program,
            rent: accounts.rent,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.maker.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.input_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.output_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.input_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.output_ta.key,
            false,
        ));
        if let Some(pda_referrer) = self.pda_referrer {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *pda_referrer.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LIMO_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_swap_balance_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&LogUserSwapBalancesEndInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::LIMO_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.maker.clone());
        account_infos.push(self.input_mint.clone());
        account_infos.push(self.output_mint.clone());
        account_infos.push(self.input_ta.clone());
        account_infos.push(self.output_ta.clone());
        if let Some(pda_referrer) = self.pda_referrer {
            account_infos.push(pda_referrer.clone());
        }
        account_infos.push(self.user_swap_balance_state.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `LogUserSwapBalancesEnd` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` maker
///   1. `[]` input_mint
///   2. `[]` output_mint
///   3. `[]` input_ta
///   4. `[]` output_ta
///   5. `[optional]` pda_referrer
///   6. `[writable]` user_swap_balance_state
///   7. `[]` system_program
///   8. `[]` rent
///   9. `[]` event_authority
///   10. `[]` program
#[derive(Clone, Debug)]
pub struct LogUserSwapBalancesEndCpiBuilder<'a, 'b> {
    instruction: Box<LogUserSwapBalancesEndCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LogUserSwapBalancesEndCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(LogUserSwapBalancesEndCpiBuilderInstruction {
            __program: program,
            maker: None,
            input_mint: None,
            output_mint: None,
            input_ta: None,
            output_ta: None,
            pda_referrer: None,
            user_swap_balance_state: None,
            system_program: None,
            rent: None,
            event_authority: None,
            program: None,
            swap_program_id: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn maker(&mut self, maker: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.maker = Some(maker);
        self
    }

    #[inline(always)]
    pub fn input_mint(
        &mut self,
        input_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_mint = Some(input_mint);
        self
    }

    #[inline(always)]
    pub fn output_mint(
        &mut self,
        output_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_mint = Some(output_mint);
        self
    }

    #[inline(always)]
    pub fn input_ta(
        &mut self,
        input_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_ta = Some(input_ta);
        self
    }

    #[inline(always)]
    pub fn output_ta(
        &mut self,
        output_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_ta = Some(output_ta);
        self
    }

    /// `[optional account]`
    /// if it's not the pda it doesn't matter
    #[inline(always)]
    pub fn pda_referrer(
        &mut self,
        pda_referrer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.pda_referrer = pda_referrer;
        self
    }

    #[inline(always)]
    pub fn user_swap_balance_state(
        &mut self,
        user_swap_balance_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_swap_balance_state = Some(user_swap_balance_state);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn swap_program_id(&mut self, swap_program_id: Pubkey) -> &mut Self {
        self.instruction.swap_program_id = Some(swap_program_id);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = LogUserSwapBalancesEndInstructionArgs {
            swap_program_id: self
                .instruction
                .swap_program_id
                .clone()
                .expect("swap_program_id is not set"),
        };
        let instruction = LogUserSwapBalancesEndCpi {
            __program: self.instruction.__program,

            maker: self.instruction.maker.expect("maker is not set"),

            input_mint: self.instruction.input_mint.expect("input_mint is not set"),

            output_mint: self
                .instruction
                .output_mint
                .expect("output_mint is not set"),

            input_ta: self.instruction.input_ta.expect("input_ta is not set"),

            output_ta: self.instruction.output_ta.expect("output_ta is not set"),

            pda_referrer: self.instruction.pda_referrer,

            user_swap_balance_state: self
                .instruction
                .user_swap_balance_state
                .expect("user_swap_balance_state is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct LogUserSwapBalancesEndCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    maker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pda_referrer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_swap_balance_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_program_id: Option<Pubkey>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
