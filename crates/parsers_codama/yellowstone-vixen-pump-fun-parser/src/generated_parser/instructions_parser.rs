//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        Buy as BuyIxAccounts, BuyInstructionArgs as BuyIxData, Create as CreateIxAccounts,
        CreateInstructionArgs as CreateIxData, Initialize as InitializeIxAccounts,
        Sell as SellIxAccounts, SellInstructionArgs as SellIxData,
        SetParams as SetParamsIxAccounts, SetParamsInstructionArgs as SetParamsIxData,
        Withdraw as WithdrawIxAccounts,
    },
    ID,
};

/// Pump Instructions
#[derive(Debug)]
pub enum PumpProgramIx {
    Initialize(InitializeIxAccounts),
    SetParams(SetParamsIxAccounts, SetParamsIxData),
    Create(CreateIxAccounts, CreateIxData),
    Buy(BuyIxAccounts, BuyIxData),
    Sell(SellIxAccounts, SellIxData),
    Withdraw(WithdrawIxAccounts),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = PumpProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "Pump::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<PumpProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        match ix_discriminator {
            [175, 175, 109, 31, 13, 152, 155, 237] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = InitializeIxAccounts {
                    global: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                };
                Ok(PumpProgramIx::Initialize(ix_accounts))
            },
            [165, 31, 134, 53, 189, 180, 130, 255] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = SetParamsIxAccounts {
                    global: ix.accounts[0].0.into(),
                    user: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                    event_authority: ix.accounts[3].0.into(),
                    program: ix.accounts[4].0.into(),
                };
                let de_ix_data: SetParamsIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PumpProgramIx::SetParams(ix_accounts, de_ix_data))
            },
            [24, 30, 200, 40, 5, 28, 7, 119] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = CreateIxAccounts {
                    mint: ix.accounts[0].0.into(),
                    mint_authority: ix.accounts[1].0.into(),
                    bonding_curve: ix.accounts[2].0.into(),
                    associated_bonding_curve: ix.accounts[3].0.into(),
                    global: ix.accounts[4].0.into(),
                    mpl_token_metadata: ix.accounts[5].0.into(),
                    metadata: ix.accounts[6].0.into(),
                    user: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    associated_token_program: ix.accounts[10].0.into(),
                    rent: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: CreateIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PumpProgramIx::Create(ix_accounts, de_ix_data))
            },
            [102, 6, 61, 18, 1, 218, 235, 234] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = BuyIxAccounts {
                    global: ix.accounts[0].0.into(),
                    fee_recipient: ix.accounts[1].0.into(),
                    mint: ix.accounts[2].0.into(),
                    bonding_curve: ix.accounts[3].0.into(),
                    associated_bonding_curve: ix.accounts[4].0.into(),
                    associated_user: ix.accounts[5].0.into(),
                    user: ix.accounts[6].0.into(),
                    system_program: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    rent: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                let de_ix_data: BuyIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PumpProgramIx::Buy(ix_accounts, de_ix_data))
            },
            [51, 230, 133, 164, 1, 127, 131, 173] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = SellIxAccounts {
                    global: ix.accounts[0].0.into(),
                    fee_recipient: ix.accounts[1].0.into(),
                    mint: ix.accounts[2].0.into(),
                    bonding_curve: ix.accounts[3].0.into(),
                    associated_bonding_curve: ix.accounts[4].0.into(),
                    associated_user: ix.accounts[5].0.into(),
                    user: ix.accounts[6].0.into(),
                    system_program: ix.accounts[7].0.into(),
                    associated_token_program: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                let de_ix_data: SellIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(PumpProgramIx::Sell(ix_accounts, de_ix_data))
            },
            [183, 18, 70, 156, 148, 109, 161, 34] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = WithdrawIxAccounts {
                    global: ix.accounts[0].0.into(),
                    last_withdraw: ix.accounts[1].0.into(),
                    mint: ix.accounts[2].0.into(),
                    bonding_curve: ix.accounts[3].0.into(),
                    associated_bonding_curve: ix.accounts[4].0.into(),
                    associated_user: ix.accounts[5].0.into(),
                    user: ix.accounts[6].0.into(),
                    system_program: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    rent: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                Ok(PumpProgramIx::Withdraw(ix_accounts))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
