//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        DepositAllTokenTypes as DepositAllTokenTypesIxAccounts,
        DepositAllTokenTypesInstructionArgs as DepositAllTokenTypesIxData, Swap as SwapIxAccounts,
        SwapInstructionArgs as SwapIxData,
        WithdrawAllTokenTypes as WithdrawAllTokenTypesIxAccounts,
        WithdrawAllTokenTypesInstructionArgs as WithdrawAllTokenTypesIxData,
    },
    ID,
};

/// LifinityAmmV2 Instructions
#[derive(Debug)]
pub enum LifinityAmmV2ProgramIx {
    Swap(SwapIxAccounts, SwapIxData),
    DepositAllTokenTypes(DepositAllTokenTypesIxAccounts, DepositAllTokenTypesIxData),
    WithdrawAllTokenTypes(WithdrawAllTokenTypesIxAccounts, WithdrawAllTokenTypesIxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = LifinityAmmV2ProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "LifinityAmmV2::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<LifinityAmmV2ProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        match ix_discriminator {
            [248, 198, 158, 145, 225, 117, 135, 200] => {
                check_min_accounts_req(accounts_len, 13)?;
                let ix_accounts = SwapIxAccounts {
                    authority: ix.accounts[0].0.into(),
                    amm: ix.accounts[1].0.into(),
                    user_transfer_authority: ix.accounts[2].0.into(),
                    source_info: ix.accounts[3].0.into(),
                    destination_info: ix.accounts[4].0.into(),
                    swap_source: ix.accounts[5].0.into(),
                    swap_destination: ix.accounts[6].0.into(),
                    pool_mint: ix.accounts[7].0.into(),
                    fee_account: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    oracle_main_account: ix.accounts[10].0.into(),
                    oracle_sub_account: ix.accounts[11].0.into(),
                    oracle_pc_account: ix.accounts[12].0.into(),
                };
                let de_ix_data: SwapIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LifinityAmmV2ProgramIx::Swap(ix_accounts, de_ix_data))
            },
            [32, 95, 69, 60, 75, 79, 205, 238] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = DepositAllTokenTypesIxAccounts {
                    amm: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    user_transfer_authority_info: ix.accounts[2].0.into(),
                    source_a_info: ix.accounts[3].0.into(),
                    source_b_info: ix.accounts[4].0.into(),
                    token_a: ix.accounts[5].0.into(),
                    token_b: ix.accounts[6].0.into(),
                    pool_mint: ix.accounts[7].0.into(),
                    destination: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: DepositAllTokenTypesIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LifinityAmmV2ProgramIx::DepositAllTokenTypes(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [189, 254, 156, 174, 210, 9, 164, 216] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = WithdrawAllTokenTypesIxAccounts {
                    amm: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    user_transfer_authority_info: ix.accounts[2].0.into(),
                    source_info: ix.accounts[3].0.into(),
                    token_a: ix.accounts[4].0.into(),
                    token_b: ix.accounts[5].0.into(),
                    pool_mint: ix.accounts[6].0.into(),
                    dest_token_a_info: ix.accounts[7].0.into(),
                    dest_token_b_info: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: WithdrawAllTokenTypesIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LifinityAmmV2ProgramIx::WithdrawAllTokenTypes(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
