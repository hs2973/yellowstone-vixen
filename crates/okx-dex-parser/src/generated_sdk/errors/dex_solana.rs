//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum DexSolanaError {
    /// 6000 - Too many hops
    #[error("Too many hops")]
    TooManyHops = 0x1770,
    /// 6001 - Min return not reached
    #[error("Min return not reached")]
    MinReturnNotReached = 0x1771,
    /// 6002 - amount_in must be greater than 0
    #[error("amount_in must be greater than 0")]
    AmountInMustBeGreaterThanZero = 0x1772,
    /// 6003 - min_return must be greater than 0
    #[error("min_return must be greater than 0")]
    MinReturnMustBeGreaterThanZero = 0x1773,
    /// 6004 - invalid expect amount out
    #[error("invalid expect amount out")]
    InvalidExpectAmountOut = 0x1774,
    /// 6005 - amounts and routes must have the same length
    #[error("amounts and routes must have the same length")]
    AmountsAndRoutesMustHaveTheSameLength = 0x1775,
    /// 6006 - total_amounts must be equal to amount_in
    #[error("total_amounts must be equal to amount_in")]
    TotalAmountsMustBeEqualToAmountIn = 0x1776,
    /// 6007 - dexes and weights must have the same length
    #[error("dexes and weights must have the same length")]
    DexesAndWeightsMustHaveTheSameLength = 0x1777,
    /// 6008 - weights must sum to 100
    #[error("weights must sum to 100")]
    WeightsMustSumTo100 = 0x1778,
    /// 6009 - Invalid source token account
    #[error("Invalid source token account")]
    InvalidSourceTokenAccount = 0x1779,
    /// 6010 - Invalid destination token account
    #[error("Invalid destination token account")]
    InvalidDestinationTokenAccount = 0x177a,
    /// 6011 - Invalid commission rate
    #[error("Invalid commission rate")]
    InvalidCommissionRate = 0x177b,
    /// 6012 - Invalid commission token account
    #[error("Invalid commission token account")]
    InvalidCommissionTokenAccount = 0x177c,
    /// 6013 - Invalid accounts length
    #[error("Invalid accounts length")]
    InvalidAccountsLength = 0x177d,
    /// 6014 - Invalid hop accounts
    #[error("Invalid hop accounts")]
    InvalidHopAccounts = 0x177e,
    /// 6015 - Invalid hop from account
    #[error("Invalid hop from account")]
    InvalidHopFromAccount = 0x177f,
    /// 6016 - Swap authority is not signer
    #[error("Swap authority is not signer")]
    SwapAuthorityIsNotSigner = 0x1780,
    /// 6017 - Invalid authority pda
    #[error("Invalid authority pda")]
    InvalidAuthorityPda = 0x1781,
    /// 6018 - Invalid program id
    #[error("Invalid program id")]
    InvalidProgramId = 0x1782,
    /// 6019 - Invalid pool
    #[error("Invalid pool")]
    InvalidPool = 0x1783,
    /// 6020 - Invalid token mint
    #[error("Invalid token mint")]
    InvalidTokenMint = 0x1784,
    /// 6021 - Calculation error
    #[error("Calculation error")]
    CalculationError = 0x1785,
    /// 6022 - Authority pda creation failed
    #[error("Authority pda creation failed")]
    AuthorityPDACreationFailed = 0x1786,
    /// 6023 - Transfer sol failed
    #[error("Transfer sol failed")]
    TransferSolFailed = 0x1787,
    /// 6024 - Transfer token failed
    #[error("Transfer token failed")]
    TransferTokenFailed = 0x1788,
    /// 6025 - Invalid sanctum lst state list data
    #[error("Invalid sanctum lst state list data")]
    InvalidSanctumLstStateListData = 0x1789,
    /// 6026 - Invalid sanctum lst state list index
    #[error("Invalid sanctum lst state list index")]
    InvalidSanctumLstStateListIndex = 0x178a,
    /// 6027 - Invalid sanctum swap accounts
    #[error("Invalid sanctum swap accounts")]
    InvalidSanctumSwapAccounts = 0x178b,
}

impl solana_program::program_error::PrintProgramError for DexSolanaError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for DexSolanaError {
    fn type_of() -> &'static str { "DexSolanaError" }
}
