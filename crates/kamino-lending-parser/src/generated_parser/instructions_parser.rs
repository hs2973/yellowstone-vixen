//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize};
use crate::ID;
use crate::instructions::{InitLendingMarketInstructionArgs as InitLendingMarketIxData, InitLendingMarket as InitLendingMarketIxAccounts, UpdateLendingMarketInstructionArgs as UpdateLendingMarketIxData, UpdateLendingMarket as UpdateLendingMarketIxAccounts, UpdateLendingMarketOwner as UpdateLendingMarketOwnerIxAccounts, InitReserve as InitReserveIxAccounts, InitFarmsForReserveInstructionArgs as InitFarmsForReserveIxData, InitFarmsForReserve as InitFarmsForReserveIxAccounts, UpdateReserveConfigInstructionArgs as UpdateReserveConfigIxData, UpdateReserveConfig as UpdateReserveConfigIxAccounts, RedeemFees as RedeemFeesIxAccounts, WithdrawProtocolFeeInstructionArgs as WithdrawProtocolFeeIxData, WithdrawProtocolFee as WithdrawProtocolFeeIxAccounts, SocializeLossInstructionArgs as SocializeLossIxData, SocializeLoss as SocializeLossIxAccounts, SocializeLossV2InstructionArgs as SocializeLossV2IxData, SocializeLossV2 as SocializeLossV2IxAccounts, MarkObligationForDeleveragingInstructionArgs as MarkObligationForDeleveragingIxData, MarkObligationForDeleveraging as MarkObligationForDeleveragingIxAccounts, RefreshReserve as RefreshReserveIxAccounts, RefreshReservesBatchInstructionArgs as RefreshReservesBatchIxData, RefreshReservesBatch as RefreshReservesBatchIxAccounts, DepositReserveLiquidityInstructionArgs as DepositReserveLiquidityIxData, DepositReserveLiquidity as DepositReserveLiquidityIxAccounts, RedeemReserveCollateralInstructionArgs as RedeemReserveCollateralIxData, RedeemReserveCollateral as RedeemReserveCollateralIxAccounts, InitObligationInstructionArgs as InitObligationIxData, InitObligation as InitObligationIxAccounts, InitObligationFarmsForReserveInstructionArgs as InitObligationFarmsForReserveIxData, InitObligationFarmsForReserve as InitObligationFarmsForReserveIxAccounts, RefreshObligationFarmsForReserveInstructionArgs as RefreshObligationFarmsForReserveIxData, RefreshObligationFarmsForReserve as RefreshObligationFarmsForReserveIxAccounts, RefreshObligation as RefreshObligationIxAccounts, DepositObligationCollateralInstructionArgs as DepositObligationCollateralIxData, DepositObligationCollateral as DepositObligationCollateralIxAccounts, DepositObligationCollateralV2InstructionArgs as DepositObligationCollateralV2IxData, DepositObligationCollateralV2 as DepositObligationCollateralV2IxAccounts, WithdrawObligationCollateralInstructionArgs as WithdrawObligationCollateralIxData, WithdrawObligationCollateral as WithdrawObligationCollateralIxAccounts, WithdrawObligationCollateralV2InstructionArgs as WithdrawObligationCollateralV2IxData, WithdrawObligationCollateralV2 as WithdrawObligationCollateralV2IxAccounts, BorrowObligationLiquidityInstructionArgs as BorrowObligationLiquidityIxData, BorrowObligationLiquidity as BorrowObligationLiquidityIxAccounts, BorrowObligationLiquidityV2InstructionArgs as BorrowObligationLiquidityV2IxData, BorrowObligationLiquidityV2 as BorrowObligationLiquidityV2IxAccounts, RepayObligationLiquidityInstructionArgs as RepayObligationLiquidityIxData, RepayObligationLiquidity as RepayObligationLiquidityIxAccounts, RepayObligationLiquidityV2InstructionArgs as RepayObligationLiquidityV2IxData, RepayObligationLiquidityV2 as RepayObligationLiquidityV2IxAccounts, RepayAndWithdrawAndRedeemInstructionArgs as RepayAndWithdrawAndRedeemIxData, RepayAndWithdrawAndRedeem as RepayAndWithdrawAndRedeemIxAccounts, DepositAndWithdrawInstructionArgs as DepositAndWithdrawIxData, DepositAndWithdraw as DepositAndWithdrawIxAccounts, DepositReserveLiquidityAndObligationCollateralInstructionArgs as DepositReserveLiquidityAndObligationCollateralIxData, DepositReserveLiquidityAndObligationCollateral as DepositReserveLiquidityAndObligationCollateralIxAccounts, DepositReserveLiquidityAndObligationCollateralV2InstructionArgs as DepositReserveLiquidityAndObligationCollateralV2IxData, DepositReserveLiquidityAndObligationCollateralV2 as DepositReserveLiquidityAndObligationCollateralV2IxAccounts, WithdrawObligationCollateralAndRedeemReserveCollateralInstructionArgs as WithdrawObligationCollateralAndRedeemReserveCollateralIxData, WithdrawObligationCollateralAndRedeemReserveCollateral as WithdrawObligationCollateralAndRedeemReserveCollateralIxAccounts, WithdrawObligationCollateralAndRedeemReserveCollateralV2InstructionArgs as WithdrawObligationCollateralAndRedeemReserveCollateralV2IxData, WithdrawObligationCollateralAndRedeemReserveCollateralV2 as WithdrawObligationCollateralAndRedeemReserveCollateralV2IxAccounts, LiquidateObligationAndRedeemReserveCollateralInstructionArgs as LiquidateObligationAndRedeemReserveCollateralIxData, LiquidateObligationAndRedeemReserveCollateral as LiquidateObligationAndRedeemReserveCollateralIxAccounts, LiquidateObligationAndRedeemReserveCollateralV2InstructionArgs as LiquidateObligationAndRedeemReserveCollateralV2IxData, LiquidateObligationAndRedeemReserveCollateralV2 as LiquidateObligationAndRedeemReserveCollateralV2IxAccounts, FlashRepayReserveLiquidityInstructionArgs as FlashRepayReserveLiquidityIxData, FlashRepayReserveLiquidity as FlashRepayReserveLiquidityIxAccounts, FlashBorrowReserveLiquidityInstructionArgs as FlashBorrowReserveLiquidityIxData, FlashBorrowReserveLiquidity as FlashBorrowReserveLiquidityIxAccounts, RequestElevationGroupInstructionArgs as RequestElevationGroupIxData, RequestElevationGroup as RequestElevationGroupIxAccounts, InitReferrerTokenState as InitReferrerTokenStateIxAccounts, InitUserMetadataInstructionArgs as InitUserMetadataIxData, InitUserMetadata as InitUserMetadataIxAccounts, WithdrawReferrerFees as WithdrawReferrerFeesIxAccounts, InitReferrerStateAndShortUrlInstructionArgs as InitReferrerStateAndShortUrlIxData, InitReferrerStateAndShortUrl as InitReferrerStateAndShortUrlIxAccounts, DeleteReferrerStateAndShortUrl as DeleteReferrerStateAndShortUrlIxAccounts, IdlMissingTypesInstructionArgs as IdlMissingTypesIxData, IdlMissingTypes as IdlMissingTypesIxAccounts, };

/// KaminoLending Instructions
#[derive(Debug)]
pub enum KaminoLendingProgramIx {
                        InitLendingMarket(InitLendingMarketIxAccounts, InitLendingMarketIxData),
                                UpdateLendingMarket(UpdateLendingMarketIxAccounts, UpdateLendingMarketIxData),
                                UpdateLendingMarketOwner(UpdateLendingMarketOwnerIxAccounts),
                                InitReserve(InitReserveIxAccounts),
                                InitFarmsForReserve(InitFarmsForReserveIxAccounts, InitFarmsForReserveIxData),
                                UpdateReserveConfig(UpdateReserveConfigIxAccounts, UpdateReserveConfigIxData),
                                RedeemFees(RedeemFeesIxAccounts),
                                WithdrawProtocolFee(WithdrawProtocolFeeIxAccounts, WithdrawProtocolFeeIxData),
                                SocializeLoss(SocializeLossIxAccounts, SocializeLossIxData),
                                SocializeLossV2(SocializeLossV2IxAccounts, SocializeLossV2IxData),
                                MarkObligationForDeleveraging(MarkObligationForDeleveragingIxAccounts, MarkObligationForDeleveragingIxData),
                                RefreshReserve(RefreshReserveIxAccounts),
                                RefreshReservesBatch(RefreshReservesBatchIxAccounts, RefreshReservesBatchIxData),
                                DepositReserveLiquidity(DepositReserveLiquidityIxAccounts, DepositReserveLiquidityIxData),
                                RedeemReserveCollateral(RedeemReserveCollateralIxAccounts, RedeemReserveCollateralIxData),
                                InitObligation(InitObligationIxAccounts, InitObligationIxData),
                                InitObligationFarmsForReserve(InitObligationFarmsForReserveIxAccounts, InitObligationFarmsForReserveIxData),
                                RefreshObligationFarmsForReserve(RefreshObligationFarmsForReserveIxAccounts, RefreshObligationFarmsForReserveIxData),
                                RefreshObligation(RefreshObligationIxAccounts),
                                DepositObligationCollateral(DepositObligationCollateralIxAccounts, DepositObligationCollateralIxData),
                                DepositObligationCollateralV2(DepositObligationCollateralV2IxAccounts, DepositObligationCollateralV2IxData),
                                WithdrawObligationCollateral(WithdrawObligationCollateralIxAccounts, WithdrawObligationCollateralIxData),
                                WithdrawObligationCollateralV2(WithdrawObligationCollateralV2IxAccounts, WithdrawObligationCollateralV2IxData),
                                BorrowObligationLiquidity(BorrowObligationLiquidityIxAccounts, BorrowObligationLiquidityIxData),
                                BorrowObligationLiquidityV2(BorrowObligationLiquidityV2IxAccounts, BorrowObligationLiquidityV2IxData),
                                RepayObligationLiquidity(RepayObligationLiquidityIxAccounts, RepayObligationLiquidityIxData),
                                RepayObligationLiquidityV2(RepayObligationLiquidityV2IxAccounts, RepayObligationLiquidityV2IxData),
                                RepayAndWithdrawAndRedeem(RepayAndWithdrawAndRedeemIxAccounts, RepayAndWithdrawAndRedeemIxData),
                                DepositAndWithdraw(DepositAndWithdrawIxAccounts, DepositAndWithdrawIxData),
                                DepositReserveLiquidityAndObligationCollateral(DepositReserveLiquidityAndObligationCollateralIxAccounts, DepositReserveLiquidityAndObligationCollateralIxData),
                                DepositReserveLiquidityAndObligationCollateralV2(DepositReserveLiquidityAndObligationCollateralV2IxAccounts, DepositReserveLiquidityAndObligationCollateralV2IxData),
                                WithdrawObligationCollateralAndRedeemReserveCollateral(WithdrawObligationCollateralAndRedeemReserveCollateralIxAccounts, WithdrawObligationCollateralAndRedeemReserveCollateralIxData),
                                WithdrawObligationCollateralAndRedeemReserveCollateralV2(WithdrawObligationCollateralAndRedeemReserveCollateralV2IxAccounts, WithdrawObligationCollateralAndRedeemReserveCollateralV2IxData),
                                LiquidateObligationAndRedeemReserveCollateral(LiquidateObligationAndRedeemReserveCollateralIxAccounts, LiquidateObligationAndRedeemReserveCollateralIxData),
                                LiquidateObligationAndRedeemReserveCollateralV2(LiquidateObligationAndRedeemReserveCollateralV2IxAccounts, LiquidateObligationAndRedeemReserveCollateralV2IxData),
                                FlashRepayReserveLiquidity(FlashRepayReserveLiquidityIxAccounts, FlashRepayReserveLiquidityIxData),
                                FlashBorrowReserveLiquidity(FlashBorrowReserveLiquidityIxAccounts, FlashBorrowReserveLiquidityIxData),
                                RequestElevationGroup(RequestElevationGroupIxAccounts, RequestElevationGroupIxData),
                                InitReferrerTokenState(InitReferrerTokenStateIxAccounts),
                                InitUserMetadata(InitUserMetadataIxAccounts, InitUserMetadataIxData),
                                WithdrawReferrerFees(WithdrawReferrerFeesIxAccounts),
                                InitReferrerStateAndShortUrl(InitReferrerStateAndShortUrlIxAccounts, InitReferrerStateAndShortUrlIxData),
                                DeleteReferrerStateAndShortUrl(DeleteReferrerStateAndShortUrlIxAccounts),
                                IdlMissingTypes(IdlMissingTypesIxAccounts, IdlMissingTypesIxData),
            }

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = KaminoLendingProgramIx;

    fn id(&self) -> std::borrow::Cow<str> {
        "KaminoLending::InstructionParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(&self, ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

impl InstructionParser {
    pub(crate) fn parse_impl(ix:&yellowstone_vixen_core::instruction::InstructionUpdate) -> yellowstone_vixen_core::ParseResult<KaminoLendingProgramIx> {
        let accounts_len = ix.accounts.len();
                let ix_discriminator:[u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
            match ix_discriminator {
                                                                                        [34, 162, 116, 14, 101, 137, 94, 239] => {
                                check_min_accounts_req(accounts_len, 5)?;
                                let ix_accounts = InitLendingMarketIxAccounts{
                                                                            lending_market_owner: ix.accounts[0].0.into(),
                                                                            lending_market: ix.accounts[1].0.into(),
                                                                            lending_market_authority: ix.accounts[2].0.into(),
                                                                            system_program: ix.accounts[3].0.into(),
                                                                            rent: ix.accounts[4].0.into(),
                                                                    };
                                                                    let de_ix_data:InitLendingMarketIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::InitLendingMarket(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [209, 157, 53, 210, 97, 180, 31, 45] => {
                                check_min_accounts_req(accounts_len, 2)?;
                                let ix_accounts = UpdateLendingMarketIxAccounts{
                                                                            lending_market_owner: ix.accounts[0].0.into(),
                                                                            lending_market: ix.accounts[1].0.into(),
                                                                    };
                                                                    let de_ix_data:UpdateLendingMarketIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::UpdateLendingMarket(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [118, 224, 10, 62, 196, 230, 184, 89] => {
                                check_min_accounts_req(accounts_len, 2)?;
                                let ix_accounts = UpdateLendingMarketOwnerIxAccounts{
                                                                            lending_market_owner_cached: ix.accounts[0].0.into(),
                                                                            lending_market: ix.accounts[1].0.into(),
                                                                    };
                                                                    Ok(KaminoLendingProgramIx::UpdateLendingMarketOwner(ix_accounts))
                                                            },
                                                                                                                                    [138, 245, 71, 225, 153, 4, 3, 43] => {
                                check_min_accounts_req(accounts_len, 14)?;
                                let ix_accounts = InitReserveIxAccounts{
                                                                            lending_market_owner: ix.accounts[0].0.into(),
                                                                            lending_market: ix.accounts[1].0.into(),
                                                                            lending_market_authority: ix.accounts[2].0.into(),
                                                                            reserve: ix.accounts[3].0.into(),
                                                                            reserve_liquidity_mint: ix.accounts[4].0.into(),
                                                                            reserve_liquidity_supply: ix.accounts[5].0.into(),
                                                                            fee_receiver: ix.accounts[6].0.into(),
                                                                            reserve_collateral_mint: ix.accounts[7].0.into(),
                                                                            reserve_collateral_supply: ix.accounts[8].0.into(),
                                                                            initial_liquidity_source: ix.accounts[9].0.into(),
                                                                            rent: ix.accounts[10].0.into(),
                                                                            liquidity_token_program: ix.accounts[11].0.into(),
                                                                            collateral_token_program: ix.accounts[12].0.into(),
                                                                            system_program: ix.accounts[13].0.into(),
                                                                    };
                                                                    Ok(KaminoLendingProgramIx::InitReserve(ix_accounts))
                                                            },
                                                                                                                                    [218, 6, 62, 233, 1, 33, 232, 82] => {
                                check_min_accounts_req(accounts_len, 10)?;
                                let ix_accounts = InitFarmsForReserveIxAccounts{
                                                                            lending_market_owner: ix.accounts[0].0.into(),
                                                                            lending_market: ix.accounts[1].0.into(),
                                                                            lending_market_authority: ix.accounts[2].0.into(),
                                                                            reserve: ix.accounts[3].0.into(),
                                                                            farms_program: ix.accounts[4].0.into(),
                                                                            farms_global_config: ix.accounts[5].0.into(),
                                                                            farm_state: ix.accounts[6].0.into(),
                                                                            farms_vault_authority: ix.accounts[7].0.into(),
                                                                            rent: ix.accounts[8].0.into(),
                                                                            system_program: ix.accounts[9].0.into(),
                                                                    };
                                                                    let de_ix_data:InitFarmsForReserveIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::InitFarmsForReserve(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [61, 148, 100, 70, 143, 107, 17, 13] => {
                                check_min_accounts_req(accounts_len, 3)?;
                                let ix_accounts = UpdateReserveConfigIxAccounts{
                                                                            lending_market_owner: ix.accounts[0].0.into(),
                                                                            lending_market: ix.accounts[1].0.into(),
                                                                            reserve: ix.accounts[2].0.into(),
                                                                    };
                                                                    let de_ix_data:UpdateReserveConfigIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::UpdateReserveConfig(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [215, 39, 180, 41, 173, 46, 248, 220] => {
                                check_min_accounts_req(accounts_len, 7)?;
                                let ix_accounts = RedeemFeesIxAccounts{
                                                                            reserve: ix.accounts[0].0.into(),
                                                                            reserve_liquidity_mint: ix.accounts[1].0.into(),
                                                                            reserve_liquidity_fee_receiver: ix.accounts[2].0.into(),
                                                                            reserve_supply_liquidity: ix.accounts[3].0.into(),
                                                                            lending_market: ix.accounts[4].0.into(),
                                                                            lending_market_authority: ix.accounts[5].0.into(),
                                                                            token_program: ix.accounts[6].0.into(),
                                                                    };
                                                                    Ok(KaminoLendingProgramIx::RedeemFees(ix_accounts))
                                                            },
                                                                                                                                    [158, 201, 158, 189, 33, 93, 162, 103] => {
                                check_min_accounts_req(accounts_len, 8)?;
                                let ix_accounts = WithdrawProtocolFeeIxAccounts{
                                                                            lending_market_owner: ix.accounts[0].0.into(),
                                                                            lending_market: ix.accounts[1].0.into(),
                                                                            reserve: ix.accounts[2].0.into(),
                                                                            reserve_liquidity_mint: ix.accounts[3].0.into(),
                                                                            lending_market_authority: ix.accounts[4].0.into(),
                                                                            fee_vault: ix.accounts[5].0.into(),
                                                                            lending_market_owner_ata: ix.accounts[6].0.into(),
                                                                            token_program: ix.accounts[7].0.into(),
                                                                    };
                                                                    let de_ix_data:WithdrawProtocolFeeIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::WithdrawProtocolFee(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [245, 75, 91, 0, 236, 97, 19, 3] => {
                                check_min_accounts_req(accounts_len, 5)?;
                                let ix_accounts = SocializeLossIxAccounts{
                                                                            risk_council: ix.accounts[0].0.into(),
                                                                            obligation: ix.accounts[1].0.into(),
                                                                            lending_market: ix.accounts[2].0.into(),
                                                                            reserve: ix.accounts[3].0.into(),
                                                                            instruction_sysvar_account: ix.accounts[4].0.into(),
                                                                    };
                                                                    let de_ix_data:SocializeLossIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::SocializeLoss(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                                                        [164, 35, 182, 19, 0, 116, 243, 127] => {
                                check_min_accounts_req(accounts_len, 3)?;
                                let ix_accounts = MarkObligationForDeleveragingIxAccounts{
                                                                            risk_council: ix.accounts[0].0.into(),
                                                                            obligation: ix.accounts[1].0.into(),
                                                                            lending_market: ix.accounts[2].0.into(),
                                                                    };
                                                                    let de_ix_data:MarkObligationForDeleveragingIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::MarkObligationForDeleveraging(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                                                        [144, 110, 26, 103, 162, 204, 252, 147] => {
                                check_min_accounts_req(accounts_len, 0)?;
                                let ix_accounts = RefreshReservesBatchIxAccounts{
                                                                    };
                                                                    let de_ix_data:RefreshReservesBatchIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::RefreshReservesBatch(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [169, 201, 30, 126, 6, 205, 102, 68] => {
                                check_min_accounts_req(accounts_len, 12)?;
                                let ix_accounts = DepositReserveLiquidityIxAccounts{
                                                                            owner: ix.accounts[0].0.into(),
                                                                            reserve: ix.accounts[1].0.into(),
                                                                            lending_market: ix.accounts[2].0.into(),
                                                                            lending_market_authority: ix.accounts[3].0.into(),
                                                                            reserve_liquidity_mint: ix.accounts[4].0.into(),
                                                                            reserve_liquidity_supply: ix.accounts[5].0.into(),
                                                                            reserve_collateral_mint: ix.accounts[6].0.into(),
                                                                            user_source_liquidity: ix.accounts[7].0.into(),
                                                                            user_destination_collateral: ix.accounts[8].0.into(),
                                                                            collateral_token_program: ix.accounts[9].0.into(),
                                                                            liquidity_token_program: ix.accounts[10].0.into(),
                                                                            instruction_sysvar_account: ix.accounts[11].0.into(),
                                                                    };
                                                                    let de_ix_data:DepositReserveLiquidityIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::DepositReserveLiquidity(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [234, 117, 181, 125, 185, 142, 220, 29] => {
                                check_min_accounts_req(accounts_len, 12)?;
                                let ix_accounts = RedeemReserveCollateralIxAccounts{
                                                                            owner: ix.accounts[0].0.into(),
                                                                            lending_market: ix.accounts[1].0.into(),
                                                                            reserve: ix.accounts[2].0.into(),
                                                                            lending_market_authority: ix.accounts[3].0.into(),
                                                                            reserve_liquidity_mint: ix.accounts[4].0.into(),
                                                                            reserve_collateral_mint: ix.accounts[5].0.into(),
                                                                            reserve_liquidity_supply: ix.accounts[6].0.into(),
                                                                            user_source_collateral: ix.accounts[7].0.into(),
                                                                            user_destination_liquidity: ix.accounts[8].0.into(),
                                                                            collateral_token_program: ix.accounts[9].0.into(),
                                                                            liquidity_token_program: ix.accounts[10].0.into(),
                                                                            instruction_sysvar_account: ix.accounts[11].0.into(),
                                                                    };
                                                                    let de_ix_data:RedeemReserveCollateralIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::RedeemReserveCollateral(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [251, 10, 231, 76, 27, 11, 159, 96] => {
                                check_min_accounts_req(accounts_len, 9)?;
                                let ix_accounts = InitObligationIxAccounts{
                                                                            obligation_owner: ix.accounts[0].0.into(),
                                                                            fee_payer: ix.accounts[1].0.into(),
                                                                            obligation: ix.accounts[2].0.into(),
                                                                            lending_market: ix.accounts[3].0.into(),
                                                                            seed1_account: ix.accounts[4].0.into(),
                                                                            seed2_account: ix.accounts[5].0.into(),
                                                                            owner_user_metadata: ix.accounts[6].0.into(),
                                                                            rent: ix.accounts[7].0.into(),
                                                                            system_program: ix.accounts[8].0.into(),
                                                                    };
                                                                    let de_ix_data:InitObligationIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::InitObligation(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [136, 63, 15, 186, 211, 152, 168, 164] => {
                                check_min_accounts_req(accounts_len, 11)?;
                                let ix_accounts = InitObligationFarmsForReserveIxAccounts{
                                                                            payer: ix.accounts[0].0.into(),
                                                                            owner: ix.accounts[1].0.into(),
                                                                            obligation: ix.accounts[2].0.into(),
                                                                            lending_market_authority: ix.accounts[3].0.into(),
                                                                            reserve: ix.accounts[4].0.into(),
                                                                            reserve_farm_state: ix.accounts[5].0.into(),
                                                                            obligation_farm: ix.accounts[6].0.into(),
                                                                            lending_market: ix.accounts[7].0.into(),
                                                                            farms_program: ix.accounts[8].0.into(),
                                                                            rent: ix.accounts[9].0.into(),
                                                                            system_program: ix.accounts[10].0.into(),
                                                                    };
                                                                    let de_ix_data:InitObligationFarmsForReserveIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::InitObligationFarmsForReserve(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [140, 144, 253, 21, 10, 74, 248, 3] => {
                                check_min_accounts_req(accounts_len, 10)?;
                                let ix_accounts = RefreshObligationFarmsForReserveIxAccounts{
                                                                            crank: ix.accounts[0].0.into(),
                                                                            obligation: ix.accounts[1].0.into(),
                                                                            lending_market_authority: ix.accounts[2].0.into(),
                                                                            reserve: ix.accounts[3].0.into(),
                                                                            reserve_farm_state: ix.accounts[4].0.into(),
                                                                            obligation_farm_user_state: ix.accounts[5].0.into(),
                                                                            lending_market: ix.accounts[6].0.into(),
                                                                            farms_program: ix.accounts[7].0.into(),
                                                                            rent: ix.accounts[8].0.into(),
                                                                            system_program: ix.accounts[9].0.into(),
                                                                    };
                                                                    let de_ix_data:RefreshObligationFarmsForReserveIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::RefreshObligationFarmsForReserve(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [33, 132, 147, 228, 151, 192, 72, 89] => {
                                check_min_accounts_req(accounts_len, 2)?;
                                let ix_accounts = RefreshObligationIxAccounts{
                                                                            lending_market: ix.accounts[0].0.into(),
                                                                            obligation: ix.accounts[1].0.into(),
                                                                    };
                                                                    Ok(KaminoLendingProgramIx::RefreshObligation(ix_accounts))
                                                            },
                                                                                                                                    [108, 209, 4, 72, 21, 22, 118, 133] => {
                                check_min_accounts_req(accounts_len, 8)?;
                                let ix_accounts = DepositObligationCollateralIxAccounts{
                                                                            owner: ix.accounts[0].0.into(),
                                                                            obligation: ix.accounts[1].0.into(),
                                                                            lending_market: ix.accounts[2].0.into(),
                                                                            deposit_reserve: ix.accounts[3].0.into(),
                                                                            reserve_destination_collateral: ix.accounts[4].0.into(),
                                                                            user_source_collateral: ix.accounts[5].0.into(),
                                                                            token_program: ix.accounts[6].0.into(),
                                                                            instruction_sysvar_account: ix.accounts[7].0.into(),
                                                                    };
                                                                    let de_ix_data:DepositObligationCollateralIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::DepositObligationCollateral(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                                                        [37, 116, 205, 103, 243, 192, 92, 198] => {
                                check_min_accounts_req(accounts_len, 9)?;
                                let ix_accounts = WithdrawObligationCollateralIxAccounts{
                                                                            owner: ix.accounts[0].0.into(),
                                                                            obligation: ix.accounts[1].0.into(),
                                                                            lending_market: ix.accounts[2].0.into(),
                                                                            lending_market_authority: ix.accounts[3].0.into(),
                                                                            withdraw_reserve: ix.accounts[4].0.into(),
                                                                            reserve_source_collateral: ix.accounts[5].0.into(),
                                                                            user_destination_collateral: ix.accounts[6].0.into(),
                                                                            token_program: ix.accounts[7].0.into(),
                                                                            instruction_sysvar_account: ix.accounts[8].0.into(),
                                                                    };
                                                                    let de_ix_data:WithdrawObligationCollateralIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::WithdrawObligationCollateral(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                                                                                                                                [145, 178, 13, 225, 76, 240, 147, 72] => {
                                check_min_accounts_req(accounts_len, 9)?;
                                let ix_accounts = RepayObligationLiquidityIxAccounts{
                                                                            owner: ix.accounts[0].0.into(),
                                                                            obligation: ix.accounts[1].0.into(),
                                                                            lending_market: ix.accounts[2].0.into(),
                                                                            repay_reserve: ix.accounts[3].0.into(),
                                                                            reserve_liquidity_mint: ix.accounts[4].0.into(),
                                                                            reserve_destination_liquidity: ix.accounts[5].0.into(),
                                                                            user_source_liquidity: ix.accounts[6].0.into(),
                                                                            token_program: ix.accounts[7].0.into(),
                                                                            instruction_sysvar_account: ix.accounts[8].0.into(),
                                                                    };
                                                                    let de_ix_data:RepayObligationLiquidityIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::RepayObligationLiquidity(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                [177, 71, 154, 188, 226, 133, 74, 55] => {
                                check_min_accounts_req(accounts_len, 20)?;
                                let ix_accounts = LiquidateObligationAndRedeemReserveCollateralIxAccounts{
                                                                            liquidator: ix.accounts[0].0.into(),
                                                                            obligation: ix.accounts[1].0.into(),
                                                                            lending_market: ix.accounts[2].0.into(),
                                                                            lending_market_authority: ix.accounts[3].0.into(),
                                                                            repay_reserve: ix.accounts[4].0.into(),
                                                                            repay_reserve_liquidity_mint: ix.accounts[5].0.into(),
                                                                            repay_reserve_liquidity_supply: ix.accounts[6].0.into(),
                                                                            withdraw_reserve: ix.accounts[7].0.into(),
                                                                            withdraw_reserve_liquidity_mint: ix.accounts[8].0.into(),
                                                                            withdraw_reserve_collateral_mint: ix.accounts[9].0.into(),
                                                                            withdraw_reserve_collateral_supply: ix.accounts[10].0.into(),
                                                                            withdraw_reserve_liquidity_supply: ix.accounts[11].0.into(),
                                                                            withdraw_reserve_liquidity_fee_receiver: ix.accounts[12].0.into(),
                                                                            user_source_liquidity: ix.accounts[13].0.into(),
                                                                            user_destination_collateral: ix.accounts[14].0.into(),
                                                                            user_destination_liquidity: ix.accounts[15].0.into(),
                                                                            collateral_token_program: ix.accounts[16].0.into(),
                                                                            repay_liquidity_token_program: ix.accounts[17].0.into(),
                                                                            withdraw_liquidity_token_program: ix.accounts[18].0.into(),
                                                                            instruction_sysvar_account: ix.accounts[19].0.into(),
                                                                    };
                                                                    let de_ix_data:LiquidateObligationAndRedeemReserveCollateralIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::LiquidateObligationAndRedeemReserveCollateral(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                                                                                                                                [36, 119, 251, 129, 34, 240, 7, 147] => {
                                check_min_accounts_req(accounts_len, 3)?;
                                let ix_accounts = RequestElevationGroupIxAccounts{
                                                                            owner: ix.accounts[0].0.into(),
                                                                            obligation: ix.accounts[1].0.into(),
                                                                            lending_market: ix.accounts[2].0.into(),
                                                                    };
                                                                    let de_ix_data:RequestElevationGroupIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::RequestElevationGroup(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [116, 45, 66, 148, 58, 13, 218, 115] => {
                                check_min_accounts_req(accounts_len, 7)?;
                                let ix_accounts = InitReferrerTokenStateIxAccounts{
                                                                            payer: ix.accounts[0].0.into(),
                                                                            lending_market: ix.accounts[1].0.into(),
                                                                            reserve: ix.accounts[2].0.into(),
                                                                            referrer: ix.accounts[3].0.into(),
                                                                            referrer_token_state: ix.accounts[4].0.into(),
                                                                            rent: ix.accounts[5].0.into(),
                                                                            system_program: ix.accounts[6].0.into(),
                                                                    };
                                                                    Ok(KaminoLendingProgramIx::InitReferrerTokenState(ix_accounts))
                                                            },
                                                                                                                                                                        [171, 118, 121, 201, 233, 140, 23, 228] => {
                                check_min_accounts_req(accounts_len, 9)?;
                                let ix_accounts = WithdrawReferrerFeesIxAccounts{
                                                                            referrer: ix.accounts[0].0.into(),
                                                                            referrer_token_state: ix.accounts[1].0.into(),
                                                                            reserve: ix.accounts[2].0.into(),
                                                                            reserve_liquidity_mint: ix.accounts[3].0.into(),
                                                                            reserve_supply_liquidity: ix.accounts[4].0.into(),
                                                                            referrer_token_account: ix.accounts[5].0.into(),
                                                                            lending_market: ix.accounts[6].0.into(),
                                                                            lending_market_authority: ix.accounts[7].0.into(),
                                                                            token_program: ix.accounts[8].0.into(),
                                                                    };
                                                                    Ok(KaminoLendingProgramIx::WithdrawReferrerFees(ix_accounts))
                                                            },
                                                                                                                                    [165, 19, 25, 127, 100, 55, 31, 90] => {
                                check_min_accounts_req(accounts_len, 6)?;
                                let ix_accounts = InitReferrerStateAndShortUrlIxAccounts{
                                                                            referrer: ix.accounts[0].0.into(),
                                                                            referrer_state: ix.accounts[1].0.into(),
                                                                            referrer_short_url: ix.accounts[2].0.into(),
                                                                            referrer_user_metadata: ix.accounts[3].0.into(),
                                                                            rent: ix.accounts[4].0.into(),
                                                                            system_program: ix.accounts[5].0.into(),
                                                                    };
                                                                    let de_ix_data:InitReferrerStateAndShortUrlIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::InitReferrerStateAndShortUrl(ix_accounts, de_ix_data))
                                                            },
                                                                                                                                    [153, 185, 99, 28, 228, 179, 187, 150] => {
                                check_min_accounts_req(accounts_len, 5)?;
                                let ix_accounts = DeleteReferrerStateAndShortUrlIxAccounts{
                                                                            referrer: ix.accounts[0].0.into(),
                                                                            referrer_state: ix.accounts[1].0.into(),
                                                                            short_url: ix.accounts[2].0.into(),
                                                                            rent: ix.accounts[3].0.into(),
                                                                            system_program: ix.accounts[4].0.into(),
                                                                    };
                                                                    Ok(KaminoLendingProgramIx::DeleteReferrerStateAndShortUrl(ix_accounts))
                                                            },
                                                                                                                                    [130, 80, 38, 153, 80, 212, 182, 253] => {
                                check_min_accounts_req(accounts_len, 3)?;
                                let ix_accounts = IdlMissingTypesIxAccounts{
                                                                            lending_market_owner: ix.accounts[0].0.into(),
                                                                            lending_market: ix.accounts[1].0.into(),
                                                                            reserve: ix.accounts[2].0.into(),
                                                                    };
                                                                    let de_ix_data:IdlMissingTypesIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok(KaminoLendingProgramIx::IdlMissingTypes(ix_accounts, de_ix_data))
                                                            },
                                                                            _ => Err(yellowstone_vixen_core::ParseError::from("Invalid Instruction discriminator".to_owned())),
            }
            }

}

pub fn check_min_accounts_req(actual: usize, expected: usize) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

