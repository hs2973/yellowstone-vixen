//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum OpenbookV2Error {
    /// 6000 -
    #[error("")]
    SomeError = 0x1770,
    /// 6001 - Name lenght above limit
    #[error("Name lenght above limit")]
    InvalidInputNameLength = 0x1771,
    /// 6002 - Market cannot be created as expired
    #[error("Market cannot be created as expired")]
    InvalidInputMarketExpired = 0x1772,
    /// 6003 - Taker fees should be positive and if maker fees are negative, greater or equal to their abs value
    #[error(
        "Taker fees should be positive and if maker fees are negative, greater or equal to their \
         abs value"
    )]
    InvalidInputMarketFees = 0x1773,
    /// 6004 - Lots cannot be negative
    #[error("Lots cannot be negative")]
    InvalidInputLots = 0x1774,
    /// 6005 - Lots size above market limits
    #[error("Lots size above market limits")]
    InvalidInputLotsSize = 0x1775,
    /// 6006 - Input amounts above limits
    #[error("Input amounts above limits")]
    InvalidInputOrdersAmounts = 0x1776,
    /// 6007 - Price lots should be greater than zero
    #[error("Price lots should be greater than zero")]
    InvalidInputCancelSize = 0x1777,
    /// 6008 - Expected cancel size should be greater than zero
    #[error("Expected cancel size should be greater than zero")]
    InvalidInputPriceLots = 0x1778,
    /// 6009 - Peg limit should be greater than zero
    #[error("Peg limit should be greater than zero")]
    InvalidInputPegLimit = 0x1779,
    /// 6010 - The order type is invalid. A taker order must be Market or ImmediateOrCancel
    #[error("The order type is invalid. A taker order must be Market or ImmediateOrCancel")]
    InvalidInputOrderType = 0x177a,
    /// 6011 - Order id cannot be zero
    #[error("Order id cannot be zero")]
    InvalidInputOrderId = 0x177b,
    /// 6012 - Slot above heap limit
    #[error("Slot above heap limit")]
    InvalidInputHeapSlots = 0x177c,
    /// 6013 - Cannot combine two oracles of different providers
    #[error("Cannot combine two oracles of different providers")]
    InvalidOracleTypes = 0x177d,
    /// 6014 - Cannot configure secondary oracle without primary
    #[error("Cannot configure secondary oracle without primary")]
    InvalidSecondOracle = 0x177e,
    /// 6015 - This market does not have a `close_market_admin` and thus cannot be closed.
    #[error("This market does not have a `close_market_admin` and thus cannot be closed.")]
    NoCloseMarketAdmin = 0x177f,
    /// 6016 - The signer of this transaction is not this market's `close_market_admin`.
    #[error("The signer of this transaction is not this market's `close_market_admin`.")]
    InvalidCloseMarketAdmin = 0x1780,
    /// 6017 - The `open_orders_admin` required by this market to sign all instructions that creates orders is missing or is not valid
    #[error(
        "The `open_orders_admin` required by this market to sign all instructions that creates \
         orders is missing or is not valid"
    )]
    InvalidOpenOrdersAdmin = 0x1781,
    /// 6018 - The `consume_events_admin` required by this market to sign all instructions that consume events is missing or is not valid
    #[error(
        "The `consume_events_admin` required by this market to sign all instructions that consume \
         events is missing or is not valid"
    )]
    InvalidConsumeEventsAdmin = 0x1782,
    /// 6019 - Provided `market_vault` is invalid
    #[error("Provided `market_vault` is invalid")]
    InvalidMarketVault = 0x1783,
    /// 6020 - Cannot be closed due to the existence of open orders accounts
    #[error("Cannot be closed due to the existence of open orders accounts")]
    IndexerActiveOO = 0x1784,
    /// 6021 - Cannot place a peg order due to invalid oracle state
    #[error("Cannot place a peg order due to invalid oracle state")]
    OraclePegInvalidOracleState = 0x1785,
    /// 6022 - oracle type cannot be determined
    #[error("oracle type cannot be determined")]
    UnknownOracleType = 0x1786,
    /// 6023 - an oracle does not reach the confidence threshold
    #[error("an oracle does not reach the confidence threshold")]
    OracleConfidence = 0x1787,
    /// 6024 - an oracle is stale
    #[error("an oracle is stale")]
    OracleStale = 0x1788,
    /// 6025 - Order id not found on the orderbook
    #[error("Order id not found on the orderbook")]
    OrderIdNotFound = 0x1789,
    /// 6026 - Event heap contains elements and market can't be closed
    #[error("Event heap contains elements and market can't be closed")]
    EventHeapContainsElements = 0x178a,
    /// 6027 - ImmediateOrCancel is not a PostOrderType
    #[error("ImmediateOrCancel is not a PostOrderType")]
    InvalidOrderPostIOC = 0x178b,
    /// 6028 - Market is not a PostOrderType
    #[error("Market is not a PostOrderType")]
    InvalidOrderPostMarket = 0x178c,
    /// 6029 - would self trade
    #[error("would self trade")]
    WouldSelfTrade = 0x178d,
    /// 6030 - The Market has already expired.
    #[error("The Market has already expired.")]
    MarketHasExpired = 0x178e,
    /// 6031 - Price lots should be greater than zero
    #[error("Price lots should be greater than zero")]
    InvalidPriceLots = 0x178f,
    /// 6032 - Oracle price above market limits
    #[error("Oracle price above market limits")]
    InvalidOraclePrice = 0x1790,
    /// 6033 - The Market has not expired yet.
    #[error("The Market has not expired yet.")]
    MarketHasNotExpired = 0x1791,
    /// 6034 - No correct owner or delegate.
    #[error("No correct owner or delegate.")]
    NoOwnerOrDelegate = 0x1792,
    /// 6035 - No correct owner
    #[error("No correct owner")]
    NoOwner = 0x1793,
    /// 6036 - No free order index in open orders account
    #[error("No free order index in open orders account")]
    OpenOrdersFull = 0x1794,
    /// 6037 - Book contains elements
    #[error("Book contains elements")]
    BookContainsElements = 0x1795,
    /// 6038 - Could not find order in user account
    #[error("Could not find order in user account")]
    OpenOrdersOrderNotFound = 0x1796,
    /// 6039 - Amount to post above book limits
    #[error("Amount to post above book limits")]
    InvalidPostAmount = 0x1797,
    /// 6040 - Oracle peg orders are not enabled for this market
    #[error("Oracle peg orders are not enabled for this market")]
    DisabledOraclePeg = 0x1798,
    /// 6041 - Cannot close a non-empty market
    #[error("Cannot close a non-empty market")]
    NonEmptyMarket = 0x1799,
    /// 6042 - Cannot close a non-empty open orders account
    #[error("Cannot close a non-empty open orders account")]
    NonEmptyOpenOrdersPosition = 0x179a,
}

impl solana_program::program_error::PrintProgramError for OpenbookV2Error {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for OpenbookV2Error {
    fn type_of() -> &'static str { "OpenbookV2Error" }
}
