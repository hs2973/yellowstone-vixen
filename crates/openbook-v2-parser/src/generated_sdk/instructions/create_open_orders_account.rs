//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CreateOpenOrdersAccount {
    pub payer: solana_program::pubkey::Pubkey,

    pub owner: solana_program::pubkey::Pubkey,

    pub delegate_account: Option<solana_program::pubkey::Pubkey>,

    pub open_orders_indexer: solana_program::pubkey::Pubkey,

    pub open_orders_account: solana_program::pubkey::Pubkey,

    pub market: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl CreateOpenOrdersAccount {
    pub fn instruction(
        &self,
        args: CreateOpenOrdersAccountInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateOpenOrdersAccountInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        if let Some(delegate_account) = self.delegate_account {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                delegate_account,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.open_orders_indexer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.open_orders_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateOpenOrdersAccountInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::OPENBOOK_V2_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateOpenOrdersAccountInstructionData {
    discriminator: [u8; 8],
}

impl CreateOpenOrdersAccountInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [204, 181, 175, 222, 40, 125, 188, 71],
        }
    }
}

impl Default for CreateOpenOrdersAccountInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateOpenOrdersAccountInstructionArgs {
    pub name: String,
}

/// Instruction builder for `CreateOpenOrdersAccount`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[signer]` owner
///   2. `[optional]` delegate_account
///   3. `[writable]` open_orders_indexer
///   4. `[writable]` open_orders_account
///   5. `[]` market
///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateOpenOrdersAccountBuilder {
    payer: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    delegate_account: Option<solana_program::pubkey::Pubkey>,
    open_orders_indexer: Option<solana_program::pubkey::Pubkey>,
    open_orders_account: Option<solana_program::pubkey::Pubkey>,
    market: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    name: Option<String>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateOpenOrdersAccountBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn delegate_account(
        &mut self,
        delegate_account: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.delegate_account = delegate_account;
        self
    }

    #[inline(always)]
    pub fn open_orders_indexer(
        &mut self,
        open_orders_indexer: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.open_orders_indexer = Some(open_orders_indexer);
        self
    }

    #[inline(always)]
    pub fn open_orders_account(
        &mut self,
        open_orders_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.open_orders_account = Some(open_orders_account);
        self
    }

    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateOpenOrdersAccount {
            payer: self.payer.expect("payer is not set"),
            owner: self.owner.expect("owner is not set"),
            delegate_account: self.delegate_account,
            open_orders_indexer: self
                .open_orders_indexer
                .expect("open_orders_indexer is not set"),
            open_orders_account: self
                .open_orders_account
                .expect("open_orders_account is not set"),
            market: self.market.expect("market is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = CreateOpenOrdersAccountInstructionArgs {
            name: self.name.clone().expect("name is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_open_orders_account` CPI accounts.
pub struct CreateOpenOrdersAccountCpiAccounts<'a, 'b> {
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub delegate_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub open_orders_indexer: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_open_orders_account` CPI instruction.
pub struct CreateOpenOrdersAccountCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub delegate_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub open_orders_indexer: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateOpenOrdersAccountInstructionArgs,
}

impl<'a, 'b> CreateOpenOrdersAccountCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateOpenOrdersAccountCpiAccounts<'a, 'b>,
        args: CreateOpenOrdersAccountInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            owner: accounts.owner,
            delegate_account: accounts.delegate_account,
            open_orders_indexer: accounts.open_orders_indexer,
            open_orders_account: accounts.open_orders_account,
            market: accounts.market,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        if let Some(delegate_account) = self.delegate_account {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *delegate_account.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.open_orders_indexer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.open_orders_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateOpenOrdersAccountInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::OPENBOOK_V2_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.owner.clone());
        if let Some(delegate_account) = self.delegate_account {
            account_infos.push(delegate_account.clone());
        }
        account_infos.push(self.open_orders_indexer.clone());
        account_infos.push(self.open_orders_account.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateOpenOrdersAccount` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[signer]` owner
///   2. `[optional]` delegate_account
///   3. `[writable]` open_orders_indexer
///   4. `[writable]` open_orders_account
///   5. `[]` market
///   6. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateOpenOrdersAccountCpiBuilder<'a, 'b> {
    instruction: Box<CreateOpenOrdersAccountCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateOpenOrdersAccountCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateOpenOrdersAccountCpiBuilderInstruction {
            __program: program,
            payer: None,
            owner: None,
            delegate_account: None,
            open_orders_indexer: None,
            open_orders_account: None,
            market: None,
            system_program: None,
            name: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn delegate_account(
        &mut self,
        delegate_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.delegate_account = delegate_account;
        self
    }

    #[inline(always)]
    pub fn open_orders_indexer(
        &mut self,
        open_orders_indexer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders_indexer = Some(open_orders_indexer);
        self
    }

    #[inline(always)]
    pub fn open_orders_account(
        &mut self,
        open_orders_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders_account = Some(open_orders_account);
        self
    }

    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateOpenOrdersAccountInstructionArgs {
            name: self.instruction.name.clone().expect("name is not set"),
        };
        let instruction = CreateOpenOrdersAccountCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            delegate_account: self.instruction.delegate_account,

            open_orders_indexer: self
                .instruction
                .open_orders_indexer
                .expect("open_orders_indexer is not set"),

            open_orders_account: self
                .instruction
                .open_orders_account
                .expect("open_orders_account is not set"),

            market: self.instruction.market.expect("market is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateOpenOrdersAccountCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    delegate_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    open_orders_indexer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    open_orders_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    name: Option<String>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
