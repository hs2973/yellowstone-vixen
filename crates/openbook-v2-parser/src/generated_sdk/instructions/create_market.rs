//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CreateMarket {
    pub market: solana_program::pubkey::Pubkey,

    pub market_authority: solana_program::pubkey::Pubkey,
    /// Accounts are initialized by client,
    /// anchor discriminator is set first when ix exits,
    pub bids: solana_program::pubkey::Pubkey,

    pub asks: solana_program::pubkey::Pubkey,

    pub event_heap: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub market_base_vault: solana_program::pubkey::Pubkey,

    pub market_quote_vault: solana_program::pubkey::Pubkey,

    pub base_mint: solana_program::pubkey::Pubkey,

    pub quote_mint: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub oracle_a: Option<solana_program::pubkey::Pubkey>,

    pub oracle_b: Option<solana_program::pubkey::Pubkey>,

    pub collect_fee_admin: solana_program::pubkey::Pubkey,

    pub open_orders_admin: Option<solana_program::pubkey::Pubkey>,

    pub consume_events_admin: Option<solana_program::pubkey::Pubkey>,

    pub close_market_admin: Option<solana_program::pubkey::Pubkey>,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl CreateMarket {
    pub fn instruction(
        &self,
        args: CreateMarketInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateMarketInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(21 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.market_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bids, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.asks, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.event_heap,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market_base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market_quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        if let Some(oracle_a) = self.oracle_a {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                oracle_a, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        if let Some(oracle_b) = self.oracle_b {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                oracle_b, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.collect_fee_admin,
            false,
        ));
        if let Some(open_orders_admin) = self.open_orders_admin {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                open_orders_admin,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        if let Some(consume_events_admin) = self.consume_events_admin {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                consume_events_admin,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        if let Some(close_market_admin) = self.close_market_admin {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                close_market_admin,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateMarketInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::OPENBOOK_V2_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateMarketInstructionData {
    discriminator: [u8; 8],
}

impl CreateMarketInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [103, 226, 97, 235, 200, 188, 251, 254],
        }
    }
}

impl Default for CreateMarketInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateMarketInstructionArgs {
    pub name: String,
    pub conf_filter: f32,
    pub max_staleness_slots: Option<u32>,
    pub quote_lot_size: i64,
    pub base_lot_size: i64,
    pub maker_fee: i64,
    pub taker_fee: i64,
    pub time_expiry: i64,
}

/// Instruction builder for `CreateMarket`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` market
///   1. `[]` market_authority
///   2. `[writable]` bids
///   3. `[writable]` asks
///   4. `[writable]` event_heap
///   5. `[writable, signer]` payer
///   6. `[writable]` market_base_vault
///   7. `[writable]` market_quote_vault
///   8. `[]` base_mint
///   9. `[]` quote_mint
///   10. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[]` associated_token_program
///   13. `[optional]` oracle_a
///   14. `[optional]` oracle_b
///   15. `[]` collect_fee_admin
///   16. `[optional]` open_orders_admin
///   17. `[optional]` consume_events_admin
///   18. `[optional]` close_market_admin
///   19. `[]` event_authority
///   20. `[]` program
#[derive(Clone, Debug, Default)]
pub struct CreateMarketBuilder {
    market: Option<solana_program::pubkey::Pubkey>,
    market_authority: Option<solana_program::pubkey::Pubkey>,
    bids: Option<solana_program::pubkey::Pubkey>,
    asks: Option<solana_program::pubkey::Pubkey>,
    event_heap: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    market_base_vault: Option<solana_program::pubkey::Pubkey>,
    market_quote_vault: Option<solana_program::pubkey::Pubkey>,
    base_mint: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    oracle_a: Option<solana_program::pubkey::Pubkey>,
    oracle_b: Option<solana_program::pubkey::Pubkey>,
    collect_fee_admin: Option<solana_program::pubkey::Pubkey>,
    open_orders_admin: Option<solana_program::pubkey::Pubkey>,
    consume_events_admin: Option<solana_program::pubkey::Pubkey>,
    close_market_admin: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    name: Option<String>,
    conf_filter: Option<f32>,
    max_staleness_slots: Option<u32>,
    quote_lot_size: Option<i64>,
    base_lot_size: Option<i64>,
    maker_fee: Option<i64>,
    taker_fee: Option<i64>,
    time_expiry: Option<i64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateMarketBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn market_authority(
        &mut self,
        market_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_authority = Some(market_authority);
        self
    }

    /// Accounts are initialized by client,
    /// anchor discriminator is set first when ix exits,
    #[inline(always)]
    pub fn bids(&mut self, bids: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bids = Some(bids);
        self
    }

    #[inline(always)]
    pub fn asks(&mut self, asks: solana_program::pubkey::Pubkey) -> &mut Self {
        self.asks = Some(asks);
        self
    }

    #[inline(always)]
    pub fn event_heap(&mut self, event_heap: solana_program::pubkey::Pubkey) -> &mut Self {
        self.event_heap = Some(event_heap);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn market_base_vault(
        &mut self,
        market_base_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_base_vault = Some(market_base_vault);
        self
    }

    #[inline(always)]
    pub fn market_quote_vault(
        &mut self,
        market_quote_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_quote_vault = Some(market_quote_vault);
        self
    }

    #[inline(always)]
    pub fn base_mint(&mut self, base_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_mint = Some(base_mint);
        self
    }

    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn oracle_a(&mut self, oracle_a: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.oracle_a = oracle_a;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn oracle_b(&mut self, oracle_b: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.oracle_b = oracle_b;
        self
    }

    #[inline(always)]
    pub fn collect_fee_admin(
        &mut self,
        collect_fee_admin: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collect_fee_admin = Some(collect_fee_admin);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn open_orders_admin(
        &mut self,
        open_orders_admin: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.open_orders_admin = open_orders_admin;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn consume_events_admin(
        &mut self,
        consume_events_admin: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.consume_events_admin = consume_events_admin;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn close_market_admin(
        &mut self,
        close_market_admin: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.close_market_admin = close_market_admin;
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }

    #[inline(always)]
    pub fn conf_filter(&mut self, conf_filter: f32) -> &mut Self {
        self.conf_filter = Some(conf_filter);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn max_staleness_slots(&mut self, max_staleness_slots: u32) -> &mut Self {
        self.max_staleness_slots = Some(max_staleness_slots);
        self
    }

    #[inline(always)]
    pub fn quote_lot_size(&mut self, quote_lot_size: i64) -> &mut Self {
        self.quote_lot_size = Some(quote_lot_size);
        self
    }

    #[inline(always)]
    pub fn base_lot_size(&mut self, base_lot_size: i64) -> &mut Self {
        self.base_lot_size = Some(base_lot_size);
        self
    }

    #[inline(always)]
    pub fn maker_fee(&mut self, maker_fee: i64) -> &mut Self {
        self.maker_fee = Some(maker_fee);
        self
    }

    #[inline(always)]
    pub fn taker_fee(&mut self, taker_fee: i64) -> &mut Self {
        self.taker_fee = Some(taker_fee);
        self
    }

    #[inline(always)]
    pub fn time_expiry(&mut self, time_expiry: i64) -> &mut Self {
        self.time_expiry = Some(time_expiry);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateMarket {
            market: self.market.expect("market is not set"),
            market_authority: self.market_authority.expect("market_authority is not set"),
            bids: self.bids.expect("bids is not set"),
            asks: self.asks.expect("asks is not set"),
            event_heap: self.event_heap.expect("event_heap is not set"),
            payer: self.payer.expect("payer is not set"),
            market_base_vault: self
                .market_base_vault
                .expect("market_base_vault is not set"),
            market_quote_vault: self
                .market_quote_vault
                .expect("market_quote_vault is not set"),
            base_mint: self.base_mint.expect("base_mint is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            oracle_a: self.oracle_a,
            oracle_b: self.oracle_b,
            collect_fee_admin: self
                .collect_fee_admin
                .expect("collect_fee_admin is not set"),
            open_orders_admin: self.open_orders_admin,
            consume_events_admin: self.consume_events_admin,
            close_market_admin: self.close_market_admin,
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = CreateMarketInstructionArgs {
            name: self.name.clone().expect("name is not set"),
            conf_filter: self.conf_filter.clone().expect("conf_filter is not set"),
            max_staleness_slots: self.max_staleness_slots.clone(),
            quote_lot_size: self
                .quote_lot_size
                .clone()
                .expect("quote_lot_size is not set"),
            base_lot_size: self
                .base_lot_size
                .clone()
                .expect("base_lot_size is not set"),
            maker_fee: self.maker_fee.clone().expect("maker_fee is not set"),
            taker_fee: self.taker_fee.clone().expect("taker_fee is not set"),
            time_expiry: self.time_expiry.clone().expect("time_expiry is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_market` CPI accounts.
pub struct CreateMarketCpiAccounts<'a, 'b> {
    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Accounts are initialized by client,
    /// anchor discriminator is set first when ix exits,
    pub bids: &'b solana_program::account_info::AccountInfo<'a>,

    pub asks: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_heap: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub oracle_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub collect_fee_admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub consume_events_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub close_market_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_market` CPI instruction.
pub struct CreateMarketCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Accounts are initialized by client,
    /// anchor discriminator is set first when ix exits,
    pub bids: &'b solana_program::account_info::AccountInfo<'a>,

    pub asks: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_heap: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub oracle_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub collect_fee_admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub consume_events_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub close_market_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateMarketInstructionArgs,
}

impl<'a, 'b> CreateMarketCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateMarketCpiAccounts<'a, 'b>,
        args: CreateMarketInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            market: accounts.market,
            market_authority: accounts.market_authority,
            bids: accounts.bids,
            asks: accounts.asks,
            event_heap: accounts.event_heap,
            payer: accounts.payer,
            market_base_vault: accounts.market_base_vault,
            market_quote_vault: accounts.market_quote_vault,
            base_mint: accounts.base_mint,
            quote_mint: accounts.quote_mint,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            oracle_a: accounts.oracle_a,
            oracle_b: accounts.oracle_b,
            collect_fee_admin: accounts.collect_fee_admin,
            open_orders_admin: accounts.open_orders_admin,
            consume_events_admin: accounts.consume_events_admin,
            close_market_admin: accounts.close_market_admin,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(21 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.market_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bids.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.asks.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.event_heap.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market_base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market_quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        if let Some(oracle_a) = self.oracle_a {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *oracle_a.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        if let Some(oracle_b) = self.oracle_b {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *oracle_b.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.collect_fee_admin.key,
            false,
        ));
        if let Some(open_orders_admin) = self.open_orders_admin {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *open_orders_admin.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        if let Some(consume_events_admin) = self.consume_events_admin {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *consume_events_admin.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        if let Some(close_market_admin) = self.close_market_admin {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *close_market_admin.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateMarketInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::OPENBOOK_V2_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(22 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.market_authority.clone());
        account_infos.push(self.bids.clone());
        account_infos.push(self.asks.clone());
        account_infos.push(self.event_heap.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.market_base_vault.clone());
        account_infos.push(self.market_quote_vault.clone());
        account_infos.push(self.base_mint.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        if let Some(oracle_a) = self.oracle_a {
            account_infos.push(oracle_a.clone());
        }
        if let Some(oracle_b) = self.oracle_b {
            account_infos.push(oracle_b.clone());
        }
        account_infos.push(self.collect_fee_admin.clone());
        if let Some(open_orders_admin) = self.open_orders_admin {
            account_infos.push(open_orders_admin.clone());
        }
        if let Some(consume_events_admin) = self.consume_events_admin {
            account_infos.push(consume_events_admin.clone());
        }
        if let Some(close_market_admin) = self.close_market_admin {
            account_infos.push(close_market_admin.clone());
        }
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateMarket` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` market
///   1. `[]` market_authority
///   2. `[writable]` bids
///   3. `[writable]` asks
///   4. `[writable]` event_heap
///   5. `[writable, signer]` payer
///   6. `[writable]` market_base_vault
///   7. `[writable]` market_quote_vault
///   8. `[]` base_mint
///   9. `[]` quote_mint
///   10. `[]` system_program
///   11. `[]` token_program
///   12. `[]` associated_token_program
///   13. `[optional]` oracle_a
///   14. `[optional]` oracle_b
///   15. `[]` collect_fee_admin
///   16. `[optional]` open_orders_admin
///   17. `[optional]` consume_events_admin
///   18. `[optional]` close_market_admin
///   19. `[]` event_authority
///   20. `[]` program
#[derive(Clone, Debug)]
pub struct CreateMarketCpiBuilder<'a, 'b> {
    instruction: Box<CreateMarketCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateMarketCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateMarketCpiBuilderInstruction {
            __program: program,
            market: None,
            market_authority: None,
            bids: None,
            asks: None,
            event_heap: None,
            payer: None,
            market_base_vault: None,
            market_quote_vault: None,
            base_mint: None,
            quote_mint: None,
            system_program: None,
            token_program: None,
            associated_token_program: None,
            oracle_a: None,
            oracle_b: None,
            collect_fee_admin: None,
            open_orders_admin: None,
            consume_events_admin: None,
            close_market_admin: None,
            event_authority: None,
            program: None,
            name: None,
            conf_filter: None,
            max_staleness_slots: None,
            quote_lot_size: None,
            base_lot_size: None,
            maker_fee: None,
            taker_fee: None,
            time_expiry: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn market_authority(
        &mut self,
        market_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_authority = Some(market_authority);
        self
    }

    /// Accounts are initialized by client,
    /// anchor discriminator is set first when ix exits,
    #[inline(always)]
    pub fn bids(&mut self, bids: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.bids = Some(bids);
        self
    }

    #[inline(always)]
    pub fn asks(&mut self, asks: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asks = Some(asks);
        self
    }

    #[inline(always)]
    pub fn event_heap(
        &mut self,
        event_heap: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_heap = Some(event_heap);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn market_base_vault(
        &mut self,
        market_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_base_vault = Some(market_base_vault);
        self
    }

    #[inline(always)]
    pub fn market_quote_vault(
        &mut self,
        market_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_quote_vault = Some(market_quote_vault);
        self
    }

    #[inline(always)]
    pub fn base_mint(
        &mut self,
        base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_mint = Some(base_mint);
        self
    }

    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn oracle_a(
        &mut self,
        oracle_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.oracle_a = oracle_a;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn oracle_b(
        &mut self,
        oracle_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.oracle_b = oracle_b;
        self
    }

    #[inline(always)]
    pub fn collect_fee_admin(
        &mut self,
        collect_fee_admin: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collect_fee_admin = Some(collect_fee_admin);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn open_orders_admin(
        &mut self,
        open_orders_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.open_orders_admin = open_orders_admin;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn consume_events_admin(
        &mut self,
        consume_events_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.consume_events_admin = consume_events_admin;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn close_market_admin(
        &mut self,
        close_market_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.close_market_admin = close_market_admin;
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }

    #[inline(always)]
    pub fn conf_filter(&mut self, conf_filter: f32) -> &mut Self {
        self.instruction.conf_filter = Some(conf_filter);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn max_staleness_slots(&mut self, max_staleness_slots: u32) -> &mut Self {
        self.instruction.max_staleness_slots = Some(max_staleness_slots);
        self
    }

    #[inline(always)]
    pub fn quote_lot_size(&mut self, quote_lot_size: i64) -> &mut Self {
        self.instruction.quote_lot_size = Some(quote_lot_size);
        self
    }

    #[inline(always)]
    pub fn base_lot_size(&mut self, base_lot_size: i64) -> &mut Self {
        self.instruction.base_lot_size = Some(base_lot_size);
        self
    }

    #[inline(always)]
    pub fn maker_fee(&mut self, maker_fee: i64) -> &mut Self {
        self.instruction.maker_fee = Some(maker_fee);
        self
    }

    #[inline(always)]
    pub fn taker_fee(&mut self, taker_fee: i64) -> &mut Self {
        self.instruction.taker_fee = Some(taker_fee);
        self
    }

    #[inline(always)]
    pub fn time_expiry(&mut self, time_expiry: i64) -> &mut Self {
        self.instruction.time_expiry = Some(time_expiry);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateMarketInstructionArgs {
            name: self.instruction.name.clone().expect("name is not set"),
            conf_filter: self
                .instruction
                .conf_filter
                .clone()
                .expect("conf_filter is not set"),
            max_staleness_slots: self.instruction.max_staleness_slots.clone(),
            quote_lot_size: self
                .instruction
                .quote_lot_size
                .clone()
                .expect("quote_lot_size is not set"),
            base_lot_size: self
                .instruction
                .base_lot_size
                .clone()
                .expect("base_lot_size is not set"),
            maker_fee: self
                .instruction
                .maker_fee
                .clone()
                .expect("maker_fee is not set"),
            taker_fee: self
                .instruction
                .taker_fee
                .clone()
                .expect("taker_fee is not set"),
            time_expiry: self
                .instruction
                .time_expiry
                .clone()
                .expect("time_expiry is not set"),
        };
        let instruction = CreateMarketCpi {
            __program: self.instruction.__program,

            market: self.instruction.market.expect("market is not set"),

            market_authority: self
                .instruction
                .market_authority
                .expect("market_authority is not set"),

            bids: self.instruction.bids.expect("bids is not set"),

            asks: self.instruction.asks.expect("asks is not set"),

            event_heap: self.instruction.event_heap.expect("event_heap is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            market_base_vault: self
                .instruction
                .market_base_vault
                .expect("market_base_vault is not set"),

            market_quote_vault: self
                .instruction
                .market_quote_vault
                .expect("market_quote_vault is not set"),

            base_mint: self.instruction.base_mint.expect("base_mint is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            oracle_a: self.instruction.oracle_a,

            oracle_b: self.instruction.oracle_b,

            collect_fee_admin: self
                .instruction
                .collect_fee_admin
                .expect("collect_fee_admin is not set"),

            open_orders_admin: self.instruction.open_orders_admin,

            consume_events_admin: self.instruction.consume_events_admin,

            close_market_admin: self.instruction.close_market_admin,

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateMarketCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bids: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    asks: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_heap: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collect_fee_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    open_orders_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    consume_events_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    close_market_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    name: Option<String>,
    conf_filter: Option<f32>,
    max_staleness_slots: Option<u32>,
    quote_lot_size: Option<i64>,
    base_lot_size: Option<i64>,
    maker_fee: Option<i64>,
    taker_fee: Option<i64>,
    time_expiry: Option<i64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
