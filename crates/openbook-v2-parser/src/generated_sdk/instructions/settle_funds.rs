//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct SettleFunds {
    pub owner: solana_program::pubkey::Pubkey,

    pub penalty_payer: solana_program::pubkey::Pubkey,

    pub open_orders_account: solana_program::pubkey::Pubkey,

    pub market: solana_program::pubkey::Pubkey,

    pub market_authority: solana_program::pubkey::Pubkey,

    pub market_base_vault: solana_program::pubkey::Pubkey,

    pub market_quote_vault: solana_program::pubkey::Pubkey,

    pub user_base_account: solana_program::pubkey::Pubkey,

    pub user_quote_account: solana_program::pubkey::Pubkey,

    pub referrer_account: Option<solana_program::pubkey::Pubkey>,

    pub token_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl SettleFunds {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.penalty_payer,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.open_orders_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.market_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market_base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market_quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_base_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_quote_account,
            false,
        ));
        if let Some(referrer_account) = self.referrer_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                referrer_account,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&SettleFundsInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::OPENBOOK_V2_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SettleFundsInstructionData {
    discriminator: [u8; 8],
}

impl SettleFundsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [238, 64, 163, 96, 75, 171, 16, 33],
        }
    }
}

impl Default for SettleFundsInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `SettleFunds`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` owner
///   1. `[writable, signer]` penalty_payer
///   2. `[writable]` open_orders_account
///   3. `[writable]` market
///   4. `[]` market_authority
///   5. `[writable]` market_base_vault
///   6. `[writable]` market_quote_vault
///   7. `[writable]` user_base_account
///   8. `[writable]` user_quote_account
///   9. `[writable, optional]` referrer_account
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   11. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct SettleFundsBuilder {
    owner: Option<solana_program::pubkey::Pubkey>,
    penalty_payer: Option<solana_program::pubkey::Pubkey>,
    open_orders_account: Option<solana_program::pubkey::Pubkey>,
    market: Option<solana_program::pubkey::Pubkey>,
    market_authority: Option<solana_program::pubkey::Pubkey>,
    market_base_vault: Option<solana_program::pubkey::Pubkey>,
    market_quote_vault: Option<solana_program::pubkey::Pubkey>,
    user_base_account: Option<solana_program::pubkey::Pubkey>,
    user_quote_account: Option<solana_program::pubkey::Pubkey>,
    referrer_account: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SettleFundsBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn penalty_payer(&mut self, penalty_payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.penalty_payer = Some(penalty_payer);
        self
    }

    #[inline(always)]
    pub fn open_orders_account(
        &mut self,
        open_orders_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.open_orders_account = Some(open_orders_account);
        self
    }

    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn market_authority(
        &mut self,
        market_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_authority = Some(market_authority);
        self
    }

    #[inline(always)]
    pub fn market_base_vault(
        &mut self,
        market_base_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_base_vault = Some(market_base_vault);
        self
    }

    #[inline(always)]
    pub fn market_quote_vault(
        &mut self,
        market_quote_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_quote_vault = Some(market_quote_vault);
        self
    }

    #[inline(always)]
    pub fn user_base_account(
        &mut self,
        user_base_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_base_account = Some(user_base_account);
        self
    }

    #[inline(always)]
    pub fn user_quote_account(
        &mut self,
        user_quote_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_quote_account = Some(user_quote_account);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn referrer_account(
        &mut self,
        referrer_account: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.referrer_account = referrer_account;
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SettleFunds {
            owner: self.owner.expect("owner is not set"),
            penalty_payer: self.penalty_payer.expect("penalty_payer is not set"),
            open_orders_account: self
                .open_orders_account
                .expect("open_orders_account is not set"),
            market: self.market.expect("market is not set"),
            market_authority: self.market_authority.expect("market_authority is not set"),
            market_base_vault: self
                .market_base_vault
                .expect("market_base_vault is not set"),
            market_quote_vault: self
                .market_quote_vault
                .expect("market_quote_vault is not set"),
            user_base_account: self
                .user_base_account
                .expect("user_base_account is not set"),
            user_quote_account: self
                .user_quote_account
                .expect("user_quote_account is not set"),
            referrer_account: self.referrer_account,
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `settle_funds` CPI accounts.
pub struct SettleFundsCpiAccounts<'a, 'b> {
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub penalty_payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_base_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_quote_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrer_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `settle_funds` CPI instruction.
pub struct SettleFundsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub penalty_payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_base_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_quote_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrer_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> SettleFundsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SettleFundsCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            penalty_payer: accounts.penalty_payer,
            open_orders_account: accounts.open_orders_account,
            market: accounts.market,
            market_authority: accounts.market_authority,
            market_base_vault: accounts.market_base_vault,
            market_quote_vault: accounts.market_quote_vault,
            user_base_account: accounts.user_base_account,
            user_quote_account: accounts.user_quote_account,
            referrer_account: accounts.referrer_account,
            token_program: accounts.token_program,
            system_program: accounts.system_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.penalty_payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.open_orders_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.market_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market_base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market_quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_base_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_quote_account.key,
            false,
        ));
        if let Some(referrer_account) = self.referrer_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *referrer_account.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&SettleFundsInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::OPENBOOK_V2_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.penalty_payer.clone());
        account_infos.push(self.open_orders_account.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.market_authority.clone());
        account_infos.push(self.market_base_vault.clone());
        account_infos.push(self.market_quote_vault.clone());
        account_infos.push(self.user_base_account.clone());
        account_infos.push(self.user_quote_account.clone());
        if let Some(referrer_account) = self.referrer_account {
            account_infos.push(referrer_account.clone());
        }
        account_infos.push(self.token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SettleFunds` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` owner
///   1. `[writable, signer]` penalty_payer
///   2. `[writable]` open_orders_account
///   3. `[writable]` market
///   4. `[]` market_authority
///   5. `[writable]` market_base_vault
///   6. `[writable]` market_quote_vault
///   7. `[writable]` user_base_account
///   8. `[writable]` user_quote_account
///   9. `[writable, optional]` referrer_account
///   10. `[]` token_program
///   11. `[]` system_program
#[derive(Clone, Debug)]
pub struct SettleFundsCpiBuilder<'a, 'b> {
    instruction: Box<SettleFundsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SettleFundsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SettleFundsCpiBuilderInstruction {
            __program: program,
            owner: None,
            penalty_payer: None,
            open_orders_account: None,
            market: None,
            market_authority: None,
            market_base_vault: None,
            market_quote_vault: None,
            user_base_account: None,
            user_quote_account: None,
            referrer_account: None,
            token_program: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn penalty_payer(
        &mut self,
        penalty_payer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.penalty_payer = Some(penalty_payer);
        self
    }

    #[inline(always)]
    pub fn open_orders_account(
        &mut self,
        open_orders_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders_account = Some(open_orders_account);
        self
    }

    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn market_authority(
        &mut self,
        market_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_authority = Some(market_authority);
        self
    }

    #[inline(always)]
    pub fn market_base_vault(
        &mut self,
        market_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_base_vault = Some(market_base_vault);
        self
    }

    #[inline(always)]
    pub fn market_quote_vault(
        &mut self,
        market_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_quote_vault = Some(market_quote_vault);
        self
    }

    #[inline(always)]
    pub fn user_base_account(
        &mut self,
        user_base_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_base_account = Some(user_base_account);
        self
    }

    #[inline(always)]
    pub fn user_quote_account(
        &mut self,
        user_quote_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_quote_account = Some(user_quote_account);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn referrer_account(
        &mut self,
        referrer_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.referrer_account = referrer_account;
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = SettleFundsCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            penalty_payer: self
                .instruction
                .penalty_payer
                .expect("penalty_payer is not set"),

            open_orders_account: self
                .instruction
                .open_orders_account
                .expect("open_orders_account is not set"),

            market: self.instruction.market.expect("market is not set"),

            market_authority: self
                .instruction
                .market_authority
                .expect("market_authority is not set"),

            market_base_vault: self
                .instruction
                .market_base_vault
                .expect("market_base_vault is not set"),

            market_quote_vault: self
                .instruction
                .market_quote_vault
                .expect("market_quote_vault is not set"),

            user_base_account: self
                .instruction
                .user_base_account
                .expect("user_base_account is not set"),

            user_quote_account: self
                .instruction
                .user_quote_account
                .expect("user_quote_account is not set"),

            referrer_account: self.instruction.referrer_account,

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SettleFundsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    penalty_payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    open_orders_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_base_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_quote_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    referrer_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
