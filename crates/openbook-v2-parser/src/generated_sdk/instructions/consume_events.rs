//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct ConsumeEvents {
    pub consume_events_admin: Option<solana_program::pubkey::Pubkey>,

    pub market: solana_program::pubkey::Pubkey,

    pub event_heap: solana_program::pubkey::Pubkey,
}

impl ConsumeEvents {
    pub fn instruction(
        &self,
        args: ConsumeEventsInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ConsumeEventsInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        if let Some(consume_events_admin) = self.consume_events_admin {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                consume_events_admin,
                true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.event_heap,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&ConsumeEventsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::OPENBOOK_V2_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConsumeEventsInstructionData {
    discriminator: [u8; 8],
}

impl ConsumeEventsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [221, 145, 177, 52, 31, 47, 63, 201],
        }
    }
}

impl Default for ConsumeEventsInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConsumeEventsInstructionArgs {
    pub limit: u64,
}

/// Instruction builder for `ConsumeEvents`.
///
/// ### Accounts:
///
///   0. `[signer, optional]` consume_events_admin
///   1. `[writable]` market
///   2. `[writable]` event_heap
#[derive(Clone, Debug, Default)]
pub struct ConsumeEventsBuilder {
    consume_events_admin: Option<solana_program::pubkey::Pubkey>,
    market: Option<solana_program::pubkey::Pubkey>,
    event_heap: Option<solana_program::pubkey::Pubkey>,
    limit: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ConsumeEventsBuilder {
    pub fn new() -> Self { Self::default() }

    /// `[optional account]`
    #[inline(always)]
    pub fn consume_events_admin(
        &mut self,
        consume_events_admin: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.consume_events_admin = consume_events_admin;
        self
    }

    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn event_heap(&mut self, event_heap: solana_program::pubkey::Pubkey) -> &mut Self {
        self.event_heap = Some(event_heap);
        self
    }

    #[inline(always)]
    pub fn limit(&mut self, limit: u64) -> &mut Self {
        self.limit = Some(limit);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ConsumeEvents {
            consume_events_admin: self.consume_events_admin,
            market: self.market.expect("market is not set"),
            event_heap: self.event_heap.expect("event_heap is not set"),
        };
        let args = ConsumeEventsInstructionArgs {
            limit: self.limit.clone().expect("limit is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `consume_events` CPI accounts.
pub struct ConsumeEventsCpiAccounts<'a, 'b> {
    pub consume_events_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_heap: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `consume_events` CPI instruction.
pub struct ConsumeEventsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub consume_events_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_heap: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: ConsumeEventsInstructionArgs,
}

impl<'a, 'b> ConsumeEventsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ConsumeEventsCpiAccounts<'a, 'b>,
        args: ConsumeEventsInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            consume_events_admin: accounts.consume_events_admin,
            market: accounts.market,
            event_heap: accounts.event_heap,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        if let Some(consume_events_admin) = self.consume_events_admin {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *consume_events_admin.key,
                true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::OPENBOOK_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.event_heap.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&ConsumeEventsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::OPENBOOK_V2_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        if let Some(consume_events_admin) = self.consume_events_admin {
            account_infos.push(consume_events_admin.clone());
        }
        account_infos.push(self.market.clone());
        account_infos.push(self.event_heap.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ConsumeEvents` via CPI.
///
/// ### Accounts:
///
///   0. `[signer, optional]` consume_events_admin
///   1. `[writable]` market
///   2. `[writable]` event_heap
#[derive(Clone, Debug)]
pub struct ConsumeEventsCpiBuilder<'a, 'b> {
    instruction: Box<ConsumeEventsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ConsumeEventsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ConsumeEventsCpiBuilderInstruction {
            __program: program,
            consume_events_admin: None,
            market: None,
            event_heap: None,
            limit: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn consume_events_admin(
        &mut self,
        consume_events_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.consume_events_admin = consume_events_admin;
        self
    }

    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }

    #[inline(always)]
    pub fn event_heap(
        &mut self,
        event_heap: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_heap = Some(event_heap);
        self
    }

    #[inline(always)]
    pub fn limit(&mut self, limit: u64) -> &mut Self {
        self.instruction.limit = Some(limit);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = ConsumeEventsInstructionArgs {
            limit: self.instruction.limit.clone().expect("limit is not set"),
        };
        let instruction = ConsumeEventsCpi {
            __program: self.instruction.__program,

            consume_events_admin: self.instruction.consume_events_admin,

            market: self.instruction.market.expect("market is not set"),

            event_heap: self.instruction.event_heap.expect("event_heap is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ConsumeEventsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    consume_events_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_heap: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    limit: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
