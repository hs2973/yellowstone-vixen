//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CreateStrategy {
    pub owner: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub strategy: solana_program::pubkey::Pubkey,
}

impl CreateStrategy {
    pub fn instruction(
        &self,
        args: CreateStrategyInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateStrategyInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateStrategyInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::STABLE_SWAP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateStrategyInstructionData {
    discriminator: [u8; 8],
}

impl CreateStrategyInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [152, 160, 107, 148, 245, 190, 127, 224],
        }
    }
}

impl Default for CreateStrategyInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateStrategyInstructionArgs {
    pub amp_min_factor: u16,
    pub amp_max_factor: u16,
    pub ramp_min_step: u16,
    pub ramp_max_step: u16,
    pub ramp_min_duration: u32,
    pub ramp_max_duration: u32,
}

/// Instruction builder for `CreateStrategy`.
///
/// ### Accounts:
///
///   0. `[signer]` owner
///   1. `[writable]` pool
///   2. `[writable]` strategy
#[derive(Clone, Debug, Default)]
pub struct CreateStrategyBuilder {
    owner: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    strategy: Option<solana_program::pubkey::Pubkey>,
    amp_min_factor: Option<u16>,
    amp_max_factor: Option<u16>,
    ramp_min_step: Option<u16>,
    ramp_max_step: Option<u16>,
    ramp_min_duration: Option<u32>,
    ramp_max_duration: Option<u32>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateStrategyBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
        self.strategy = Some(strategy);
        self
    }

    #[inline(always)]
    pub fn amp_min_factor(&mut self, amp_min_factor: u16) -> &mut Self {
        self.amp_min_factor = Some(amp_min_factor);
        self
    }

    #[inline(always)]
    pub fn amp_max_factor(&mut self, amp_max_factor: u16) -> &mut Self {
        self.amp_max_factor = Some(amp_max_factor);
        self
    }

    #[inline(always)]
    pub fn ramp_min_step(&mut self, ramp_min_step: u16) -> &mut Self {
        self.ramp_min_step = Some(ramp_min_step);
        self
    }

    #[inline(always)]
    pub fn ramp_max_step(&mut self, ramp_max_step: u16) -> &mut Self {
        self.ramp_max_step = Some(ramp_max_step);
        self
    }

    #[inline(always)]
    pub fn ramp_min_duration(&mut self, ramp_min_duration: u32) -> &mut Self {
        self.ramp_min_duration = Some(ramp_min_duration);
        self
    }

    #[inline(always)]
    pub fn ramp_max_duration(&mut self, ramp_max_duration: u32) -> &mut Self {
        self.ramp_max_duration = Some(ramp_max_duration);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateStrategy {
            owner: self.owner.expect("owner is not set"),
            pool: self.pool.expect("pool is not set"),
            strategy: self.strategy.expect("strategy is not set"),
        };
        let args = CreateStrategyInstructionArgs {
            amp_min_factor: self
                .amp_min_factor
                .clone()
                .expect("amp_min_factor is not set"),
            amp_max_factor: self
                .amp_max_factor
                .clone()
                .expect("amp_max_factor is not set"),
            ramp_min_step: self
                .ramp_min_step
                .clone()
                .expect("ramp_min_step is not set"),
            ramp_max_step: self
                .ramp_max_step
                .clone()
                .expect("ramp_max_step is not set"),
            ramp_min_duration: self
                .ramp_min_duration
                .clone()
                .expect("ramp_min_duration is not set"),
            ramp_max_duration: self
                .ramp_max_duration
                .clone()
                .expect("ramp_max_duration is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_strategy` CPI accounts.
pub struct CreateStrategyCpiAccounts<'a, 'b> {
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_strategy` CPI instruction.
pub struct CreateStrategyCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateStrategyInstructionArgs,
}

impl<'a, 'b> CreateStrategyCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateStrategyCpiAccounts<'a, 'b>,
        args: CreateStrategyInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            pool: accounts.pool,
            strategy: accounts.strategy,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateStrategyInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::STABLE_SWAP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.strategy.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateStrategy` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` owner
///   1. `[writable]` pool
///   2. `[writable]` strategy
#[derive(Clone, Debug)]
pub struct CreateStrategyCpiBuilder<'a, 'b> {
    instruction: Box<CreateStrategyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateStrategyCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateStrategyCpiBuilderInstruction {
            __program: program,
            owner: None,
            pool: None,
            strategy: None,
            amp_min_factor: None,
            amp_max_factor: None,
            ramp_min_step: None,
            ramp_max_step: None,
            ramp_min_duration: None,
            ramp_max_duration: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn strategy(
        &mut self,
        strategy: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy = Some(strategy);
        self
    }

    #[inline(always)]
    pub fn amp_min_factor(&mut self, amp_min_factor: u16) -> &mut Self {
        self.instruction.amp_min_factor = Some(amp_min_factor);
        self
    }

    #[inline(always)]
    pub fn amp_max_factor(&mut self, amp_max_factor: u16) -> &mut Self {
        self.instruction.amp_max_factor = Some(amp_max_factor);
        self
    }

    #[inline(always)]
    pub fn ramp_min_step(&mut self, ramp_min_step: u16) -> &mut Self {
        self.instruction.ramp_min_step = Some(ramp_min_step);
        self
    }

    #[inline(always)]
    pub fn ramp_max_step(&mut self, ramp_max_step: u16) -> &mut Self {
        self.instruction.ramp_max_step = Some(ramp_max_step);
        self
    }

    #[inline(always)]
    pub fn ramp_min_duration(&mut self, ramp_min_duration: u32) -> &mut Self {
        self.instruction.ramp_min_duration = Some(ramp_min_duration);
        self
    }

    #[inline(always)]
    pub fn ramp_max_duration(&mut self, ramp_max_duration: u32) -> &mut Self {
        self.instruction.ramp_max_duration = Some(ramp_max_duration);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateStrategyInstructionArgs {
            amp_min_factor: self
                .instruction
                .amp_min_factor
                .clone()
                .expect("amp_min_factor is not set"),
            amp_max_factor: self
                .instruction
                .amp_max_factor
                .clone()
                .expect("amp_max_factor is not set"),
            ramp_min_step: self
                .instruction
                .ramp_min_step
                .clone()
                .expect("ramp_min_step is not set"),
            ramp_max_step: self
                .instruction
                .ramp_max_step
                .clone()
                .expect("ramp_max_step is not set"),
            ramp_min_duration: self
                .instruction
                .ramp_min_duration
                .clone()
                .expect("ramp_min_duration is not set"),
            ramp_max_duration: self
                .instruction
                .ramp_max_duration
                .clone()
                .expect("ramp_max_duration is not set"),
        };
        let instruction = CreateStrategyCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            strategy: self.instruction.strategy.expect("strategy is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateStrategyCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amp_min_factor: Option<u16>,
    amp_max_factor: Option<u16>,
    ramp_min_step: Option<u16>,
    ramp_max_step: Option<u16>,
    ramp_min_duration: Option<u32>,
    ramp_max_duration: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
